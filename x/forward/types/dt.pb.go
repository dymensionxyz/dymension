// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/forward/dt.proto

package types

import (
	fmt "fmt"
	types "github.com/bcp-innovations/hyperlane-cosmos/x/warp/types"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/cosmos/ibc-go/v8/modules/apps/transfer/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Used to deposit funds if something fails
type Recovery struct {
	// This should be the hex address of the rollup chain.
	// All relevant transfers end up at the rollup or come from the rollupp,
	// so we can just use the same hex address as the recovery on the hub.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Recovery) Reset()         { *m = Recovery{} }
func (m *Recovery) String() string { return proto.CompactTextString(m) }
func (*Recovery) ProtoMessage()    {}
func (*Recovery) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdb3fdf27098576, []int{0}
}
func (m *Recovery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recovery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recovery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recovery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recovery.Merge(m, src)
}
func (m *Recovery) XXX_Size() int {
	return m.Size()
}
func (m *Recovery) XXX_DiscardUnknown() {
	xxx_messageInfo_Recovery.DiscardUnknown(m)
}

var xxx_messageInfo_Recovery proto.InternalMessageInfo

func (m *Recovery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// for eibc -> hyperlane
type HookEIBCtoHL struct {
	HyperlaneTransfer *types.MsgRemoteTransfer `protobuf:"bytes,1,opt,name=hyperlane_transfer,json=hyperlaneTransfer,proto3" json:"hyperlane_transfer,omitempty"`
	Recovery          *Recovery                `protobuf:"bytes,4,opt,name=recovery,proto3" json:"recovery,omitempty"`
}

func (m *HookEIBCtoHL) Reset()         { *m = HookEIBCtoHL{} }
func (m *HookEIBCtoHL) String() string { return proto.CompactTextString(m) }
func (*HookEIBCtoHL) ProtoMessage()    {}
func (*HookEIBCtoHL) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdb3fdf27098576, []int{1}
}
func (m *HookEIBCtoHL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HookEIBCtoHL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HookEIBCtoHL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HookEIBCtoHL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HookEIBCtoHL.Merge(m, src)
}
func (m *HookEIBCtoHL) XXX_Size() int {
	return m.Size()
}
func (m *HookEIBCtoHL) XXX_DiscardUnknown() {
	xxx_messageInfo_HookEIBCtoHL.DiscardUnknown(m)
}

var xxx_messageInfo_HookEIBCtoHL proto.InternalMessageInfo

func (m *HookEIBCtoHL) GetHyperlaneTransfer() *types.MsgRemoteTransfer {
	if m != nil {
		return m.HyperlaneTransfer
	}
	return nil
}

func (m *HookEIBCtoHL) GetRecovery() *Recovery {
	if m != nil {
		return m.Recovery
	}
	return nil
}

// How to test?
// - Make sure the cosmos account in the original HL recipient is the forward module account
// (conflict with the usage of send coins from module to account in the HL code?)
// - Use the tokens to immediately do a transfer to the rollapp
// - On refund... hmmmmmmmm, also someone can fast fulfill the refund :(
type HookHLtoIBC struct {
	Transfer *types1.MsgTransfer `protobuf:"bytes,1,opt,name=transfer,proto3" json:"transfer,omitempty"`
	Recovery *Recovery           `protobuf:"bytes,2,opt,name=recovery,proto3" json:"recovery,omitempty"`
}

func (m *HookHLtoIBC) Reset()         { *m = HookHLtoIBC{} }
func (m *HookHLtoIBC) String() string { return proto.CompactTextString(m) }
func (*HookHLtoIBC) ProtoMessage()    {}
func (*HookHLtoIBC) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdb3fdf27098576, []int{2}
}
func (m *HookHLtoIBC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HookHLtoIBC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HookHLtoIBC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HookHLtoIBC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HookHLtoIBC.Merge(m, src)
}
func (m *HookHLtoIBC) XXX_Size() int {
	return m.Size()
}
func (m *HookHLtoIBC) XXX_DiscardUnknown() {
	xxx_messageInfo_HookHLtoIBC.DiscardUnknown(m)
}

var xxx_messageInfo_HookHLtoIBC proto.InternalMessageInfo

func (m *HookHLtoIBC) GetTransfer() *types1.MsgTransfer {
	if m != nil {
		return m.Transfer
	}
	return nil
}

func (m *HookHLtoIBC) GetRecovery() *Recovery {
	if m != nil {
		return m.Recovery
	}
	return nil
}

func init() {
	proto.RegisterType((*Recovery)(nil), "dymensionxyz.dymension.forward.Recovery")
	proto.RegisterType((*HookEIBCtoHL)(nil), "dymensionxyz.dymension.forward.HookEIBCtoHL")
	proto.RegisterType((*HookHLtoIBC)(nil), "dymensionxyz.dymension.forward.HookHLtoIBC")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/forward/dt.proto", fileDescriptor_abdb3fdf27098576)
}

var fileDescriptor_abdb3fdf27098576 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4e, 0x02, 0x31,
	0x10, 0x86, 0xa9, 0x31, 0x8a, 0xc5, 0x8b, 0x7b, 0x22, 0x1c, 0x1a, 0x43, 0x30, 0xe2, 0x65, 0x1a,
	0xc4, 0x27, 0x00, 0x49, 0x20, 0x41, 0x0f, 0xab, 0x27, 0x2f, 0xa6, 0xbb, 0x5b, 0x60, 0x23, 0xec,
	0x6c, 0xda, 0xba, 0xb0, 0x3e, 0x85, 0x67, 0xdf, 0xc0, 0x37, 0xf1, 0xc8, 0xd1, 0xa3, 0x81, 0x17,
	0x31, 0xe0, 0x6e, 0xb3, 0x9a, 0xe8, 0xc1, 0xe3, 0xb4, 0xdf, 0x3f, 0xfd, 0x32, 0x1d, 0x7a, 0x1a,
	0xa4, 0x33, 0x19, 0xe9, 0x10, 0xa3, 0x45, 0xfa, 0xc4, 0x6d, 0xc1, 0x47, 0xa8, 0xe6, 0x42, 0x05,
	0x3c, 0x30, 0x10, 0x2b, 0x34, 0xe8, 0xb0, 0x22, 0x08, 0xb6, 0x80, 0x0c, 0xac, 0xd5, 0x26, 0x69,
	0x2c, 0xd5, 0x54, 0x44, 0x92, 0xcf, 0x85, 0x8a, 0x79, 0xd2, 0xe2, 0x66, 0xf1, 0x95, 0xad, 0x9d,
	0x84, 0x9e, 0xcf, 0x45, 0x1c, 0x4f, 0x43, 0x5f, 0x98, 0x10, 0x23, 0xcd, 0x8d, 0x12, 0x91, 0x1e,
	0x49, 0x55, 0xc4, 0xea, 0x0d, 0x5a, 0x76, 0xa5, 0x8f, 0x89, 0x54, 0xa9, 0x53, 0xa5, 0xfb, 0x22,
	0x08, 0x94, 0xd4, 0xba, 0x4a, 0x8e, 0x49, 0xf3, 0xc0, 0xcd, 0xcb, 0xfa, 0x2b, 0xa1, 0x87, 0x7d,
	0xc4, 0x87, 0xde, 0xa0, 0xd3, 0x35, 0xd8, 0x1f, 0x3a, 0x37, 0xd4, 0xb1, 0x6f, 0xdf, 0xe7, 0x8d,
	0xb7, 0xa9, 0xca, 0x79, 0x03, 0xec, 0x15, 0x6c, 0xb4, 0x20, 0x69, 0xc1, 0x95, 0x1e, 0xbb, 0x72,
	0x86, 0x46, 0xde, 0x66, 0xac, 0x7b, 0x64, 0xa1, 0xfc, 0xc8, 0xb9, 0xa4, 0x65, 0x95, 0xb9, 0x54,
	0x77, 0xb7, 0xad, 0x9a, 0xf0, 0xf7, 0x04, 0x20, 0x77, 0x77, 0x6d, 0xb2, 0xfe, 0x42, 0x68, 0x65,
	0xe3, 0xda, 0x1f, 0x1a, 0x1c, 0x74, 0xba, 0x4e, 0x8f, 0x96, 0x7f, 0x08, 0x9e, 0x41, 0xe8, 0xf9,
	0x50, 0x9c, 0x0d, 0xe4, 0x44, 0xe6, 0x6a, 0x2d, 0x6d, 0xf4, 0x9b, 0xdc, 0xce, 0x7f, 0xe5, 0x3a,
	0xd7, 0x6f, 0x2b, 0x46, 0x96, 0x2b, 0x46, 0x3e, 0x56, 0x8c, 0x3c, 0xaf, 0x59, 0x69, 0xb9, 0x66,
	0xa5, 0xf7, 0x35, 0x2b, 0xdd, 0x5d, 0x8c, 0x43, 0x33, 0x79, 0xf4, 0xc0, 0xc7, 0x19, 0xff, 0x65,
	0x3f, 0x92, 0x36, 0x5f, 0xd8, 0x25, 0x31, 0x69, 0x2c, 0xb5, 0xb7, 0xb7, 0xfd, 0xc5, 0xf6, 0x67,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0x99, 0xc0, 0x5c, 0x53, 0x02, 0x00, 0x00,
}

func (m *Recovery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDt(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HookEIBCtoHL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HookEIBCtoHL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HookEIBCtoHL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Recovery != nil {
		{
			size, err := m.Recovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HyperlaneTransfer != nil {
		{
			size, err := m.HyperlaneTransfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HookHLtoIBC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HookHLtoIBC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HookHLtoIBC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Recovery != nil {
		{
			size, err := m.Recovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Transfer != nil {
		{
			size, err := m.Transfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDt(dAtA []byte, offset int, v uint64) int {
	offset -= sovDt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Recovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDt(uint64(l))
	}
	return n
}

func (m *HookEIBCtoHL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperlaneTransfer != nil {
		l = m.HyperlaneTransfer.Size()
		n += 1 + l + sovDt(uint64(l))
	}
	if m.Recovery != nil {
		l = m.Recovery.Size()
		n += 1 + l + sovDt(uint64(l))
	}
	return n
}

func (m *HookHLtoIBC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transfer != nil {
		l = m.Transfer.Size()
		n += 1 + l + sovDt(uint64(l))
	}
	if m.Recovery != nil {
		l = m.Recovery.Size()
		n += 1 + l + sovDt(uint64(l))
	}
	return n
}

func sovDt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDt(x uint64) (n int) {
	return sovDt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Recovery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recovery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recovery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HookEIBCtoHL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HookEIBCtoHL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HookEIBCtoHL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperlaneTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HyperlaneTransfer == nil {
				m.HyperlaneTransfer = &types.MsgRemoteTransfer{}
			}
			if err := m.HyperlaneTransfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recovery == nil {
				m.Recovery = &Recovery{}
			}
			if err := m.Recovery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HookHLtoIBC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HookHLtoIBC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HookHLtoIBC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transfer == nil {
				m.Transfer = &types1.MsgTransfer{}
			}
			if err := m.Transfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recovery == nil {
				m.Recovery = &Recovery{}
			}
			if err := m.Recovery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDt = fmt.Errorf("proto: unexpected end of group")
)
