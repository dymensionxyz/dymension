// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/streamer/stream.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PumpDistr is a distribution used to determine pump amount
type PumpDistr int32

const (
	PumpDistr_PUMP_DISTR_UNSPECIFIED PumpDistr = 0
	PumpDistr_PUMP_DISTR_UNIFORM     PumpDistr = 1
	PumpDistr_PUMP_DISTR_EXPONENTIAL PumpDistr = 2
)

var PumpDistr_name = map[int32]string{
	0: "PUMP_DISTR_UNSPECIFIED",
	1: "PUMP_DISTR_UNIFORM",
	2: "PUMP_DISTR_EXPONENTIAL",
}

var PumpDistr_value = map[string]int32{
	"PUMP_DISTR_UNSPECIFIED": 0,
	"PUMP_DISTR_UNIFORM":     1,
	"PUMP_DISTR_EXPONENTIAL": 2,
}

func (x PumpDistr) String() string {
	return proto.EnumName(PumpDistr_name, int32(x))
}

func (PumpDistr) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_19586ad841c00cd9, []int{0}
}

// Stream is an object that stores and distributes yields to recipients who
// satisfy certain conditions. Currently streams support conditions around the
// duration for which a given denom is locked.
type Stream struct {
	// id is the unique ID of a Stream
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// distribute_to is the distr_info.
	DistributeTo DistrInfo `protobuf:"bytes,2,opt,name=distribute_to,json=distributeTo,proto3" json:"distribute_to"`
	// coins is the total amount of coins that have been in the stream
	// Can distribute multiple coin denoms
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
	// start_time is the distribution start time
	StartTime time.Time `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// distr_epoch_identifier is what epoch type di-stribution will be triggered
	// by
	// (day, week, etc.)
	DistrEpochIdentifier string `protobuf:"bytes,5,opt,name=distr_epoch_identifier,json=distrEpochIdentifier,proto3" json:"distr_epoch_identifier,omitempty" yaml:"distr_epoch_identifier"`
	// num_epochs_paid_over is the number of total epochs distribution will be
	// completed over
	NumEpochsPaidOver uint64 `protobuf:"varint,6,opt,name=num_epochs_paid_over,json=numEpochsPaidOver,proto3" json:"num_epochs_paid_over,omitempty"`
	// filled_epochs is the number of epochs distribution has been completed on
	// already
	FilledEpochs uint64 `protobuf:"varint,7,opt,name=filled_epochs,json=filledEpochs,proto3" json:"filled_epochs,omitempty"`
	// distributed_coins are coins that have been distributed already
	DistributedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=distributed_coins,json=distributedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"distributed_coins"`
	// Sponsored indicates if the stream is based on the sponsorship distribution.
	Sponsored bool `protobuf:"varint,9,opt,name=sponsored,proto3" json:"sponsored,omitempty"`
	// EpochCoins are coins that need to be distributed in this epoch.
	EpochCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,10,rep,name=epoch_coins,json=epochCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"epoch_coins"`
	// PumpParams is an *optional* field indicating if the stream
	// is pumping or distributing. If non-null, it contains pumping params.
	// For now, every pump stream should be sponsored.
	PumpParams *PumpParams `protobuf:"bytes,11,opt,name=pump_params,json=pumpParams,proto3" json:"pump_params,omitempty"`
}

func (m *Stream) Reset()         { *m = Stream{} }
func (m *Stream) String() string { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()    {}
func (*Stream) Descriptor() ([]byte, []int) {
	return fileDescriptor_19586ad841c00cd9, []int{0}
}
func (m *Stream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stream.Merge(m, src)
}
func (m *Stream) XXX_Size() int {
	return m.Size()
}
func (m *Stream) XXX_DiscardUnknown() {
	xxx_messageInfo_Stream.DiscardUnknown(m)
}

var xxx_messageInfo_Stream proto.InternalMessageInfo

func (m *Stream) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Stream) GetDistributeTo() DistrInfo {
	if m != nil {
		return m.DistributeTo
	}
	return DistrInfo{}
}

func (m *Stream) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *Stream) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Stream) GetDistrEpochIdentifier() string {
	if m != nil {
		return m.DistrEpochIdentifier
	}
	return ""
}

func (m *Stream) GetNumEpochsPaidOver() uint64 {
	if m != nil {
		return m.NumEpochsPaidOver
	}
	return 0
}

func (m *Stream) GetFilledEpochs() uint64 {
	if m != nil {
		return m.FilledEpochs
	}
	return 0
}

func (m *Stream) GetDistributedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.DistributedCoins
	}
	return nil
}

func (m *Stream) GetSponsored() bool {
	if m != nil {
		return m.Sponsored
	}
	return false
}

func (m *Stream) GetEpochCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.EpochCoins
	}
	return nil
}

func (m *Stream) GetPumpParams() *PumpParams {
	if m != nil {
		return m.PumpParams
	}
	return nil
}

type PumpParams struct {
	// NumTopRollapps is a number of rollapps, top N by the voting power,
	// that will be pumped on every pump iteration.
	NumTopRollapps uint32 `protobuf:"varint,1,opt,name=num_top_rollapps,json=numTopRollapps,proto3" json:"num_top_rollapps,omitempty"`
	// EpochBudget is how many DYM are dedicated for pumping
	// in this Epoch.
	EpochBudget cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=epoch_budget,json=epochBudget,proto3,customtype=cosmossdk.io/math.Int" json:"epoch_budget"`
	// EpochBudgetLeft is DYM that is left for pumping in the epoch.
	// epoch_budget_left <= epoch_budget.
	EpochBudgetLeft cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=epoch_budget_left,json=epochBudgetLeft,proto3,customtype=cosmossdk.io/math.Int" json:"epoch_budget_left"`
	// NumPumps is a target number of pumps that expected to happen
	// in the epoch (probabilistically)
	NumPumps uint64 `protobuf:"varint,4,opt,name=num_pumps,json=numPumps,proto3" json:"num_pumps,omitempty"`
	// PumpDistr is a distribution used to determine pump amount
	PumpDistr PumpDistr `protobuf:"varint,5,opt,name=pump_distr,json=pumpDistr,proto3,enum=dymensionxyz.dymension.streamer.PumpDistr" json:"pump_distr,omitempty"`
}

func (m *PumpParams) Reset()         { *m = PumpParams{} }
func (m *PumpParams) String() string { return proto.CompactTextString(m) }
func (*PumpParams) ProtoMessage()    {}
func (*PumpParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_19586ad841c00cd9, []int{1}
}
func (m *PumpParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PumpParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PumpParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PumpParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PumpParams.Merge(m, src)
}
func (m *PumpParams) XXX_Size() int {
	return m.Size()
}
func (m *PumpParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PumpParams.DiscardUnknown(m)
}

var xxx_messageInfo_PumpParams proto.InternalMessageInfo

func (m *PumpParams) GetNumTopRollapps() uint32 {
	if m != nil {
		return m.NumTopRollapps
	}
	return 0
}

func (m *PumpParams) GetNumPumps() uint64 {
	if m != nil {
		return m.NumPumps
	}
	return 0
}

func (m *PumpParams) GetPumpDistr() PumpDistr {
	if m != nil {
		return m.PumpDistr
	}
	return PumpDistr_PUMP_DISTR_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("dymensionxyz.dymension.streamer.PumpDistr", PumpDistr_name, PumpDistr_value)
	proto.RegisterType((*Stream)(nil), "dymensionxyz.dymension.streamer.Stream")
	proto.RegisterType((*PumpParams)(nil), "dymensionxyz.dymension.streamer.PumpParams")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/streamer/stream.proto", fileDescriptor_19586ad841c00cd9)
}

var fileDescriptor_19586ad841c00cd9 = []byte{
	// 781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x4e, 0xeb, 0x46,
	0x14, 0x8e, 0x43, 0x6e, 0x8a, 0x27, 0x40, 0x93, 0x11, 0x45, 0xbe, 0x69, 0x6f, 0x9c, 0xa6, 0x9b,
	0xe8, 0xde, 0x5e, 0xfb, 0x5e, 0x50, 0x37, 0xdd, 0x35, 0x10, 0x24, 0x4b, 0x90, 0x44, 0x26, 0x08,
	0xd4, 0x2e, 0x2c, 0x27, 0x9e, 0x84, 0x11, 0xb6, 0x67, 0xe4, 0x19, 0x47, 0xa4, 0x4f, 0xc1, 0x73,
	0x74, 0xd3, 0x4d, 0xdf, 0xa1, 0x2c, 0x51, 0x57, 0x55, 0x17, 0xa1, 0x82, 0x37, 0xe0, 0x09, 0xaa,
	0x99, 0x71, 0x7e, 0x8a, 0x5a, 0xd1, 0x4a, 0xac, 0x3c, 0x73, 0xce, 0xf9, 0x3e, 0x9f, 0xef, 0x9b,
	0x99, 0x03, 0xbe, 0x0e, 0xa6, 0x11, 0x8a, 0x19, 0x26, 0xf1, 0xd5, 0xf4, 0x47, 0x7b, 0xb1, 0xb1,
	0x19, 0x4f, 0x90, 0x1f, 0xa1, 0x24, 0x5b, 0x58, 0x34, 0x21, 0x9c, 0x40, 0x73, 0xb5, 0xda, 0x5a,
	0x6c, 0xac, 0x79, 0x75, 0x75, 0x7b, 0x4c, 0xc6, 0x44, 0xd6, 0xda, 0x62, 0xa5, 0x60, 0xd5, 0xd7,
	0x43, 0xc2, 0x22, 0xc2, 0x3c, 0x95, 0x50, 0x9b, 0x2c, 0x55, 0x1b, 0x13, 0x32, 0x0e, 0x91, 0x2d,
	0x77, 0x83, 0x74, 0x64, 0x07, 0x69, 0xe2, 0x73, 0xc1, 0xa9, 0xf2, 0xe6, 0xd3, 0x3c, 0xc7, 0x11,
	0x62, 0xdc, 0x8f, 0xe8, 0x9c, 0x40, 0xd1, 0xd9, 0x03, 0x9f, 0x21, 0x7b, 0xf2, 0x71, 0x80, 0xb8,
	0xff, 0xd1, 0x1e, 0x12, 0x3c, 0x27, 0xf8, 0xf0, 0x9c, 0xc0, 0x00, 0x33, 0x9e, 0x78, 0x38, 0x1e,
	0x65, 0xdd, 0x36, 0x7e, 0x2e, 0x82, 0xe2, 0x89, 0xcc, 0xc2, 0x2d, 0x90, 0xc7, 0x81, 0xa1, 0xd5,
	0xb5, 0x66, 0xc1, 0xcd, 0xe3, 0x00, 0x9e, 0x82, 0x4d, 0x59, 0x8e, 0x07, 0x29, 0x47, 0x1e, 0x27,
	0x46, 0xbe, 0xae, 0x35, 0x4b, 0xbb, 0x6f, 0xad, 0x67, 0x7c, 0xb1, 0x0e, 0x04, 0xca, 0x89, 0x47,
	0xa4, 0x55, 0xb8, 0x99, 0x99, 0x39, 0x77, 0x63, 0x49, 0xd3, 0x27, 0xd0, 0x07, 0xaf, 0x44, 0xc7,
	0xcc, 0x58, 0xab, 0xaf, 0x35, 0x4b, 0xbb, 0xaf, 0xad, 0xcc, 0x22, 0xa1, 0xc9, 0xca, 0x34, 0x59,
	0xfb, 0x04, 0xc7, 0xad, 0x0f, 0x02, 0xfd, 0xd3, 0x9d, 0xd9, 0x1c, 0x63, 0x7e, 0x91, 0x0e, 0xac,
	0x21, 0x89, 0x32, 0x3f, 0xb3, 0xcf, 0x7b, 0x16, 0x5c, 0xda, 0x7c, 0x4a, 0x11, 0x93, 0x00, 0xe6,
	0x2a, 0x66, 0x78, 0x0e, 0x00, 0xe3, 0x7e, 0xc2, 0x3d, 0xe1, 0x9f, 0x51, 0x90, 0x6d, 0x57, 0x2d,
	0x65, 0xae, 0x35, 0x37, 0xd7, 0xea, 0xcf, 0xcd, 0x6d, 0xbd, 0x11, 0x3f, 0x7a, 0x9c, 0x99, 0x95,
	0xa9, 0x1f, 0x85, 0xdf, 0x36, 0x96, 0xd8, 0xc6, 0xf5, 0x9d, 0xa9, 0xb9, 0xba, 0x0c, 0x88, 0x72,
	0x78, 0x06, 0x76, 0x94, 0x85, 0x88, 0x92, 0xe1, 0x85, 0x87, 0x03, 0x14, 0x73, 0x3c, 0xc2, 0x28,
	0x31, 0x5e, 0xd5, 0xb5, 0xa6, 0xde, 0xfa, 0xf2, 0x71, 0x66, 0xbe, 0x51, 0x2c, 0xff, 0x5c, 0xd7,
	0x70, 0xb7, 0x65, 0xa2, 0x2d, 0xe2, 0xce, 0x22, 0x0c, 0x6d, 0xb0, 0x1d, 0xa7, 0x91, 0x2a, 0x67,
	0x1e, 0xf5, 0x71, 0xe0, 0x91, 0x09, 0x4a, 0x8c, 0xa2, 0x3c, 0x8e, 0x4a, 0x9c, 0x46, 0x12, 0xc1,
	0x7a, 0x3e, 0x0e, 0xba, 0x13, 0x94, 0xc0, 0xaf, 0xc0, 0xe6, 0x08, 0x87, 0x21, 0x0a, 0x32, 0x8c,
	0xf1, 0x89, 0xac, 0xdc, 0x50, 0x41, 0x55, 0x0c, 0xaf, 0x40, 0x65, 0xe9, 0x7d, 0xe0, 0x29, 0xdf,
	0xd7, 0x5f, 0xde, 0xf7, 0xf2, 0xca, 0x5f, 0x64, 0x04, 0x7e, 0x01, 0x74, 0x46, 0x49, 0xcc, 0x48,
	0x82, 0x02, 0x43, 0xaf, 0x6b, 0xcd, 0x75, 0x77, 0x19, 0x80, 0x21, 0x28, 0x29, 0x63, 0x54, 0x47,
	0xe0, 0xe5, 0x3b, 0x02, 0x92, 0x5f, 0xf5, 0x72, 0x04, 0x4a, 0x34, 0x8d, 0xa8, 0x47, 0xfd, 0xc4,
	0x8f, 0x98, 0x51, 0x92, 0xf7, 0xe1, 0xdd, 0xb3, 0xd7, 0xb8, 0x97, 0x46, 0xb4, 0x27, 0x21, 0x2e,
	0xa0, 0x8b, 0x75, 0xe3, 0xd7, 0x3c, 0x00, 0xcb, 0x14, 0x6c, 0x82, 0xb2, 0x38, 0x38, 0x4e, 0xa8,
	0x97, 0x90, 0x30, 0xf4, 0x29, 0x65, 0xf2, 0x0d, 0x6d, 0xba, 0x5b, 0x71, 0x1a, 0xf5, 0x09, 0x75,
	0xb3, 0x28, 0xec, 0x80, 0x0d, 0x25, 0x7a, 0x90, 0x06, 0x63, 0xc4, 0xe5, 0x73, 0xd2, 0x5b, 0xef,
	0x84, 0xb4, 0x3f, 0x66, 0xe6, 0x67, 0x4a, 0x08, 0x0b, 0x2e, 0x2d, 0x4c, 0xec, 0xc8, 0xe7, 0x17,
	0x96, 0x13, 0xf3, 0xdf, 0x7e, 0x79, 0x0f, 0x32, 0x57, 0x9c, 0x98, 0xbb, 0xca, 0xb5, 0x96, 0xc4,
	0xc3, 0x33, 0x50, 0x59, 0xe5, 0xf3, 0x42, 0x34, 0xe2, 0xc6, 0xda, 0xff, 0x27, 0xfd, 0x74, 0x85,
	0xf4, 0x08, 0x8d, 0x38, 0xfc, 0x1c, 0xe8, 0x42, 0x92, 0xd0, 0xcc, 0xe4, 0xeb, 0x29, 0xb8, 0xeb,
	0x71, 0x1a, 0x09, 0xd1, 0x0c, 0x3a, 0x40, 0x9a, 0xe1, 0xc9, 0x13, 0x97, 0xb7, 0x7e, 0xeb, 0x3f,
	0x8c, 0x04, 0x81, 0x95, 0x63, 0xc1, 0xd5, 0xe9, 0x7c, 0xf9, 0xf6, 0x07, 0xa0, 0x2f, 0xe2, 0xb0,
	0x0a, 0x76, 0x7a, 0xa7, 0xc7, 0x3d, 0xef, 0xc0, 0x39, 0xe9, 0xbb, 0xde, 0x69, 0xe7, 0xa4, 0xd7,
	0xde, 0x77, 0x0e, 0x9d, 0xf6, 0x41, 0x39, 0x07, 0x77, 0x00, 0xfc, 0x5b, 0xce, 0x39, 0xec, 0xba,
	0xc7, 0x65, 0xed, 0x09, 0xa6, 0x7d, 0xde, 0xeb, 0x76, 0xda, 0x9d, 0xbe, 0xf3, 0xdd, 0x51, 0x39,
	0xdf, 0xea, 0xde, 0xdc, 0xd7, 0xb4, 0xdb, 0xfb, 0x9a, 0xf6, 0xe7, 0x7d, 0x4d, 0xbb, 0x7e, 0xa8,
	0xe5, 0x6e, 0x1f, 0x6a, 0xb9, 0xdf, 0x1f, 0x6a, 0xb9, 0xef, 0xbf, 0x59, 0xb9, 0x44, 0xff, 0x32,
	0x2f, 0x27, 0x7b, 0xf6, 0xd5, 0x72, 0x68, 0xca, 0x7b, 0x35, 0x28, 0xca, 0xc1, 0xb1, 0xf7, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x40, 0x2a, 0xca, 0x45, 0x06, 0x00, 0x00,
}

func (m *Stream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PumpParams != nil {
		{
			size, err := m.PumpParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.EpochCoins) > 0 {
		for iNdEx := len(m.EpochCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Sponsored {
		i--
		if m.Sponsored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.DistributedCoins) > 0 {
		for iNdEx := len(m.DistributedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.FilledEpochs != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.FilledEpochs))
		i--
		dAtA[i] = 0x38
	}
	if m.NumEpochsPaidOver != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.NumEpochsPaidOver))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DistrEpochIdentifier) > 0 {
		i -= len(m.DistrEpochIdentifier)
		copy(dAtA[i:], m.DistrEpochIdentifier)
		i = encodeVarintStream(dAtA, i, uint64(len(m.DistrEpochIdentifier)))
		i--
		dAtA[i] = 0x2a
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintStream(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.DistributeTo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PumpParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PumpParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PumpParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PumpDistr != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.PumpDistr))
		i--
		dAtA[i] = 0x28
	}
	if m.NumPumps != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.NumPumps))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.EpochBudgetLeft.Size()
		i -= size
		if _, err := m.EpochBudgetLeft.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.EpochBudget.Size()
		i -= size
		if _, err := m.EpochBudget.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.NumTopRollapps != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.NumTopRollapps))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStream(dAtA []byte, offset int, v uint64) int {
	offset -= sovStream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Stream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStream(uint64(m.Id))
	}
	l = m.DistributeTo.Size()
	n += 1 + l + sovStream(uint64(l))
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovStream(uint64(l))
	l = len(m.DistrEpochIdentifier)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.NumEpochsPaidOver != 0 {
		n += 1 + sovStream(uint64(m.NumEpochsPaidOver))
	}
	if m.FilledEpochs != 0 {
		n += 1 + sovStream(uint64(m.FilledEpochs))
	}
	if len(m.DistributedCoins) > 0 {
		for _, e := range m.DistributedCoins {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if m.Sponsored {
		n += 2
	}
	if len(m.EpochCoins) > 0 {
		for _, e := range m.EpochCoins {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if m.PumpParams != nil {
		l = m.PumpParams.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *PumpParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumTopRollapps != 0 {
		n += 1 + sovStream(uint64(m.NumTopRollapps))
	}
	l = m.EpochBudget.Size()
	n += 1 + l + sovStream(uint64(l))
	l = m.EpochBudgetLeft.Size()
	n += 1 + l + sovStream(uint64(l))
	if m.NumPumps != 0 {
		n += 1 + sovStream(uint64(m.NumPumps))
	}
	if m.PumpDistr != 0 {
		n += 1 + sovStream(uint64(m.PumpDistr))
	}
	return n
}

func sovStream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStream(x uint64) (n int) {
	return sovStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeTo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DistributeTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrEpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistrEpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochsPaidOver", wireType)
			}
			m.NumEpochsPaidOver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochsPaidOver |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledEpochs", wireType)
			}
			m.FilledEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilledEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributedCoins = append(m.DistributedCoins, types.Coin{})
			if err := m.DistributedCoins[len(m.DistributedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sponsored = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochCoins = append(m.EpochCoins, types.Coin{})
			if err := m.EpochCoins[len(m.EpochCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PumpParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PumpParams == nil {
				m.PumpParams = &PumpParams{}
			}
			if err := m.PumpParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PumpParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PumpParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PumpParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTopRollapps", wireType)
			}
			m.NumTopRollapps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTopRollapps |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochBudget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochBudget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochBudgetLeft", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochBudgetLeft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPumps", wireType)
			}
			m.NumPumps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPumps |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PumpDistr", wireType)
			}
			m.PumpDistr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PumpDistr |= PumpDistr(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStream = fmt.Errorf("proto: unexpected end of group")
)
