// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/streamer/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams allows to update module params.
type MsgUpdateParams struct {
	// Authority is the address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NewParams should be fully populated.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_80b85f33e268f815, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80b85f33e268f815, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgCreateStream creates a new stream
type MsgCreateStream struct {
	// Authority is the address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// DistributeToRecords defines the distribution records
	DistributeToRecords []DistrRecord `protobuf:"bytes,2,rep,name=distribute_to_records,json=distributeToRecords,proto3" json:"distribute_to_records"`
	// Coins are coin(s) to be distributed by the stream
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
	// StartTime is the distribution start time
	StartTime time.Time `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"timestamp"`
	// DistrEpochIdentifier is the epoch identifier for distribution
	DistrEpochIdentifier string `protobuf:"bytes,5,opt,name=distr_epoch_identifier,json=distrEpochIdentifier,proto3" json:"distr_epoch_identifier,omitempty" yaml:"distr_epoch_identifier"`
	// NumEpochsPaidOver is the number of epochs distribution will be completed
	// over
	NumEpochsPaidOver uint64 `protobuf:"varint,6,opt,name=num_epochs_paid_over,json=numEpochsPaidOver,proto3" json:"num_epochs_paid_over,omitempty"`
	// Sponsored indicates if the stream is based on the sponsorship distribution
	Sponsored bool `protobuf:"varint,7,opt,name=sponsored,proto3" json:"sponsored,omitempty"`
	// ClearAllVotes indicates if the stream should clear all votes (only for sponsored streams)
	ClearAllVotes bool `protobuf:"varint,8,opt,name=clear_all_votes,json=clearAllVotes,proto3" json:"clear_all_votes,omitempty"`
	// PumpParams is an *optional* field indicating if the stream
	// is pumping or distributing. If non-null, it contains pumping params.
	// For now, every pump stream should be sponsored.
	PumpParams *MsgCreateStream_PumpParams `protobuf:"bytes,9,opt,name=pump_params,json=pumpParams,proto3" json:"pump_params,omitempty"`
}

func (m *MsgCreateStream) Reset()         { *m = MsgCreateStream{} }
func (m *MsgCreateStream) String() string { return proto.CompactTextString(m) }
func (*MsgCreateStream) ProtoMessage()    {}
func (*MsgCreateStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_80b85f33e268f815, []int{2}
}
func (m *MsgCreateStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateStream.Merge(m, src)
}
func (m *MsgCreateStream) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateStream.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateStream proto.InternalMessageInfo

func (m *MsgCreateStream) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCreateStream) GetDistributeToRecords() []DistrRecord {
	if m != nil {
		return m.DistributeToRecords
	}
	return nil
}

func (m *MsgCreateStream) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *MsgCreateStream) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *MsgCreateStream) GetDistrEpochIdentifier() string {
	if m != nil {
		return m.DistrEpochIdentifier
	}
	return ""
}

func (m *MsgCreateStream) GetNumEpochsPaidOver() uint64 {
	if m != nil {
		return m.NumEpochsPaidOver
	}
	return 0
}

func (m *MsgCreateStream) GetSponsored() bool {
	if m != nil {
		return m.Sponsored
	}
	return false
}

func (m *MsgCreateStream) GetClearAllVotes() bool {
	if m != nil {
		return m.ClearAllVotes
	}
	return false
}

func (m *MsgCreateStream) GetPumpParams() *MsgCreateStream_PumpParams {
	if m != nil {
		return m.PumpParams
	}
	return nil
}

type MsgCreateStream_PumpParams struct {
	// NumTopRollapps is a number of rollapps, top N by the voting power,
	// that will be pumped on every pump iteration.
	NumTopRollapps uint32 `protobuf:"varint,1,opt,name=num_top_rollapps,json=numTopRollapps,proto3" json:"num_top_rollapps,omitempty"`
	// NumPumps is a target number of pumps that expected to happen
	// in the epoch (probabilistically)
	NumPumps uint64 `protobuf:"varint,2,opt,name=num_pumps,json=numPumps,proto3" json:"num_pumps,omitempty"`
	// PumpDistr is a distribution used to determine pump amount
	PumpDistr PumpDistr `protobuf:"varint,5,opt,name=pump_distr,json=pumpDistr,proto3,enum=dymensionxyz.dymension.streamer.PumpDistr" json:"pump_distr,omitempty"`
}

func (m *MsgCreateStream_PumpParams) Reset()         { *m = MsgCreateStream_PumpParams{} }
func (m *MsgCreateStream_PumpParams) String() string { return proto.CompactTextString(m) }
func (*MsgCreateStream_PumpParams) ProtoMessage()    {}
func (*MsgCreateStream_PumpParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_80b85f33e268f815, []int{2, 0}
}
func (m *MsgCreateStream_PumpParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateStream_PumpParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateStream_PumpParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateStream_PumpParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateStream_PumpParams.Merge(m, src)
}
func (m *MsgCreateStream_PumpParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateStream_PumpParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateStream_PumpParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateStream_PumpParams proto.InternalMessageInfo

func (m *MsgCreateStream_PumpParams) GetNumTopRollapps() uint32 {
	if m != nil {
		return m.NumTopRollapps
	}
	return 0
}

func (m *MsgCreateStream_PumpParams) GetNumPumps() uint64 {
	if m != nil {
		return m.NumPumps
	}
	return 0
}

func (m *MsgCreateStream_PumpParams) GetPumpDistr() PumpDistr {
	if m != nil {
		return m.PumpDistr
	}
	return PumpDistr_PUMP_DISTR_UNSPECIFIED
}

type MsgCreateStreamResponse struct {
	StreamId uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (m *MsgCreateStreamResponse) Reset()         { *m = MsgCreateStreamResponse{} }
func (m *MsgCreateStreamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateStreamResponse) ProtoMessage()    {}
func (*MsgCreateStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80b85f33e268f815, []int{3}
}
func (m *MsgCreateStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateStreamResponse.Merge(m, src)
}
func (m *MsgCreateStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateStreamResponse proto.InternalMessageInfo

func (m *MsgCreateStreamResponse) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

// MsgTerminateStream terminates an existing stream
type MsgTerminateStream struct {
	// Authority is the address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// StreamId is the ID of the stream to terminate
	StreamId uint64 `protobuf:"varint,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (m *MsgTerminateStream) Reset()         { *m = MsgTerminateStream{} }
func (m *MsgTerminateStream) String() string { return proto.CompactTextString(m) }
func (*MsgTerminateStream) ProtoMessage()    {}
func (*MsgTerminateStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_80b85f33e268f815, []int{4}
}
func (m *MsgTerminateStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTerminateStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTerminateStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTerminateStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTerminateStream.Merge(m, src)
}
func (m *MsgTerminateStream) XXX_Size() int {
	return m.Size()
}
func (m *MsgTerminateStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTerminateStream.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTerminateStream proto.InternalMessageInfo

func (m *MsgTerminateStream) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgTerminateStream) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

type MsgTerminateStreamResponse struct {
}

func (m *MsgTerminateStreamResponse) Reset()         { *m = MsgTerminateStreamResponse{} }
func (m *MsgTerminateStreamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTerminateStreamResponse) ProtoMessage()    {}
func (*MsgTerminateStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80b85f33e268f815, []int{5}
}
func (m *MsgTerminateStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTerminateStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTerminateStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTerminateStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTerminateStreamResponse.Merge(m, src)
}
func (m *MsgTerminateStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTerminateStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTerminateStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTerminateStreamResponse proto.InternalMessageInfo

// MsgReplaceStream replaces an existing stream's distribution records
// If a MsgReplaceStream passes, the proposal’s records
// override the existing DistrRecords set in the module. Each record has a
// specified gauge id and weight, and the incentives are distributed to each
// gauge according to weight/total_weight.
type MsgReplaceStream struct {
	// Authority is the address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// StreamId is the ID of the stream to replace
	StreamId uint64 `protobuf:"varint,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Records are the new distribution records
	Records []DistrRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records"`
}

func (m *MsgReplaceStream) Reset()         { *m = MsgReplaceStream{} }
func (m *MsgReplaceStream) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceStream) ProtoMessage()    {}
func (*MsgReplaceStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_80b85f33e268f815, []int{6}
}
func (m *MsgReplaceStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceStream.Merge(m, src)
}
func (m *MsgReplaceStream) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceStream.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceStream proto.InternalMessageInfo

func (m *MsgReplaceStream) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgReplaceStream) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *MsgReplaceStream) GetRecords() []DistrRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type MsgReplaceStreamResponse struct {
}

func (m *MsgReplaceStreamResponse) Reset()         { *m = MsgReplaceStreamResponse{} }
func (m *MsgReplaceStreamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceStreamResponse) ProtoMessage()    {}
func (*MsgReplaceStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80b85f33e268f815, []int{7}
}
func (m *MsgReplaceStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceStreamResponse.Merge(m, src)
}
func (m *MsgReplaceStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceStreamResponse proto.InternalMessageInfo

// For example: if the existing DistrRecords were:
// [(Gauge 0, 5), (Gauge 1, 6), (Gauge 2, 6)]
// An UpdatePoolIncentivesProposal includes
// [(Gauge 1, 0), (Gauge 2, 4), (Gauge 3, 10)]
// This would delete Gauge 1, Edit Gauge 2, and Add Gauge 3
// The result DistrRecords in state would be:
// [(Gauge 0, 5), (Gauge 2, 4), (Gauge 3, 10)]
type MsgUpdateStream struct {
	// Authority is the address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// StreamId is the ID of the stream to update
	StreamId uint64 `protobuf:"varint,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Records are the new distribution records
	Records []DistrRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records"`
}

func (m *MsgUpdateStream) Reset()         { *m = MsgUpdateStream{} }
func (m *MsgUpdateStream) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStream) ProtoMessage()    {}
func (*MsgUpdateStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_80b85f33e268f815, []int{8}
}
func (m *MsgUpdateStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStream.Merge(m, src)
}
func (m *MsgUpdateStream) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStream.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStream proto.InternalMessageInfo

func (m *MsgUpdateStream) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateStream) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *MsgUpdateStream) GetRecords() []DistrRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type MsgUpdateStreamResponse struct {
}

func (m *MsgUpdateStreamResponse) Reset()         { *m = MsgUpdateStreamResponse{} }
func (m *MsgUpdateStreamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStreamResponse) ProtoMessage()    {}
func (*MsgUpdateStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80b85f33e268f815, []int{9}
}
func (m *MsgUpdateStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStreamResponse.Merge(m, src)
}
func (m *MsgUpdateStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStreamResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "dymensionxyz.dymension.streamer.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "dymensionxyz.dymension.streamer.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateStream)(nil), "dymensionxyz.dymension.streamer.MsgCreateStream")
	proto.RegisterType((*MsgCreateStream_PumpParams)(nil), "dymensionxyz.dymension.streamer.MsgCreateStream.PumpParams")
	proto.RegisterType((*MsgCreateStreamResponse)(nil), "dymensionxyz.dymension.streamer.MsgCreateStreamResponse")
	proto.RegisterType((*MsgTerminateStream)(nil), "dymensionxyz.dymension.streamer.MsgTerminateStream")
	proto.RegisterType((*MsgTerminateStreamResponse)(nil), "dymensionxyz.dymension.streamer.MsgTerminateStreamResponse")
	proto.RegisterType((*MsgReplaceStream)(nil), "dymensionxyz.dymension.streamer.MsgReplaceStream")
	proto.RegisterType((*MsgReplaceStreamResponse)(nil), "dymensionxyz.dymension.streamer.MsgReplaceStreamResponse")
	proto.RegisterType((*MsgUpdateStream)(nil), "dymensionxyz.dymension.streamer.MsgUpdateStream")
	proto.RegisterType((*MsgUpdateStreamResponse)(nil), "dymensionxyz.dymension.streamer.MsgUpdateStreamResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/streamer/tx.proto", fileDescriptor_80b85f33e268f815)
}

var fileDescriptor_80b85f33e268f815 = []byte{
	// 946 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x36, 0x4e, 0x1a, 0x4f, 0x9a, 0x0f, 0x96, 0x40, 0x37, 0x4b, 0xb0, 0x83, 0x0f, 0x60,
	0x45, 0xed, 0x6e, 0x3e, 0x44, 0x05, 0xed, 0xa9, 0x2e, 0x3d, 0x44, 0x22, 0x6a, 0xb4, 0x0d, 0x54,
	0x42, 0x48, 0xab, 0xb1, 0x77, 0xb2, 0x59, 0xb1, 0xb3, 0x33, 0x9a, 0x99, 0xb5, 0xe2, 0x48, 0x48,
	0x08, 0xc4, 0xbd, 0x7f, 0x01, 0xe2, 0xcc, 0xa9, 0x07, 0xfe, 0x04, 0x90, 0x7a, 0xe0, 0x50, 0x71,
	0xe2, 0x94, 0xa2, 0xe4, 0xd0, 0x7b, 0xff, 0x02, 0x34, 0x1f, 0x5e, 0x7f, 0x24, 0xc8, 0x76, 0x10,
	0x87, 0x9e, 0x3c, 0xfb, 0xe6, 0xbd, 0xdf, 0xfb, 0xbd, 0x79, 0xbf, 0x37, 0x63, 0x50, 0x8f, 0x3a,
	0x18, 0x65, 0x3c, 0x21, 0xd9, 0x71, 0xe7, 0xc4, 0x2f, 0x3e, 0x7c, 0x2e, 0x18, 0x82, 0x18, 0x31,
	0x5f, 0x1c, 0x7b, 0x94, 0x11, 0x41, 0xec, 0x6a, 0xbf, 0xa7, 0x57, 0x7c, 0x78, 0x5d, 0x4f, 0xf7,
	0x66, 0x8b, 0x70, 0x4c, 0xb8, 0x8f, 0x79, 0xec, 0xb7, 0xb7, 0xe4, 0x8f, 0x8e, 0x74, 0x6f, 0x8d,
	0xca, 0x41, 0x21, 0x83, 0x98, 0x8f, 0xeb, 0xad, 0x17, 0xc6, 0x7b, 0x25, 0x26, 0x31, 0x51, 0x4b,
	0x5f, 0xae, 0x8c, 0x75, 0x55, 0x53, 0x09, 0xf5, 0x86, 0xfe, 0x30, 0x5b, 0x15, 0xc3, 0xb2, 0x09,
	0x39, 0xf2, 0xdb, 0x5b, 0x4d, 0x24, 0xe0, 0x96, 0xdf, 0x22, 0x49, 0x66, 0xf6, 0xab, 0x31, 0x21,
	0x71, 0x8a, 0x7c, 0xf5, 0xd5, 0xcc, 0x0f, 0x7d, 0x91, 0x60, 0xc4, 0x05, 0xc4, 0xd4, 0x38, 0x6c,
	0x8e, 0xe2, 0x17, 0x25, 0x5c, 0xb0, 0x30, 0xc9, 0x0e, 0x0d, 0x9b, 0xda, 0xcf, 0x16, 0x58, 0xda,
	0xe3, 0xf1, 0x17, 0x34, 0x82, 0x02, 0xed, 0xab, 0x5a, 0xed, 0x3b, 0xa0, 0x0c, 0x73, 0x71, 0x44,
	0x58, 0x22, 0x3a, 0x8e, 0xb5, 0x6e, 0xd5, 0xcb, 0x0d, 0xe7, 0xcf, 0x5f, 0x6f, 0xaf, 0x18, 0xae,
	0xf7, 0xa3, 0x88, 0x21, 0xce, 0x1f, 0x0b, 0x96, 0x64, 0x71, 0xd0, 0x73, 0xb5, 0x1f, 0x82, 0x59,
	0x7d, 0x5a, 0xce, 0xb5, 0x75, 0xab, 0x3e, 0xbf, 0xfd, 0x91, 0x37, 0xa2, 0x2d, 0x9e, 0x4e, 0xd8,
	0x28, 0x3d, 0x3f, 0xad, 0x4e, 0x05, 0x26, 0xf8, 0xee, 0xe2, 0xf7, 0xaf, 0x9e, 0x6d, 0xf4, 0x60,
	0x6b, 0xab, 0xe0, 0xe6, 0x10, 0xc3, 0x00, 0x71, 0x4a, 0x32, 0x8e, 0x6a, 0x7f, 0xcc, 0x2a, 0xf6,
	0x0f, 0x18, 0x82, 0x02, 0x3d, 0x56, 0xa8, 0x57, 0x66, 0x7f, 0x08, 0xde, 0x51, 0xa7, 0x93, 0x34,
	0x73, 0x81, 0x42, 0x41, 0x42, 0x86, 0x5a, 0x84, 0x45, 0xb2, 0x98, 0xe9, 0xfa, 0xfc, 0xf6, 0xad,
	0x91, 0xc5, 0x7c, 0x26, 0xa3, 0x03, 0x15, 0x64, 0x2a, 0x7a, 0xbb, 0x07, 0x78, 0x40, 0xf4, 0x0e,
	0xb7, 0x21, 0x98, 0x91, 0x2d, 0xe5, 0xce, 0xb4, 0xc2, 0x5d, 0xf5, 0x0c, 0x31, 0xd9, 0x74, 0xcf,
	0x34, 0xdd, 0x7b, 0x40, 0x92, 0xac, 0xb1, 0x29, 0x41, 0x7e, 0x79, 0x59, 0xad, 0xc7, 0x89, 0x38,
	0xca, 0x9b, 0x5e, 0x8b, 0x60, 0xa3, 0x17, 0xf3, 0x73, 0x9b, 0x47, 0xdf, 0xf8, 0xa2, 0x43, 0x11,
	0x57, 0x01, 0x3c, 0xd0, 0xc8, 0xf6, 0x13, 0x00, 0xb8, 0x80, 0x4c, 0x84, 0x52, 0x1f, 0x4e, 0x49,
	0x35, 0xc3, 0xf5, 0xb4, 0x78, 0xbc, 0xae, 0x78, 0xbc, 0x83, 0xae, 0x78, 0x1a, 0x6b, 0x32, 0xd1,
	0xeb, 0xd3, 0xea, 0x72, 0x07, 0xe2, 0xf4, 0x6e, 0xad, 0x50, 0x55, 0xed, 0xe9, 0xcb, 0xaa, 0x15,
	0x94, 0x15, 0x96, 0xf4, 0xb6, 0x9f, 0x80, 0x77, 0xb5, 0x82, 0x10, 0x25, 0xad, 0xa3, 0x30, 0x89,
	0x50, 0x26, 0x92, 0xc3, 0x04, 0x31, 0x67, 0x46, 0x1d, 0xf4, 0x07, 0xaf, 0x4f, 0xab, 0xef, 0x6b,
	0x90, 0xcb, 0xfd, 0x6a, 0xc1, 0x8a, 0xda, 0x78, 0x28, 0xed, 0xbb, 0x85, 0xd9, 0xf6, 0xc1, 0x4a,
	0x96, 0x63, 0xed, 0xce, 0x43, 0x0a, 0x93, 0x28, 0x24, 0x6d, 0xc4, 0x9c, 0xd9, 0x75, 0xab, 0x5e,
	0x0a, 0xde, 0xca, 0x72, 0xac, 0x22, 0xf8, 0x3e, 0x4c, 0xa2, 0x47, 0x6d, 0xc4, 0xec, 0x35, 0x50,
	0x56, 0x1a, 0x20, 0x0c, 0x45, 0xce, 0xf5, 0x75, 0xab, 0x3e, 0x17, 0xf4, 0x0c, 0xf6, 0x87, 0x60,
	0xa9, 0x95, 0x22, 0xc8, 0x42, 0x98, 0xa6, 0x61, 0x9b, 0x08, 0xc4, 0x9d, 0x39, 0xe5, 0xb3, 0xa0,
	0xcc, 0xf7, 0xd3, 0xf4, 0x4b, 0x69, 0xb4, 0xbf, 0x06, 0xf3, 0x34, 0xc7, 0x34, 0x34, 0xb2, 0x2d,
	0xab, 0x93, 0xba, 0x37, 0xb2, 0xd3, 0x43, 0x92, 0xf3, 0xf6, 0x73, 0x4c, 0x8d, 0x32, 0x01, 0x2d,
	0xd6, 0xee, 0x4f, 0x16, 0x00, 0xbd, 0x2d, 0xbb, 0x0e, 0x96, 0x65, 0x8d, 0x82, 0xd0, 0x90, 0x91,
	0x34, 0x85, 0x94, 0x72, 0xa5, 0xcf, 0x85, 0x60, 0x31, 0xcb, 0xf1, 0x01, 0xa1, 0x81, 0xb1, 0xda,
	0xef, 0x81, 0xb2, 0xf4, 0x94, 0x50, 0x7a, 0x96, 0x4a, 0xc1, 0x5c, 0x96, 0x63, 0x89, 0xc5, 0xed,
	0x5d, 0xa0, 0x72, 0x84, 0xea, 0x1c, 0xd5, 0xb9, 0x2f, 0x6e, 0x6f, 0x8c, 0x9e, 0xb4, 0x1c, 0x53,
	0x2d, 0xd0, 0x32, 0xed, 0x2e, 0x2f, 0x4c, 0xda, 0x1d, 0x35, 0x69, 0xfd, 0xa5, 0x75, 0x27, 0x4d,
	0x52, 0xd2, 0x58, 0x61, 0x12, 0x29, 0xd6, 0xa5, 0x60, 0x4e, 0x1b, 0x76, 0xa3, 0x5a, 0x07, 0xd8,
	0x7b, 0x3c, 0x3e, 0x40, 0x0c, 0x27, 0xd9, 0x7f, 0x1f, 0xc4, 0x81, 0x54, 0xd7, 0x06, 0x53, 0x5d,
	0xa0, 0xbc, 0x06, 0xdc, 0x8b, 0xa9, 0x8b, 0xfb, 0xe1, 0x77, 0x0b, 0x2c, 0xef, 0xf1, 0x38, 0x40,
	0x34, 0x85, 0xad, 0xff, 0x93, 0x97, 0xfd, 0x39, 0xb8, 0xde, 0xbd, 0x2f, 0xa6, 0xaf, 0x7c, 0x5f,
	0x74, 0x21, 0x2e, 0x54, 0xe9, 0x02, 0x67, 0xb8, 0x8c, 0xa2, 0xc6, 0xdf, 0xfa, 0x6f, 0xf0, 0x37,
	0xb7, 0xc4, 0xfe, 0x5b, 0x7e, 0xb0, 0xc2, 0xed, 0x1f, 0x67, 0xc0, 0xf4, 0x1e, 0x8f, 0xed, 0x13,
	0x70, 0x63, 0xe0, 0x9d, 0xda, 0x1c, 0x67, 0x50, 0xfb, 0x23, 0xdc, 0x4f, 0x26, 0x8d, 0x28, 0xf4,
	0x7f, 0x02, 0x6e, 0x0c, 0xbc, 0x32, 0x9b, 0x93, 0x5e, 0x12, 0xe3, 0xe5, 0xbe, 0x74, 0xf6, 0x7e,
	0xb0, 0xc0, 0xd2, 0xf0, 0x70, 0xed, 0x8c, 0x83, 0x36, 0x14, 0xe4, 0xde, 0xbb, 0x42, 0x50, 0xc1,
	0xe2, 0x5b, 0xb0, 0x30, 0x38, 0x47, 0x5b, 0xe3, 0xa0, 0x0d, 0x84, 0xb8, 0x9f, 0x4e, 0x1c, 0xd2,
	0xdf, 0x80, 0x01, 0x89, 0x4f, 0xd0, 0xfc, 0x49, 0x1a, 0x70, 0x99, 0x00, 0xdd, 0x99, 0xef, 0x5e,
	0x3d, 0xdb, 0xb0, 0x1a, 0x8f, 0x9e, 0x9f, 0x55, 0xac, 0x17, 0x67, 0x15, 0xeb, 0xef, 0xb3, 0x8a,
	0xf5, 0xf4, 0xbc, 0x32, 0xf5, 0xe2, 0xbc, 0x32, 0xf5, 0xd7, 0x79, 0x65, 0xea, 0xab, 0x8f, 0xfb,
	0x5e, 0xe8, 0x7f, 0xf9, 0x0b, 0xd6, 0xde, 0xf1, 0x8f, 0xfb, 0xfe, 0xb9, 0xca, 0x47, 0xbb, 0x39,
	0xab, 0xde, 0xe2, 0x9d, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x0d, 0xe0, 0xe6, 0xe9, 0x0a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams is used for updating module params.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// CreateStream creates a new stream
	CreateStream(ctx context.Context, in *MsgCreateStream, opts ...grpc.CallOption) (*MsgCreateStreamResponse, error)
	// TerminateStream terminates an existing stream
	TerminateStream(ctx context.Context, in *MsgTerminateStream, opts ...grpc.CallOption) (*MsgTerminateStreamResponse, error)
	// ReplaceStream replaces an existing stream's distribution records
	ReplaceStream(ctx context.Context, in *MsgReplaceStream, opts ...grpc.CallOption) (*MsgReplaceStreamResponse, error)
	// UpdateStream updates an existing stream's distribution records
	UpdateStream(ctx context.Context, in *MsgUpdateStream, opts ...grpc.CallOption) (*MsgUpdateStreamResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.streamer.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateStream(ctx context.Context, in *MsgCreateStream, opts ...grpc.CallOption) (*MsgCreateStreamResponse, error) {
	out := new(MsgCreateStreamResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.streamer.Msg/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TerminateStream(ctx context.Context, in *MsgTerminateStream, opts ...grpc.CallOption) (*MsgTerminateStreamResponse, error) {
	out := new(MsgTerminateStreamResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.streamer.Msg/TerminateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplaceStream(ctx context.Context, in *MsgReplaceStream, opts ...grpc.CallOption) (*MsgReplaceStreamResponse, error) {
	out := new(MsgReplaceStreamResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.streamer.Msg/ReplaceStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateStream(ctx context.Context, in *MsgUpdateStream, opts ...grpc.CallOption) (*MsgUpdateStreamResponse, error) {
	out := new(MsgUpdateStreamResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.streamer.Msg/UpdateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams is used for updating module params.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// CreateStream creates a new stream
	CreateStream(context.Context, *MsgCreateStream) (*MsgCreateStreamResponse, error)
	// TerminateStream terminates an existing stream
	TerminateStream(context.Context, *MsgTerminateStream) (*MsgTerminateStreamResponse, error)
	// ReplaceStream replaces an existing stream's distribution records
	ReplaceStream(context.Context, *MsgReplaceStream) (*MsgReplaceStreamResponse, error)
	// UpdateStream updates an existing stream's distribution records
	UpdateStream(context.Context, *MsgUpdateStream) (*MsgUpdateStreamResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateStream(ctx context.Context, req *MsgCreateStream) (*MsgCreateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (*UnimplementedMsgServer) TerminateStream(ctx context.Context, req *MsgTerminateStream) (*MsgTerminateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateStream not implemented")
}
func (*UnimplementedMsgServer) ReplaceStream(ctx context.Context, req *MsgReplaceStream) (*MsgReplaceStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceStream not implemented")
}
func (*UnimplementedMsgServer) UpdateStream(ctx context.Context, req *MsgUpdateStream) (*MsgUpdateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStream not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.streamer.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.streamer.Msg/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateStream(ctx, req.(*MsgCreateStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TerminateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTerminateStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TerminateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.streamer.Msg/TerminateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TerminateStream(ctx, req.(*MsgTerminateStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplaceStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplaceStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplaceStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.streamer.Msg/ReplaceStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplaceStream(ctx, req.(*MsgReplaceStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.streamer.Msg/UpdateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateStream(ctx, req.(*MsgUpdateStream))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.streamer.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _Msg_CreateStream_Handler,
		},
		{
			MethodName: "TerminateStream",
			Handler:    _Msg_TerminateStream_Handler,
		},
		{
			MethodName: "ReplaceStream",
			Handler:    _Msg_ReplaceStream_Handler,
		},
		{
			MethodName: "UpdateStream",
			Handler:    _Msg_UpdateStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/streamer/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PumpParams != nil {
		{
			size, err := m.PumpParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ClearAllVotes {
		i--
		if m.ClearAllVotes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Sponsored {
		i--
		if m.Sponsored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.NumEpochsPaidOver != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumEpochsPaidOver))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DistrEpochIdentifier) > 0 {
		i -= len(m.DistrEpochIdentifier)
		copy(dAtA[i:], m.DistrEpochIdentifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DistrEpochIdentifier)))
		i--
		dAtA[i] = 0x2a
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTx(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DistributeToRecords) > 0 {
		for iNdEx := len(m.DistributeToRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributeToRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateStream_PumpParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateStream_PumpParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateStream_PumpParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PumpDistr != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PumpDistr))
		i--
		dAtA[i] = 0x28
	}
	if m.NumPumps != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumPumps))
		i--
		dAtA[i] = 0x10
	}
	if m.NumTopRollapps != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumTopRollapps))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StreamId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTerminateStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTerminateStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTerminateStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StreamId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTerminateStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTerminateStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTerminateStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReplaceStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StreamId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReplaceStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StreamId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DistributeToRecords) > 0 {
		for _, e := range m.DistributeToRecords {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovTx(uint64(l))
	l = len(m.DistrEpochIdentifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NumEpochsPaidOver != 0 {
		n += 1 + sovTx(uint64(m.NumEpochsPaidOver))
	}
	if m.Sponsored {
		n += 2
	}
	if m.ClearAllVotes {
		n += 2
	}
	if m.PumpParams != nil {
		l = m.PumpParams.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateStream_PumpParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumTopRollapps != 0 {
		n += 1 + sovTx(uint64(m.NumTopRollapps))
	}
	if m.NumPumps != 0 {
		n += 1 + sovTx(uint64(m.NumPumps))
	}
	if m.PumpDistr != 0 {
		n += 1 + sovTx(uint64(m.PumpDistr))
	}
	return n
}

func (m *MsgCreateStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovTx(uint64(m.StreamId))
	}
	return n
}

func (m *MsgTerminateStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StreamId != 0 {
		n += 1 + sovTx(uint64(m.StreamId))
	}
	return n
}

func (m *MsgTerminateStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReplaceStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StreamId != 0 {
		n += 1 + sovTx(uint64(m.StreamId))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgReplaceStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StreamId != 0 {
		n += 1 + sovTx(uint64(m.StreamId))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeToRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributeToRecords = append(m.DistributeToRecords, DistrRecord{})
			if err := m.DistributeToRecords[len(m.DistributeToRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrEpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistrEpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochsPaidOver", wireType)
			}
			m.NumEpochsPaidOver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochsPaidOver |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sponsored = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearAllVotes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearAllVotes = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PumpParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PumpParams == nil {
				m.PumpParams = &MsgCreateStream_PumpParams{}
			}
			if err := m.PumpParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateStream_PumpParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PumpParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PumpParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTopRollapps", wireType)
			}
			m.NumTopRollapps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTopRollapps |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPumps", wireType)
			}
			m.NumPumps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPumps |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PumpDistr", wireType)
			}
			m.PumpDistr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PumpDistr |= PumpDistr(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTerminateStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTerminateStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTerminateStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTerminateStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTerminateStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTerminateStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, DistrRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, DistrRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
