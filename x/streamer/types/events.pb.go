// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/streamer/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventEndBlock struct {
	Iterations    uint64 `protobuf:"varint,1,opt,name=iterations,proto3" json:"iterations,omitempty"`
	MaxIterations uint64 `protobuf:"varint,2,opt,name=max_iterations,json=maxIterations,proto3" json:"max_iterations,omitempty"`
	// Distributed is the total amount of coins that have been distributed
	Distributed github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=distributed,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"distributed"`
}

func (m *EventEndBlock) Reset()         { *m = EventEndBlock{} }
func (m *EventEndBlock) String() string { return proto.CompactTextString(m) }
func (*EventEndBlock) ProtoMessage()    {}
func (*EventEndBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_4840a29c1bf68fa5, []int{0}
}
func (m *EventEndBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventEndBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventEndBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventEndBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventEndBlock.Merge(m, src)
}
func (m *EventEndBlock) XXX_Size() int {
	return m.Size()
}
func (m *EventEndBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_EventEndBlock.DiscardUnknown(m)
}

var xxx_messageInfo_EventEndBlock proto.InternalMessageInfo

func (m *EventEndBlock) GetIterations() uint64 {
	if m != nil {
		return m.Iterations
	}
	return 0
}

func (m *EventEndBlock) GetMaxIterations() uint64 {
	if m != nil {
		return m.MaxIterations
	}
	return 0
}

func (m *EventEndBlock) GetDistributed() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Distributed
	}
	return nil
}

type EventEpochEnd struct {
	Iterations uint64 `protobuf:"varint,1,opt,name=iterations,proto3" json:"iterations,omitempty"`
	// Distributed is the total amount of coins that have been distributed
	Distributed github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=distributed,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"distributed"`
}

func (m *EventEpochEnd) Reset()         { *m = EventEpochEnd{} }
func (m *EventEpochEnd) String() string { return proto.CompactTextString(m) }
func (*EventEpochEnd) ProtoMessage()    {}
func (*EventEpochEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_4840a29c1bf68fa5, []int{1}
}
func (m *EventEpochEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventEpochEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventEpochEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventEpochEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventEpochEnd.Merge(m, src)
}
func (m *EventEpochEnd) XXX_Size() int {
	return m.Size()
}
func (m *EventEpochEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_EventEpochEnd.DiscardUnknown(m)
}

var xxx_messageInfo_EventEpochEnd proto.InternalMessageInfo

func (m *EventEpochEnd) GetIterations() uint64 {
	if m != nil {
		return m.Iterations
	}
	return 0
}

func (m *EventEpochEnd) GetDistributed() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Distributed
	}
	return nil
}

type EventEpochStart struct {
	ActiveStreamsNum uint64 `protobuf:"varint,1,opt,name=active_streams_num,json=activeStreamsNum,proto3" json:"active_streams_num,omitempty"`
}

func (m *EventEpochStart) Reset()         { *m = EventEpochStart{} }
func (m *EventEpochStart) String() string { return proto.CompactTextString(m) }
func (*EventEpochStart) ProtoMessage()    {}
func (*EventEpochStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_4840a29c1bf68fa5, []int{2}
}
func (m *EventEpochStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventEpochStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventEpochStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventEpochStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventEpochStart.Merge(m, src)
}
func (m *EventEpochStart) XXX_Size() int {
	return m.Size()
}
func (m *EventEpochStart) XXX_DiscardUnknown() {
	xxx_messageInfo_EventEpochStart.DiscardUnknown(m)
}

var xxx_messageInfo_EventEpochStart proto.InternalMessageInfo

func (m *EventEpochStart) GetActiveStreamsNum() uint64 {
	if m != nil {
		return m.ActiveStreamsNum
	}
	return 0
}

type EventPumped struct {
	StreamId uint64                `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Rollapps []EventPumped_Rollapp `protobuf:"bytes,2,rep,name=rollapps,proto3" json:"rollapps"`
	Pool     *EventPumped_Pool     `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *EventPumped) Reset()         { *m = EventPumped{} }
func (m *EventPumped) String() string { return proto.CompactTextString(m) }
func (*EventPumped) ProtoMessage()    {}
func (*EventPumped) Descriptor() ([]byte, []int) {
	return fileDescriptor_4840a29c1bf68fa5, []int{3}
}
func (m *EventPumped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPumped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPumped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPumped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPumped.Merge(m, src)
}
func (m *EventPumped) XXX_Size() int {
	return m.Size()
}
func (m *EventPumped) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPumped.DiscardUnknown(m)
}

var xxx_messageInfo_EventPumped proto.InternalMessageInfo

func (m *EventPumped) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *EventPumped) GetRollapps() []EventPumped_Rollapp {
	if m != nil {
		return m.Rollapps
	}
	return nil
}

func (m *EventPumped) GetPool() *EventPumped_Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

type EventPumped_Rollapp struct {
	RollappId string     `protobuf:"bytes,1,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	PumpCoin  types.Coin `protobuf:"bytes,2,opt,name=pumpCoin,proto3" json:"pumpCoin"`
	TokenOut  types.Coin `protobuf:"bytes,3,opt,name=tokenOut,proto3" json:"tokenOut"`
}

func (m *EventPumped_Rollapp) Reset()         { *m = EventPumped_Rollapp{} }
func (m *EventPumped_Rollapp) String() string { return proto.CompactTextString(m) }
func (*EventPumped_Rollapp) ProtoMessage()    {}
func (*EventPumped_Rollapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4840a29c1bf68fa5, []int{3, 0}
}
func (m *EventPumped_Rollapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPumped_Rollapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPumped_Rollapp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPumped_Rollapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPumped_Rollapp.Merge(m, src)
}
func (m *EventPumped_Rollapp) XXX_Size() int {
	return m.Size()
}
func (m *EventPumped_Rollapp) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPumped_Rollapp.DiscardUnknown(m)
}

var xxx_messageInfo_EventPumped_Rollapp proto.InternalMessageInfo

func (m *EventPumped_Rollapp) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *EventPumped_Rollapp) GetPumpCoin() types.Coin {
	if m != nil {
		return m.PumpCoin
	}
	return types.Coin{}
}

func (m *EventPumped_Rollapp) GetTokenOut() types.Coin {
	if m != nil {
		return m.TokenOut
	}
	return types.Coin{}
}

type EventPumped_Pool struct {
	PoolId   uint64     `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	PumpCoin types.Coin `protobuf:"bytes,2,opt,name=pumpCoin,proto3" json:"pumpCoin"`
	TokenOut types.Coin `protobuf:"bytes,3,opt,name=tokenOut,proto3" json:"tokenOut"`
}

func (m *EventPumped_Pool) Reset()         { *m = EventPumped_Pool{} }
func (m *EventPumped_Pool) String() string { return proto.CompactTextString(m) }
func (*EventPumped_Pool) ProtoMessage()    {}
func (*EventPumped_Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4840a29c1bf68fa5, []int{3, 1}
}
func (m *EventPumped_Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPumped_Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPumped_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPumped_Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPumped_Pool.Merge(m, src)
}
func (m *EventPumped_Pool) XXX_Size() int {
	return m.Size()
}
func (m *EventPumped_Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPumped_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_EventPumped_Pool proto.InternalMessageInfo

func (m *EventPumped_Pool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventPumped_Pool) GetPumpCoin() types.Coin {
	if m != nil {
		return m.PumpCoin
	}
	return types.Coin{}
}

func (m *EventPumped_Pool) GetTokenOut() types.Coin {
	if m != nil {
		return m.TokenOut
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*EventEndBlock)(nil), "dymensionxyz.dymension.streamer.EventEndBlock")
	proto.RegisterType((*EventEpochEnd)(nil), "dymensionxyz.dymension.streamer.EventEpochEnd")
	proto.RegisterType((*EventEpochStart)(nil), "dymensionxyz.dymension.streamer.EventEpochStart")
	proto.RegisterType((*EventPumped)(nil), "dymensionxyz.dymension.streamer.EventPumped")
	proto.RegisterType((*EventPumped_Rollapp)(nil), "dymensionxyz.dymension.streamer.EventPumped.Rollapp")
	proto.RegisterType((*EventPumped_Pool)(nil), "dymensionxyz.dymension.streamer.EventPumped.Pool")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/streamer/events.proto", fileDescriptor_4840a29c1bf68fa5)
}

var fileDescriptor_4840a29c1bf68fa5 = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0x6b, 0x74, 0xd7, 0xba, 0x3a, 0x40, 0x16, 0x12, 0xbd, 0x22, 0xd2, 0xaa, 0x12,
	0x52, 0x87, 0xc3, 0xa1, 0x77, 0x30, 0x31, 0x20, 0x15, 0x75, 0xe8, 0xc2, 0x9d, 0x72, 0x12, 0x03,
	0x4b, 0x94, 0xc4, 0x56, 0xcf, 0x6a, 0x6c, 0x47, 0xb1, 0x53, 0xb5, 0x7c, 0x04, 0x26, 0x56, 0x16,
	0x06, 0x46, 0xbe, 0x07, 0xd2, 0x8d, 0x1d, 0x99, 0x00, 0xb5, 0x5f, 0x04, 0x25, 0x76, 0xda, 0x08,
	0x09, 0x2a, 0x06, 0x74, 0x53, 0xfc, 0xfc, 0xde, 0xff, 0xe5, 0xf7, 0xb7, 0x9f, 0x0c, 0x4e, 0xf1,
	0x92, 0x11, 0x2e, 0xa9, 0xe0, 0x8b, 0xe5, 0x3b, 0x77, 0x1b, 0xb8, 0x52, 0xa5, 0x24, 0x60, 0x24,
	0x75, 0xc9, 0x9c, 0x70, 0x25, 0x51, 0x92, 0x0a, 0x25, 0x60, 0xb7, 0x5a, 0x8d, 0xb6, 0x01, 0x2a,
	0xab, 0x3b, 0xf7, 0xa7, 0x62, 0x2a, 0x8a, 0x5a, 0x37, 0x5f, 0x69, 0x59, 0xe7, 0x24, 0x12, 0x92,
	0x09, 0xe9, 0xeb, 0x84, 0x0e, 0x4c, 0xca, 0xd1, 0x91, 0x1b, 0x06, 0x92, 0xb8, 0xf3, 0x61, 0x48,
	0x54, 0x30, 0x74, 0x23, 0x41, 0xb9, 0xc9, 0xa3, 0x7d, 0x7c, 0xe5, 0x42, 0xd7, 0xf7, 0xbf, 0x5a,
	0xe0, 0x78, 0x9c, 0x23, 0x8f, 0x39, 0x1e, 0xc5, 0x22, 0x9a, 0x41, 0x07, 0x00, 0xaa, 0x48, 0x1a,
	0x28, 0x2a, 0xb8, 0x6c, 0x5b, 0x3d, 0x6b, 0x60, 0x7b, 0x95, 0x1d, 0xf8, 0x18, 0xdc, 0x61, 0xc1,
	0xc2, 0xaf, 0xd4, 0x1c, 0x14, 0x35, 0xc7, 0x2c, 0x58, 0x4c, 0x76, 0x65, 0x0c, 0xb4, 0x30, 0x95,
	0x2a, 0xa5, 0x61, 0xa6, 0x08, 0x6e, 0xd7, 0x7b, 0xf5, 0x41, 0xeb, 0xec, 0x04, 0x19, 0x33, 0x39,
	0x3e, 0x32, 0xf8, 0xe8, 0x95, 0xa0, 0x7c, 0xf4, 0xf4, 0xe6, 0x7b, 0xb7, 0xf6, 0xe5, 0x47, 0x77,
	0x30, 0xa5, 0xea, 0x3a, 0x0b, 0x51, 0x24, 0x98, 0x71, 0x6e, 0x3e, 0x4f, 0x24, 0x9e, 0xb9, 0x6a,
	0x99, 0x10, 0x59, 0x08, 0xa4, 0x57, 0xed, 0xdf, 0xff, 0xb4, 0xf5, 0x91, 0x88, 0xe8, 0x7a, 0xcc,
	0xf1, 0x5e, 0x1f, 0xbf, 0x01, 0x1e, 0xfc, 0x67, 0xc0, 0x97, 0xe0, 0xee, 0x8e, 0xef, 0x4a, 0x05,
	0xa9, 0x82, 0xa7, 0x00, 0x06, 0x91, 0xa2, 0x73, 0xe2, 0xeb, 0x4b, 0x91, 0x3e, 0xcf, 0x98, 0x21,
	0xbd, 0xa7, 0x33, 0x57, 0x3a, 0xf1, 0x3a, 0x63, 0xfd, 0xf7, 0x36, 0x68, 0x15, 0x1d, 0x2e, 0x33,
	0x96, 0x10, 0x0c, 0x1f, 0x82, 0xa6, 0x96, 0xf9, 0x14, 0x1b, 0x51, 0x43, 0x6f, 0x4c, 0x30, 0x7c,
	0x03, 0x1a, 0xa9, 0x88, 0xe3, 0x20, 0x49, 0xa4, 0x71, 0xf6, 0x0c, 0xed, 0x99, 0x45, 0x54, 0x69,
	0x8e, 0x3c, 0x2d, 0x1e, 0xd9, 0xb9, 0x69, 0x6f, 0xdb, 0x0b, 0x8e, 0x81, 0x9d, 0x08, 0x11, 0xb7,
	0xeb, 0x3d, 0x6b, 0xd0, 0x3a, 0x1b, 0xfe, 0x53, 0xcf, 0x4b, 0x21, 0x62, 0xaf, 0x90, 0x77, 0x3e,
	0x5b, 0xe0, 0xc8, 0xfc, 0x02, 0x3e, 0x02, 0xc0, 0xb4, 0x2f, 0x8d, 0x34, 0xbd, 0xa6, 0xd9, 0x99,
	0x60, 0xf8, 0x02, 0x34, 0x92, 0x8c, 0x25, 0xf9, 0x89, 0x16, 0x83, 0xf6, 0xd7, 0x3b, 0x32, 0xb8,
	0xa5, 0x20, 0x17, 0x2b, 0x31, 0x23, 0xfc, 0x22, 0x53, 0x06, 0x79, 0xbf, 0xb8, 0x14, 0x74, 0x3e,
	0x5a, 0xc0, 0xce, 0x99, 0xe1, 0x03, 0x70, 0x94, 0x53, 0xef, 0xce, 0xf9, 0x30, 0x0f, 0x6f, 0x93,
	0x6d, 0x74, 0x71, 0xb3, 0x76, 0xac, 0xd5, 0xda, 0xb1, 0x7e, 0xae, 0x1d, 0xeb, 0xc3, 0xc6, 0xa9,
	0xad, 0x36, 0x4e, 0xed, 0xdb, 0xc6, 0xa9, 0xbd, 0x7d, 0x5e, 0x19, 0xcf, 0x3f, 0xbc, 0x05, 0xf3,
	0x73, 0x77, 0xb1, 0x7b, 0x10, 0x8a, 0x89, 0x0d, 0x0f, 0x8b, 0xe7, 0xe0, 0xfc, 0x57, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xf7, 0xfa, 0xae, 0xa8, 0xe0, 0x04, 0x00, 0x00,
}

func (m *EventEndBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEndBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventEndBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Distributed) > 0 {
		for iNdEx := len(m.Distributed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distributed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MaxIterations != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.MaxIterations))
		i--
		dAtA[i] = 0x10
	}
	if m.Iterations != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Iterations))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventEpochEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEpochEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventEpochEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Distributed) > 0 {
		for iNdEx := len(m.Distributed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distributed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Iterations != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Iterations))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventEpochStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEpochStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventEpochStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveStreamsNum != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ActiveStreamsNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventPumped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPumped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPumped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Rollapps) > 0 {
		for iNdEx := len(m.Rollapps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rollapps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StreamId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventPumped_Rollapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPumped_Rollapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPumped_Rollapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.PumpCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPumped_Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPumped_Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPumped_Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.PumpCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventEndBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iterations != 0 {
		n += 1 + sovEvents(uint64(m.Iterations))
	}
	if m.MaxIterations != 0 {
		n += 1 + sovEvents(uint64(m.MaxIterations))
	}
	if len(m.Distributed) > 0 {
		for _, e := range m.Distributed {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventEpochEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iterations != 0 {
		n += 1 + sovEvents(uint64(m.Iterations))
	}
	if len(m.Distributed) > 0 {
		for _, e := range m.Distributed {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventEpochStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveStreamsNum != 0 {
		n += 1 + sovEvents(uint64(m.ActiveStreamsNum))
	}
	return n
}

func (m *EventPumped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovEvents(uint64(m.StreamId))
	}
	if len(m.Rollapps) > 0 {
		for _, e := range m.Rollapps {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPumped_Rollapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.PumpCoin.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.TokenOut.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventPumped_Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	l = m.PumpCoin.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.TokenOut.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventEndBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEndBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEndBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iterations", wireType)
			}
			m.Iterations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iterations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxIterations", wireType)
			}
			m.MaxIterations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxIterations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributed = append(m.Distributed, types.Coin{})
			if err := m.Distributed[len(m.Distributed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventEpochEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEpochEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEpochEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iterations", wireType)
			}
			m.Iterations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iterations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributed = append(m.Distributed, types.Coin{})
			if err := m.Distributed[len(m.Distributed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventEpochStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEpochStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEpochStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveStreamsNum", wireType)
			}
			m.ActiveStreamsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveStreamsNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPumped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPumped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPumped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollapps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rollapps = append(m.Rollapps, EventPumped_Rollapp{})
			if err := m.Rollapps[len(m.Rollapps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &EventPumped_Pool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPumped_Rollapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rollapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rollapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PumpCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PumpCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPumped_Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PumpCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PumpCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
