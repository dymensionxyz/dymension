// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/bridgingfee/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_bcp_innovations_hyperlane_cosmos_util "github.com/bcp-innovations/hyperlane-cosmos/util"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryFeeHookRequest is the request type for the Query/FeeHook RPC method.
type QueryFeeHookRequest struct {
	Id github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"id"`
}

func (m *QueryFeeHookRequest) Reset()         { *m = QueryFeeHookRequest{} }
func (m *QueryFeeHookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeHookRequest) ProtoMessage()    {}
func (*QueryFeeHookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2681a803d73ffe4, []int{0}
}
func (m *QueryFeeHookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeHookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeHookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeHookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeHookRequest.Merge(m, src)
}
func (m *QueryFeeHookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeHookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeHookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeHookRequest proto.InternalMessageInfo

// QueryFeeHookResponse is the response type for the Query/FeeHook RPC method.
type QueryFeeHookResponse struct {
	FeeHook HLFeeHook `protobuf:"bytes,1,opt,name=fee_hook,json=feeHook,proto3" json:"fee_hook"`
}

func (m *QueryFeeHookResponse) Reset()         { *m = QueryFeeHookResponse{} }
func (m *QueryFeeHookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeHookResponse) ProtoMessage()    {}
func (*QueryFeeHookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2681a803d73ffe4, []int{1}
}
func (m *QueryFeeHookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeHookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeHookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeHookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeHookResponse.Merge(m, src)
}
func (m *QueryFeeHookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeHookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeHookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeHookResponse proto.InternalMessageInfo

func (m *QueryFeeHookResponse) GetFeeHook() HLFeeHook {
	if m != nil {
		return m.FeeHook
	}
	return HLFeeHook{}
}

// QueryFeeHooksRequest is the request type for the Query/FeeHooks RPC method.
type QueryFeeHooksRequest struct {
}

func (m *QueryFeeHooksRequest) Reset()         { *m = QueryFeeHooksRequest{} }
func (m *QueryFeeHooksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeHooksRequest) ProtoMessage()    {}
func (*QueryFeeHooksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2681a803d73ffe4, []int{2}
}
func (m *QueryFeeHooksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeHooksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeHooksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeHooksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeHooksRequest.Merge(m, src)
}
func (m *QueryFeeHooksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeHooksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeHooksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeHooksRequest proto.InternalMessageInfo

// QueryFeeHooksResponse is the response type for the Query/FeeHooks RPC method.
type QueryFeeHooksResponse struct {
	FeeHooks []HLFeeHook `protobuf:"bytes,1,rep,name=fee_hooks,json=feeHooks,proto3" json:"fee_hooks"`
}

func (m *QueryFeeHooksResponse) Reset()         { *m = QueryFeeHooksResponse{} }
func (m *QueryFeeHooksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeHooksResponse) ProtoMessage()    {}
func (*QueryFeeHooksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2681a803d73ffe4, []int{3}
}
func (m *QueryFeeHooksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeHooksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeHooksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeHooksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeHooksResponse.Merge(m, src)
}
func (m *QueryFeeHooksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeHooksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeHooksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeHooksResponse proto.InternalMessageInfo

func (m *QueryFeeHooksResponse) GetFeeHooks() []HLFeeHook {
	if m != nil {
		return m.FeeHooks
	}
	return nil
}

// QueryAggregationHookRequest is the request type for the Query/AggregationHook
// RPC method.
type QueryAggregationHookRequest struct {
	Id github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"id"`
}

func (m *QueryAggregationHookRequest) Reset()         { *m = QueryAggregationHookRequest{} }
func (m *QueryAggregationHookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAggregationHookRequest) ProtoMessage()    {}
func (*QueryAggregationHookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2681a803d73ffe4, []int{4}
}
func (m *QueryAggregationHookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregationHookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregationHookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregationHookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregationHookRequest.Merge(m, src)
}
func (m *QueryAggregationHookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregationHookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregationHookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregationHookRequest proto.InternalMessageInfo

// QueryAggregationHookResponse is the response type for the
// Query/AggregationHook RPC method.
type QueryAggregationHookResponse struct {
	AggregationHook AggregationHook `protobuf:"bytes,1,opt,name=aggregation_hook,json=aggregationHook,proto3" json:"aggregation_hook"`
}

func (m *QueryAggregationHookResponse) Reset()         { *m = QueryAggregationHookResponse{} }
func (m *QueryAggregationHookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregationHookResponse) ProtoMessage()    {}
func (*QueryAggregationHookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2681a803d73ffe4, []int{5}
}
func (m *QueryAggregationHookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregationHookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregationHookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregationHookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregationHookResponse.Merge(m, src)
}
func (m *QueryAggregationHookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregationHookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregationHookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregationHookResponse proto.InternalMessageInfo

func (m *QueryAggregationHookResponse) GetAggregationHook() AggregationHook {
	if m != nil {
		return m.AggregationHook
	}
	return AggregationHook{}
}

// QueryAggregationHooksRequest is the request type for the
// Query/AggregationHooks RPC method.
type QueryAggregationHooksRequest struct {
}

func (m *QueryAggregationHooksRequest) Reset()         { *m = QueryAggregationHooksRequest{} }
func (m *QueryAggregationHooksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAggregationHooksRequest) ProtoMessage()    {}
func (*QueryAggregationHooksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2681a803d73ffe4, []int{6}
}
func (m *QueryAggregationHooksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregationHooksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregationHooksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregationHooksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregationHooksRequest.Merge(m, src)
}
func (m *QueryAggregationHooksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregationHooksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregationHooksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregationHooksRequest proto.InternalMessageInfo

// QueryAggregationHooksResponse is the response type for the
// Query/AggregationHooks RPC method.
type QueryAggregationHooksResponse struct {
	AggregationHooks []AggregationHook `protobuf:"bytes,1,rep,name=aggregation_hooks,json=aggregationHooks,proto3" json:"aggregation_hooks"`
}

func (m *QueryAggregationHooksResponse) Reset()         { *m = QueryAggregationHooksResponse{} }
func (m *QueryAggregationHooksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregationHooksResponse) ProtoMessage()    {}
func (*QueryAggregationHooksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2681a803d73ffe4, []int{7}
}
func (m *QueryAggregationHooksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregationHooksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregationHooksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregationHooksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregationHooksResponse.Merge(m, src)
}
func (m *QueryAggregationHooksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregationHooksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregationHooksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregationHooksResponse proto.InternalMessageInfo

func (m *QueryAggregationHooksResponse) GetAggregationHooks() []AggregationHook {
	if m != nil {
		return m.AggregationHooks
	}
	return nil
}

// QueryQuoteFeePaymentRequest is the request type for the Query/QuoteFeePayment RPC method.
type QueryQuoteFeePaymentRequest struct {
	// Hook ID to use for fee calculation
	HookId github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=hook_id,json=hookId,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"hook_id"`
	// Token sender address (used as token ID)
	Sender github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,2,opt,name=sender,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"sender"`
	// Transfer amount to calculate fee for
	TransferAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=transfer_amount,json=transferAmount,proto3,customtype=cosmossdk.io/math.Int" json:"transfer_amount"`
}

func (m *QueryQuoteFeePaymentRequest) Reset()         { *m = QueryQuoteFeePaymentRequest{} }
func (m *QueryQuoteFeePaymentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteFeePaymentRequest) ProtoMessage()    {}
func (*QueryQuoteFeePaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2681a803d73ffe4, []int{8}
}
func (m *QueryQuoteFeePaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteFeePaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteFeePaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteFeePaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteFeePaymentRequest.Merge(m, src)
}
func (m *QueryQuoteFeePaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteFeePaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteFeePaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteFeePaymentRequest proto.InternalMessageInfo

// QueryQuoteFeePaymentResponse is the response type for the Query/QuoteFeePayment RPC method.
type QueryQuoteFeePaymentResponse struct {
	// Fee required in base denomination
	FeeCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=fee_coins,json=feeCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_coins"`
}

func (m *QueryQuoteFeePaymentResponse) Reset()         { *m = QueryQuoteFeePaymentResponse{} }
func (m *QueryQuoteFeePaymentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteFeePaymentResponse) ProtoMessage()    {}
func (*QueryQuoteFeePaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2681a803d73ffe4, []int{9}
}
func (m *QueryQuoteFeePaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteFeePaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteFeePaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteFeePaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteFeePaymentResponse.Merge(m, src)
}
func (m *QueryQuoteFeePaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteFeePaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteFeePaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteFeePaymentResponse proto.InternalMessageInfo

func (m *QueryQuoteFeePaymentResponse) GetFeeCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeeCoins
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryFeeHookRequest)(nil), "dymensionxyz.dymension.bridgingfee.QueryFeeHookRequest")
	proto.RegisterType((*QueryFeeHookResponse)(nil), "dymensionxyz.dymension.bridgingfee.QueryFeeHookResponse")
	proto.RegisterType((*QueryFeeHooksRequest)(nil), "dymensionxyz.dymension.bridgingfee.QueryFeeHooksRequest")
	proto.RegisterType((*QueryFeeHooksResponse)(nil), "dymensionxyz.dymension.bridgingfee.QueryFeeHooksResponse")
	proto.RegisterType((*QueryAggregationHookRequest)(nil), "dymensionxyz.dymension.bridgingfee.QueryAggregationHookRequest")
	proto.RegisterType((*QueryAggregationHookResponse)(nil), "dymensionxyz.dymension.bridgingfee.QueryAggregationHookResponse")
	proto.RegisterType((*QueryAggregationHooksRequest)(nil), "dymensionxyz.dymension.bridgingfee.QueryAggregationHooksRequest")
	proto.RegisterType((*QueryAggregationHooksResponse)(nil), "dymensionxyz.dymension.bridgingfee.QueryAggregationHooksResponse")
	proto.RegisterType((*QueryQuoteFeePaymentRequest)(nil), "dymensionxyz.dymension.bridgingfee.QueryQuoteFeePaymentRequest")
	proto.RegisterType((*QueryQuoteFeePaymentResponse)(nil), "dymensionxyz.dymension.bridgingfee.QueryQuoteFeePaymentResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/bridgingfee/query.proto", fileDescriptor_f2681a803d73ffe4)
}

var fileDescriptor_f2681a803d73ffe4 = []byte{
	// 826 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x4f, 0x1b, 0x47,
	0x18, 0xf5, 0x9a, 0x16, 0xcc, 0x54, 0xaa, 0xe9, 0x14, 0x2a, 0x63, 0xe8, 0x82, 0xf6, 0x84, 0x5a,
	0x79, 0x07, 0x63, 0x55, 0x40, 0x91, 0xda, 0xda, 0x48, 0x08, 0xa4, 0xaa, 0x02, 0xb7, 0x27, 0x8a,
	0x64, 0xad, 0xbd, 0xe3, 0xf5, 0xd4, 0x78, 0xc6, 0xec, 0x8c, 0x2d, 0x5c, 0xcb, 0x97, 0xaa, 0x52,
	0x38, 0x46, 0xca, 0xbf, 0xc8, 0x21, 0xca, 0x21, 0xb7, 0xe4, 0x92, 0x1b, 0x47, 0x94, 0x5c, 0xa2,
	0x24, 0x22, 0x11, 0x44, 0xca, 0xaf, 0x88, 0x14, 0xed, 0xee, 0x2c, 0x36, 0x8b, 0x51, 0xd6, 0x86,
	0x9c, 0xec, 0xdd, 0x99, 0xef, 0x7d, 0xef, 0xcd, 0xdb, 0xef, 0x69, 0x80, 0x6e, 0xb6, 0x6a, 0x98,
	0x72, 0xc2, 0xe8, 0x61, 0xeb, 0x5f, 0x74, 0xf1, 0x80, 0x8a, 0x36, 0x31, 0x2d, 0x42, 0xad, 0x32,
	0xc6, 0xe8, 0xa0, 0x81, 0xed, 0x96, 0x5e, 0xb7, 0x99, 0x60, 0x50, 0xeb, 0xdd, 0xdf, 0x2d, 0xd6,
	0x7b, 0xf6, 0x27, 0x27, 0x2d, 0x66, 0x31, 0x77, 0x3b, 0x72, 0xfe, 0x79, 0x95, 0xc9, 0xe9, 0x12,
	0xe3, 0x35, 0xc6, 0x0b, 0xde, 0x82, 0xf7, 0x20, 0x97, 0x66, 0x2d, 0xc6, 0xac, 0x7d, 0x8c, 0x8c,
	0x3a, 0x41, 0x06, 0xa5, 0x4c, 0x18, 0x82, 0x30, 0xea, 0xaf, 0xce, 0x78, 0x7b, 0x3d, 0x1a, 0xa8,
	0x99, 0xee, 0xe5, 0x93, 0x54, 0xe5, 0x62, 0xd1, 0xe0, 0x18, 0x35, 0xd3, 0x45, 0x2c, 0x8c, 0x34,
	0x2a, 0x31, 0x42, 0xe5, 0x7a, 0x18, 0x7d, 0xa2, 0x55, 0xc7, 0x7e, 0xb3, 0xc5, 0x10, 0xfb, 0x2d,
	0x4c, 0x31, 0x27, 0xb2, 0x42, 0xfb, 0x07, 0x7c, 0xbb, 0xe3, 0x10, 0xda, 0xc0, 0x78, 0x93, 0xb1,
	0x6a, 0x1e, 0x1f, 0x34, 0x30, 0x17, 0xf0, 0x4f, 0x10, 0x25, 0x66, 0x42, 0x99, 0x57, 0x16, 0xc6,
	0x73, 0xeb, 0xc7, 0xa7, 0x73, 0x91, 0x97, 0xa7, 0x73, 0x6b, 0x16, 0x11, 0x95, 0x46, 0x51, 0x2f,
	0xb1, 0x1a, 0x2a, 0x96, 0xea, 0x29, 0x42, 0x29, 0x6b, 0x7a, 0x5a, 0x51, 0xa5, 0x55, 0xc7, 0xf6,
	0xbe, 0x41, 0x71, 0x4a, 0x2a, 0x6a, 0x08, 0xb2, 0xaf, 0x6f, 0xe2, 0xc3, 0xac, 0x69, 0xda, 0x98,
	0xf3, 0x7c, 0x94, 0x98, 0x5a, 0x19, 0x4c, 0x5e, 0xee, 0xc5, 0xeb, 0x8c, 0x72, 0x0c, 0xff, 0x00,
	0xb1, 0x32, 0xc6, 0x85, 0x0a, 0x63, 0x55, 0xb7, 0xe5, 0x57, 0x4b, 0x29, 0xfd, 0xd3, 0x46, 0xe9,
	0x9b, 0xbf, 0x4b, 0xa0, 0xdc, 0x17, 0x0e, 0xc3, 0xfc, 0x58, 0xd9, 0x7b, 0xd4, 0xbe, 0xbb, 0xdc,
	0x87, 0x4b, 0x51, 0x1a, 0x01, 0x53, 0x81, 0xf7, 0x92, 0xc0, 0x36, 0x18, 0xf7, 0x09, 0xf0, 0x84,
	0x32, 0x3f, 0x32, 0x2c, 0x83, 0x98, 0x64, 0xc0, 0x35, 0x1b, 0xcc, 0xb8, 0xad, 0xb2, 0x96, 0x65,
	0x63, 0xcb, 0x3d, 0xa4, 0xcf, 0x7e, 0xbc, 0xff, 0x2b, 0x60, 0xb6, 0x7f, 0x53, 0x29, 0xd3, 0x04,
	0x13, 0x46, 0x77, 0xa9, 0xf7, 0xbc, 0x33, 0x61, 0xd4, 0x06, 0x60, 0xa5, 0xe6, 0xb8, 0x71, 0xf9,
	0xb5, 0xa6, 0xf6, 0x67, 0x71, 0xe1, 0xc2, 0x1d, 0x05, 0x7c, 0x7f, 0xcd, 0x06, 0xc9, 0xb3, 0x0c,
	0xbe, 0x09, 0xf2, 0xf4, 0x6d, 0xb9, 0x01, 0xd1, 0x89, 0x00, 0x51, 0xae, 0x3d, 0x88, 0x4a, 0x97,
	0x76, 0x1a, 0x4c, 0xe0, 0x0d, 0x8c, 0xb7, 0x0d, 0x07, 0x4f, 0xf8, 0x2e, 0xed, 0x81, 0x31, 0xa7,
	0x77, 0xe1, 0x76, 0xad, 0x1a, 0x75, 0x30, 0xb7, 0x4c, 0xf8, 0x37, 0x18, 0xe5, 0x98, 0x9a, 0xd8,
	0x4e, 0x44, 0x6f, 0x11, 0xdc, 0x83, 0x84, 0x7f, 0x81, 0xb8, 0xb0, 0x0d, 0xca, 0xcb, 0xd8, 0x2e,
	0x18, 0x35, 0xd6, 0xa0, 0x22, 0x31, 0xe2, 0x76, 0xf9, 0x51, 0x76, 0x99, 0xf2, 0x00, 0xb8, 0x59,
	0xd5, 0x09, 0x43, 0x35, 0x43, 0x54, 0xf4, 0x2d, 0x2a, 0x9e, 0x3d, 0x4a, 0x01, 0x99, 0x6d, 0x5b,
	0x54, 0xe4, 0xbf, 0xf6, 0x31, 0xb2, 0x2e, 0x84, 0x76, 0xe4, 0x7f, 0x61, 0x57, 0x0e, 0x4c, 0x3a,
	0x57, 0xf1, 0x06, 0xc9, 0x49, 0x30, 0xdf, 0xb1, 0x69, 0x5d, 0x02, 0x3a, 0x19, 0xa7, 0xcb, 0x8c,
	0xd3, 0xd7, 0x19, 0xa1, 0xb9, 0x45, 0x87, 0xcb, 0xfd, 0x37, 0x73, 0x0b, 0x3d, 0x8a, 0xa5, 0x2e,
	0xef, 0x27, 0xc5, 0xcd, 0xaa, 0xcc, 0x37, 0xa7, 0x80, 0xbb, 0x03, 0xe6, 0xfe, 0x5b, 0x7a, 0x1a,
	0x03, 0x5f, 0xba, 0x54, 0xe0, 0x13, 0x05, 0x8c, 0xc9, 0x31, 0x84, 0xcb, 0x61, 0x3e, 0x8f, 0x3e,
	0x79, 0x97, 0x5c, 0x19, 0xbc, 0xd0, 0x93, 0xac, 0xfd, 0x72, 0xf4, 0xfe, 0xe1, 0x0f, 0xca, 0x7f,
	0xcf, 0xdf, 0xdd, 0x8b, 0x66, 0x60, 0x1a, 0x85, 0x08, 0x60, 0x3f, 0x6a, 0x50, 0x9b, 0x98, 0x1d,
	0xf8, 0x58, 0x01, 0x31, 0x3f, 0x90, 0xe0, 0xc0, 0x34, 0xfc, 0xa9, 0x4a, 0xae, 0x0e, 0x51, 0x29,
	0x15, 0xfc, 0xdc, 0x55, 0x80, 0x60, 0x6a, 0x10, 0x05, 0x1c, 0xbe, 0x56, 0x40, 0x3c, 0x30, 0x6e,
	0xf0, 0xd7, 0xd0, 0x54, 0xfa, 0xa7, 0x63, 0xf2, 0xb7, 0xe1, 0x01, 0xa4, 0xa4, 0x8d, 0xae, 0xa4,
	0x35, 0xb8, 0x1a, 0x46, 0x52, 0x30, 0x70, 0x3c, 0x73, 0x5e, 0x29, 0x60, 0x22, 0x18, 0x53, 0x70,
	0x68, 0x7a, 0x17, 0x66, 0x65, 0x6f, 0x80, 0x20, 0x15, 0xe6, 0xba, 0x0a, 0x97, 0xe1, 0x4f, 0xc3,
	0x28, 0xe4, 0xf0, 0x83, 0x02, 0xe2, 0x81, 0x49, 0x1e, 0xc0, 0xbc, 0xfe, 0xa1, 0x39, 0x80, 0x79,
	0xd7, 0x84, 0x88, 0x66, 0x75, 0xa5, 0xed, 0xc1, 0x5d, 0x14, 0xea, 0x8a, 0xc7, 0x04, 0x2e, 0x38,
	0x5f, 0x65, 0xdd, 0xc3, 0x42, 0x6d, 0x19, 0xdc, 0x1d, 0xd4, 0xf6, 0x12, 0xb1, 0x83, 0xda, 0x81,
	0x40, 0xec, 0xe4, 0xf2, 0xc7, 0x67, 0xaa, 0x72, 0x72, 0xa6, 0x2a, 0x6f, 0xcf, 0x54, 0xe5, 0xee,
	0xb9, 0x1a, 0x39, 0x39, 0x57, 0x23, 0x2f, 0xce, 0xd5, 0xc8, 0xee, 0x4a, 0x4f, 0x22, 0x5d, 0xd3,
	0xbf, 0x99, 0x41, 0x87, 0x57, 0xef, 0x61, 0xc5, 0x51, 0xf7, 0x5a, 0x95, 0xf9, 0x18, 0x00, 0x00,
	0xff, 0xff, 0x2d, 0x94, 0x14, 0x20, 0x9a, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// FeeHook queries a fee hook by ID
	FeeHook(ctx context.Context, in *QueryFeeHookRequest, opts ...grpc.CallOption) (*QueryFeeHookResponse, error)
	// FeeHooks queries all fee hooks
	FeeHooks(ctx context.Context, in *QueryFeeHooksRequest, opts ...grpc.CallOption) (*QueryFeeHooksResponse, error)
	// AggregationHook queries an aggregation hook by ID
	AggregationHook(ctx context.Context, in *QueryAggregationHookRequest, opts ...grpc.CallOption) (*QueryAggregationHookResponse, error)
	// AggregationHooks queries all aggregation hooks
	AggregationHooks(ctx context.Context, in *QueryAggregationHooksRequest, opts ...grpc.CallOption) (*QueryAggregationHooksResponse, error)
	// QuoteFeePayment quotes the fee payment required for a transfer
	QuoteFeePayment(ctx context.Context, in *QueryQuoteFeePaymentRequest, opts ...grpc.CallOption) (*QueryQuoteFeePaymentResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FeeHook(ctx context.Context, in *QueryFeeHookRequest, opts ...grpc.CallOption) (*QueryFeeHookResponse, error) {
	out := new(QueryFeeHookResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.bridgingfee.Query/FeeHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeHooks(ctx context.Context, in *QueryFeeHooksRequest, opts ...grpc.CallOption) (*QueryFeeHooksResponse, error) {
	out := new(QueryFeeHooksResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.bridgingfee.Query/FeeHooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregationHook(ctx context.Context, in *QueryAggregationHookRequest, opts ...grpc.CallOption) (*QueryAggregationHookResponse, error) {
	out := new(QueryAggregationHookResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.bridgingfee.Query/AggregationHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregationHooks(ctx context.Context, in *QueryAggregationHooksRequest, opts ...grpc.CallOption) (*QueryAggregationHooksResponse, error) {
	out := new(QueryAggregationHooksResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.bridgingfee.Query/AggregationHooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuoteFeePayment(ctx context.Context, in *QueryQuoteFeePaymentRequest, opts ...grpc.CallOption) (*QueryQuoteFeePaymentResponse, error) {
	out := new(QueryQuoteFeePaymentResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.bridgingfee.Query/QuoteFeePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// FeeHook queries a fee hook by ID
	FeeHook(context.Context, *QueryFeeHookRequest) (*QueryFeeHookResponse, error)
	// FeeHooks queries all fee hooks
	FeeHooks(context.Context, *QueryFeeHooksRequest) (*QueryFeeHooksResponse, error)
	// AggregationHook queries an aggregation hook by ID
	AggregationHook(context.Context, *QueryAggregationHookRequest) (*QueryAggregationHookResponse, error)
	// AggregationHooks queries all aggregation hooks
	AggregationHooks(context.Context, *QueryAggregationHooksRequest) (*QueryAggregationHooksResponse, error)
	// QuoteFeePayment quotes the fee payment required for a transfer
	QuoteFeePayment(context.Context, *QueryQuoteFeePaymentRequest) (*QueryQuoteFeePaymentResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) FeeHook(ctx context.Context, req *QueryFeeHookRequest) (*QueryFeeHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeHook not implemented")
}
func (*UnimplementedQueryServer) FeeHooks(ctx context.Context, req *QueryFeeHooksRequest) (*QueryFeeHooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeHooks not implemented")
}
func (*UnimplementedQueryServer) AggregationHook(ctx context.Context, req *QueryAggregationHookRequest) (*QueryAggregationHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregationHook not implemented")
}
func (*UnimplementedQueryServer) AggregationHooks(ctx context.Context, req *QueryAggregationHooksRequest) (*QueryAggregationHooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregationHooks not implemented")
}
func (*UnimplementedQueryServer) QuoteFeePayment(ctx context.Context, req *QueryQuoteFeePaymentRequest) (*QueryQuoteFeePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteFeePayment not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_FeeHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.bridgingfee.Query/FeeHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeHook(ctx, req.(*QueryFeeHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeHooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.bridgingfee.Query/FeeHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeHooks(ctx, req.(*QueryFeeHooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregationHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregationHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregationHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.bridgingfee.Query/AggregationHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregationHook(ctx, req.(*QueryAggregationHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregationHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregationHooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregationHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.bridgingfee.Query/AggregationHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregationHooks(ctx, req.(*QueryAggregationHooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuoteFeePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuoteFeePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuoteFeePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.bridgingfee.Query/QuoteFeePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuoteFeePayment(ctx, req.(*QueryQuoteFeePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.bridgingfee.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeeHook",
			Handler:    _Query_FeeHook_Handler,
		},
		{
			MethodName: "FeeHooks",
			Handler:    _Query_FeeHooks_Handler,
		},
		{
			MethodName: "AggregationHook",
			Handler:    _Query_AggregationHook_Handler,
		},
		{
			MethodName: "AggregationHooks",
			Handler:    _Query_AggregationHooks_Handler,
		},
		{
			MethodName: "QuoteFeePayment",
			Handler:    _Query_QuoteFeePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/bridgingfee/query.proto",
}

func (m *QueryFeeHookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeHookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeHookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFeeHookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeHookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeHookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeHook.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFeeHooksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeHooksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeHooksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFeeHooksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeHooksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeHooksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeHooks) > 0 {
		for iNdEx := len(m.FeeHooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeHooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregationHookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregationHookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregationHookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAggregationHookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregationHookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregationHookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AggregationHook.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAggregationHooksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregationHooksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregationHooksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAggregationHooksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregationHooksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregationHooksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggregationHooks) > 0 {
		for iNdEx := len(m.AggregationHooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregationHooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteFeePaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteFeePaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteFeePaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TransferAmount.Size()
		i -= size
		if _, err := m.TransferAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Sender.Size()
		i -= size
		if _, err := m.Sender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.HookId.Size()
		i -= size
		if _, err := m.HookId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryQuoteFeePaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteFeePaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteFeePaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeCoins) > 0 {
		for iNdEx := len(m.FeeCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryFeeHookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeeHookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeHook.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeeHooksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFeeHooksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeHooks) > 0 {
		for _, e := range m.FeeHooks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAggregationHookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAggregationHookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AggregationHook.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAggregationHooksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAggregationHooksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AggregationHooks) > 0 {
		for _, e := range m.AggregationHooks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryQuoteFeePaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HookId.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Sender.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TransferAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryQuoteFeePaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeCoins) > 0 {
		for _, e := range m.FeeCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryFeeHookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeHookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeHookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeHookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeHookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeHookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeHook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeHook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeHooksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeHooksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeHooksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeHooksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeHooksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeHooksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeHooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeHooks = append(m.FeeHooks, HLFeeHook{})
			if err := m.FeeHooks[len(m.FeeHooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregationHookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregationHookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregationHookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregationHookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregationHookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregationHookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationHook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregationHook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregationHooksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregationHooksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregationHooksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregationHooksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregationHooksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregationHooksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationHooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationHooks = append(m.AggregationHooks, AggregationHook{})
			if err := m.AggregationHooks[len(m.AggregationHooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteFeePaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteFeePaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteFeePaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HookId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransferAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteFeePaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteFeePaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteFeePaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeCoins = append(m.FeeCoins, types.Coin{})
			if err := m.FeeCoins[len(m.FeeCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
