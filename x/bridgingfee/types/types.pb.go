// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/bridgingfee/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_bcp_innovations_hyperlane_cosmos_util "github.com/bcp-innovations/hyperlane-cosmos/util"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HLAssetFee struct {
	// Hyperlane token ID
	// https://docs.hyperlane.xyz/docs/alt-vm-implementations/cosmos-sdk#x%2Fwarp
	TokenID string `protobuf:"bytes,1,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	// A fee for bridging the token to the Hub
	InboundFee cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=inbound_fee,json=inboundFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"inbound_fee"`
	// A fee for bridging the token from the Hub
	OutboundFee cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=outbound_fee,json=outboundFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"outbound_fee"`
}

func (m *HLAssetFee) Reset()         { *m = HLAssetFee{} }
func (m *HLAssetFee) String() string { return proto.CompactTextString(m) }
func (*HLAssetFee) ProtoMessage()    {}
func (*HLAssetFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_df02494627083c0e, []int{0}
}
func (m *HLAssetFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HLAssetFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HLAssetFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HLAssetFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HLAssetFee.Merge(m, src)
}
func (m *HLAssetFee) XXX_Size() int {
	return m.Size()
}
func (m *HLAssetFee) XXX_DiscardUnknown() {
	xxx_messageInfo_HLAssetFee.DiscardUnknown(m)
}

var xxx_messageInfo_HLAssetFee proto.InternalMessageInfo

func (m *HLAssetFee) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

type HLFeeHook struct {
	Id    github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"id"`
	Owner string                                                      `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Fees  []HLAssetFee                                                `protobuf:"bytes,3,rep,name=fees,proto3" json:"fees"`
}

func (m *HLFeeHook) Reset()         { *m = HLFeeHook{} }
func (m *HLFeeHook) String() string { return proto.CompactTextString(m) }
func (*HLFeeHook) ProtoMessage()    {}
func (*HLFeeHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_df02494627083c0e, []int{1}
}
func (m *HLFeeHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HLFeeHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HLFeeHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HLFeeHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HLFeeHook.Merge(m, src)
}
func (m *HLFeeHook) XXX_Size() int {
	return m.Size()
}
func (m *HLFeeHook) XXX_DiscardUnknown() {
	xxx_messageInfo_HLFeeHook.DiscardUnknown(m)
}

var xxx_messageInfo_HLFeeHook proto.InternalMessageInfo

func (m *HLFeeHook) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *HLFeeHook) GetFees() []HLAssetFee {
	if m != nil {
		return m.Fees
	}
	return nil
}

type AggregationHook struct {
	Id      github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress   `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"id"`
	Owner   string                                                        `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	HookIds []github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,3,rep,name=hookIds,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"hookIds"`
}

func (m *AggregationHook) Reset()         { *m = AggregationHook{} }
func (m *AggregationHook) String() string { return proto.CompactTextString(m) }
func (*AggregationHook) ProtoMessage()    {}
func (*AggregationHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_df02494627083c0e, []int{2}
}
func (m *AggregationHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregationHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregationHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregationHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregationHook.Merge(m, src)
}
func (m *AggregationHook) XXX_Size() int {
	return m.Size()
}
func (m *AggregationHook) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregationHook.DiscardUnknown(m)
}

var xxx_messageInfo_AggregationHook proto.InternalMessageInfo

func (m *AggregationHook) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*HLAssetFee)(nil), "dymensionxyz.dymension.bridgingfee.HLAssetFee")
	proto.RegisterType((*HLFeeHook)(nil), "dymensionxyz.dymension.bridgingfee.HLFeeHook")
	proto.RegisterType((*AggregationHook)(nil), "dymensionxyz.dymension.bridgingfee.AggregationHook")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/bridgingfee/types.proto", fileDescriptor_df02494627083c0e)
}

var fileDescriptor_df02494627083c0e = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x86, 0xbd, 0x76, 0xda, 0x90, 0x75, 0xa1, 0x20, 0x72, 0x50, 0x53, 0x50, 0x82, 0x4f, 0xb9,
	0x78, 0x97, 0x36, 0x97, 0x42, 0x4f, 0x76, 0x8d, 0x51, 0xc0, 0x27, 0xa5, 0xa7, 0x42, 0x09, 0x96,
	0x76, 0xbc, 0x5e, 0x1c, 0xef, 0x08, 0xed, 0x2a, 0xb5, 0xfa, 0x14, 0x7d, 0x98, 0x3c, 0x44, 0x8e,
	0x26, 0xa7, 0x92, 0x83, 0x29, 0xf6, 0x33, 0xf4, 0x5e, 0xa4, 0x95, 0x6b, 0x43, 0x29, 0x85, 0xd2,
	0x43, 0x6f, 0x3b, 0xcc, 0x3f, 0xdf, 0xfc, 0xb3, 0xc3, 0x50, 0x26, 0x8a, 0x39, 0x68, 0xa3, 0x50,
	0x2f, 0x8a, 0xcf, 0xfc, 0x67, 0xc0, 0xe3, 0x4c, 0x09, 0xa9, 0xb4, 0x9c, 0x00, 0x70, 0x5b, 0xa4,
	0x60, 0x58, 0x9a, 0xa1, 0x45, 0xaf, 0xb3, 0xaf, 0xdf, 0x15, 0xb3, 0x3d, 0xfd, 0xc9, 0xb1, 0x44,
	0x89, 0x95, 0x9c, 0x97, 0x2f, 0x57, 0x79, 0xf2, 0x22, 0x41, 0x33, 0x47, 0x73, 0xed, 0x12, 0x2e,
	0x70, 0xa9, 0xce, 0x92, 0x50, 0x1a, 0x8e, 0x7a, 0xc6, 0x80, 0x1d, 0x02, 0x78, 0x3e, 0x3d, 0xb4,
	0x38, 0x03, 0x7d, 0x39, 0xf0, 0xc9, 0x19, 0x39, 0x3f, 0x8a, 0xb6, 0xa1, 0x17, 0xd1, 0xb6, 0xd2,
	0x31, 0xe6, 0x5a, 0x5c, 0x4f, 0x00, 0xfc, 0x66, 0x99, 0xed, 0xbf, 0xba, 0x5f, 0x9d, 0x36, 0x1e,
	0x57, 0xa7, 0x2f, 0x1d, 0xd3, 0x88, 0x19, 0x53, 0xc8, 0xe7, 0x63, 0x3b, 0x65, 0x23, 0x90, 0xe3,
	0xa4, 0x18, 0x40, 0xf2, 0x70, 0xd7, 0xa5, 0x75, 0xcb, 0x01, 0x24, 0x11, 0xad, 0x29, 0x65, 0xb7,
	0xf7, 0xf4, 0x19, 0xe6, 0x76, 0x07, 0x6d, 0xfd, 0x2d, 0xb4, 0xbd, 0xc5, 0x0c, 0x01, 0x3a, 0x8f,
	0x84, 0x1e, 0x85, 0xa3, 0x21, 0x40, 0x88, 0x38, 0xf3, 0xae, 0x68, 0x53, 0x09, 0x37, 0x4c, 0xff,
	0x5d, 0x4d, 0x7e, 0x2b, 0x95, 0x9d, 0xe6, 0x31, 0x4b, 0x70, 0xce, 0xe3, 0x24, 0xed, 0x2a, 0xad,
	0xf1, 0x76, 0x6c, 0x15, 0x6a, 0xc3, 0xa7, 0x45, 0x0a, 0xd9, 0xcd, 0x58, 0x43, 0xd7, 0xf1, 0x79,
	0x6e, 0xd5, 0x0d, 0x0b, 0x61, 0xd1, 0x13, 0x22, 0x03, 0x63, 0xa2, 0xa6, 0x12, 0x1e, 0xa3, 0x4f,
	0xf0, 0x93, 0x86, 0xac, 0xfe, 0x06, 0xff, 0xe1, 0xae, 0x7b, 0x5c, 0xdb, 0xa9, 0x65, 0x57, 0x36,
	0x53, 0x5a, 0x46, 0x4e, 0xe6, 0x85, 0xf4, 0x60, 0x02, 0x60, 0xfc, 0xd6, 0x59, 0xeb, 0xbc, 0xfd,
	0x9a, 0xb1, 0x3f, 0x6f, 0x92, 0xed, 0x96, 0xd2, 0x3f, 0x28, 0x6d, 0x47, 0x15, 0xa1, 0xf3, 0x9d,
	0xd0, 0xe7, 0x3d, 0x29, 0x33, 0x90, 0x95, 0xdf, 0xff, 0x67, 0xc4, 0x8f, 0xf4, 0x70, 0x8a, 0x38,
	0xbb, 0x14, 0x6e, 0xca, 0x7f, 0xe4, 0x64, 0xcb, 0xec, 0x47, 0xf7, 0xeb, 0x80, 0x2c, 0xd7, 0x01,
	0xf9, 0xb6, 0x0e, 0xc8, 0x97, 0x4d, 0xd0, 0x58, 0x6e, 0x82, 0xc6, 0xd7, 0x4d, 0xd0, 0xf8, 0xf0,
	0x66, 0x8f, 0xff, 0x9b, 0x8b, 0xba, 0xbd, 0xe0, 0x8b, 0x5f, 0xcf, 0x2a, 0x7e, 0x5a, 0x9d, 0xc0,
	0xc5, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x55, 0x6f, 0xf4, 0x89, 0x03, 0x00, 0x00,
}

func (m *HLAssetFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HLAssetFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HLAssetFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OutboundFee.Size()
		i -= size
		if _, err := m.OutboundFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.InboundFee.Size()
		i -= size
		if _, err := m.InboundFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HLFeeHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HLFeeHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HLFeeHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AggregationHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregationHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregationHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HookIds) > 0 {
		for iNdEx := len(m.HookIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.HookIds[iNdEx].Size()
				i -= size
				if _, err := m.HookIds[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HLAssetFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.InboundFee.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.OutboundFee.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *HLFeeHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AggregationHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.HookIds) > 0 {
		for _, e := range m.HookIds {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HLAssetFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HLAssetFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HLAssetFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InboundFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutboundFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HLFeeHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HLFeeHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HLFeeHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, HLAssetFee{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregationHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregationHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregationHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress
			m.HookIds = append(m.HookIds, v)
			if err := m.HookIds[len(m.HookIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
