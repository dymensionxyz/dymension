// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/transfer/completion_hook.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// if given in eibc metadata, eibc fullfillment funds will be directed to a module address
// and a hook will be executed, and finalize will also call the hook
// note: only for onRecvPacket
type CompletionHook struct {
	// name of hook
	HookName string `protobuf:"bytes,1,opt,name=hook_name,json=hookName,proto3" json:"hook_name,omitempty"`
	// opaque data to be interpreted by the hook (passed in as arg)
	HookData []byte `protobuf:"bytes,2,opt,name=hook_data,json=hookData,proto3" json:"hook_data,omitempty"`
}

func (m *CompletionHook) Reset()         { *m = CompletionHook{} }
func (m *CompletionHook) String() string { return proto.CompactTextString(m) }
func (*CompletionHook) ProtoMessage()    {}
func (*CompletionHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e611a1149de0a, []int{0}
}
func (m *CompletionHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompletionHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompletionHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompletionHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompletionHook.Merge(m, src)
}
func (m *CompletionHook) XXX_Size() int {
	return m.Size()
}
func (m *CompletionHook) XXX_DiscardUnknown() {
	xxx_messageInfo_CompletionHook.DiscardUnknown(m)
}

var xxx_messageInfo_CompletionHook proto.InternalMessageInfo

func (m *CompletionHook) GetHookName() string {
	if m != nil {
		return m.HookName
	}
	return ""
}

func (m *CompletionHook) GetHookData() []byte {
	if m != nil {
		return m.HookData
	}
	return nil
}

func init() {
	proto.RegisterType((*CompletionHook)(nil), "dymensionxyz.dymension.transfer.CompletionHook")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/transfer/completion_hook.proto", fileDescriptor_b24e611a1149de0a)
}

var fileDescriptor_b24e611a1149de0a = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4d, 0xa9, 0xcc, 0x4d,
	0xcd, 0x2b, 0xce, 0xcc, 0xcf, 0xab, 0xa8, 0xac, 0xd2, 0x87, 0x73, 0xf4, 0x4b, 0x8a, 0x12, 0xf3,
	0x8a, 0xd3, 0x52, 0x8b, 0xf4, 0x93, 0xf3, 0x73, 0x0b, 0x72, 0x52, 0x4b, 0x32, 0xf3, 0xf3, 0xe2,
	0x33, 0xf2, 0xf3, 0xb3, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xe4, 0x91, 0xb5, 0xe9, 0xc1,
	0x39, 0x7a, 0x30, 0x6d, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0xb5, 0xfa, 0x20, 0x16, 0x44,
	0x9b, 0x92, 0x17, 0x17, 0x9f, 0x33, 0xdc, 0x3c, 0x8f, 0xfc, 0xfc, 0x6c, 0x21, 0x69, 0x2e, 0x4e,
	0x90, 0xb1, 0xf1, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x1c, 0x20,
	0x01, 0xbf, 0xc4, 0xdc, 0x54, 0xb8, 0x64, 0x4a, 0x62, 0x49, 0xa2, 0x04, 0x93, 0x02, 0xa3, 0x06,
	0x0f, 0x44, 0xd2, 0x25, 0xb1, 0x24, 0xd1, 0xc9, 0xff, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4,
	0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f,
	0xe5, 0x18, 0xa2, 0x4c, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x71,
	0x78, 0xaf, 0xcc, 0x58, 0xbf, 0x02, 0xe1, 0xc7, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0,
	0x1b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xf1, 0xdb, 0x5c, 0x13, 0x01, 0x00, 0x00,
}

func (m *CompletionHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompletionHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompletionHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HookData) > 0 {
		i -= len(m.HookData)
		copy(dAtA[i:], m.HookData)
		i = encodeVarintCompletionHook(dAtA, i, uint64(len(m.HookData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HookName) > 0 {
		i -= len(m.HookName)
		copy(dAtA[i:], m.HookName)
		i = encodeVarintCompletionHook(dAtA, i, uint64(len(m.HookName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCompletionHook(dAtA []byte, offset int, v uint64) int {
	offset -= sovCompletionHook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CompletionHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HookName)
	if l > 0 {
		n += 1 + l + sovCompletionHook(uint64(l))
	}
	l = len(m.HookData)
	if l > 0 {
		n += 1 + l + sovCompletionHook(uint64(l))
	}
	return n
}

func sovCompletionHook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCompletionHook(x uint64) (n int) {
	return sovCompletionHook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CompletionHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompletionHook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompletionHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompletionHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompletionHook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompletionHook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompletionHook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HookName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompletionHook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCompletionHook
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCompletionHook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HookData = append(m.HookData[:0], dAtA[iNdEx:postIndex]...)
			if m.HookData == nil {
				m.HookData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompletionHook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompletionHook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompletionHook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompletionHook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompletionHook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompletionHook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCompletionHook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCompletionHook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCompletionHook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCompletionHook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompletionHook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCompletionHook = fmt.Errorf("proto: unexpected end of group")
)
