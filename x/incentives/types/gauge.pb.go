// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/incentives/gauge.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/dymensionxyz/dymension/v3/x/lockup/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Gauge is an object that stores and distributes yields to recipients who
// satisfy certain conditions. Currently gauges support conditions around the
// duration for which a given denom is locked.
type Gauge struct {
	// id is the unique ID of a Gauge
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// is_perpetual is a flag to show if it's a perpetual or non-perpetual gauge
	// Non-perpetual gauges distribute their tokens equally per epoch while the
	// gauge is in the active period. Perpetual gauges distribute all their tokens
	// at a single time and only distribute their tokens again once the gauge is
	// refilled, Intended for use with incentives that get refilled daily.
	IsPerpetual bool `protobuf:"varint,2,opt,name=is_perpetual,json=isPerpetual,proto3" json:"is_perpetual,omitempty"`
	// distribute_to is where the gauge rewards are distributed to
	//
	// Types that are valid to be assigned to DistributeTo:
	//	*Gauge_Asset
	//	*Gauge_Rollapp
	//	*Gauge_Endorsement
	DistributeTo isGauge_DistributeTo `protobuf_oneof:"distribute_to"`
	// coins is the total amount of coins that have been in the gauge
	// Can distribute multiple coin denoms
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
	// start_time is the distribution start time
	StartTime time.Time `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// num_epochs_paid_over is the number of total epochs distribution will be
	// completed over
	NumEpochsPaidOver uint64 `protobuf:"varint,6,opt,name=num_epochs_paid_over,json=numEpochsPaidOver,proto3" json:"num_epochs_paid_over,omitempty"`
	// filled_epochs is the number of epochs distribution has been completed on
	// already
	FilledEpochs uint64 `protobuf:"varint,7,opt,name=filled_epochs,json=filledEpochs,proto3" json:"filled_epochs,omitempty"`
	// distributed_coins are coins that have been distributed already
	DistributedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=distributed_coins,json=distributedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"distributed_coins"`
}

func (m *Gauge) Reset()         { *m = Gauge{} }
func (m *Gauge) String() string { return proto.CompactTextString(m) }
func (*Gauge) ProtoMessage()    {}
func (*Gauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_2589c173eab867e4, []int{0}
}
func (m *Gauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gauge.Merge(m, src)
}
func (m *Gauge) XXX_Size() int {
	return m.Size()
}
func (m *Gauge) XXX_DiscardUnknown() {
	xxx_messageInfo_Gauge.DiscardUnknown(m)
}

var xxx_messageInfo_Gauge proto.InternalMessageInfo

type isGauge_DistributeTo interface {
	isGauge_DistributeTo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Gauge_Asset struct {
	Asset *types.QueryCondition `protobuf:"bytes,3,opt,name=asset,proto3,oneof" json:"asset,omitempty"`
}
type Gauge_Rollapp struct {
	Rollapp *RollappGauge `protobuf:"bytes,9,opt,name=rollapp,proto3,oneof" json:"rollapp,omitempty"`
}
type Gauge_Endorsement struct {
	Endorsement *EndorsementGauge `protobuf:"bytes,10,opt,name=endorsement,proto3,oneof" json:"endorsement,omitempty"`
}

func (*Gauge_Asset) isGauge_DistributeTo()       {}
func (*Gauge_Rollapp) isGauge_DistributeTo()     {}
func (*Gauge_Endorsement) isGauge_DistributeTo() {}

func (m *Gauge) GetDistributeTo() isGauge_DistributeTo {
	if m != nil {
		return m.DistributeTo
	}
	return nil
}

func (m *Gauge) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Gauge) GetIsPerpetual() bool {
	if m != nil {
		return m.IsPerpetual
	}
	return false
}

func (m *Gauge) GetAsset() *types.QueryCondition {
	if x, ok := m.GetDistributeTo().(*Gauge_Asset); ok {
		return x.Asset
	}
	return nil
}

func (m *Gauge) GetRollapp() *RollappGauge {
	if x, ok := m.GetDistributeTo().(*Gauge_Rollapp); ok {
		return x.Rollapp
	}
	return nil
}

func (m *Gauge) GetEndorsement() *EndorsementGauge {
	if x, ok := m.GetDistributeTo().(*Gauge_Endorsement); ok {
		return x.Endorsement
	}
	return nil
}

func (m *Gauge) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *Gauge) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Gauge) GetNumEpochsPaidOver() uint64 {
	if m != nil {
		return m.NumEpochsPaidOver
	}
	return 0
}

func (m *Gauge) GetFilledEpochs() uint64 {
	if m != nil {
		return m.FilledEpochs
	}
	return 0
}

func (m *Gauge) GetDistributedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.DistributedCoins
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Gauge) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Gauge_Asset)(nil),
		(*Gauge_Rollapp)(nil),
		(*Gauge_Endorsement)(nil),
	}
}

type LockableDurationsInfo struct {
	// List of incentivised durations that gauges will pay out to
	LockableDurations []time.Duration `protobuf:"bytes,1,rep,name=lockable_durations,json=lockableDurations,proto3,stdduration" json:"lockable_durations" yaml:"lockable_durations"`
}

func (m *LockableDurationsInfo) Reset()         { *m = LockableDurationsInfo{} }
func (m *LockableDurationsInfo) String() string { return proto.CompactTextString(m) }
func (*LockableDurationsInfo) ProtoMessage()    {}
func (*LockableDurationsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2589c173eab867e4, []int{1}
}
func (m *LockableDurationsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockableDurationsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockableDurationsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockableDurationsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockableDurationsInfo.Merge(m, src)
}
func (m *LockableDurationsInfo) XXX_Size() int {
	return m.Size()
}
func (m *LockableDurationsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LockableDurationsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LockableDurationsInfo proto.InternalMessageInfo

func (m *LockableDurationsInfo) GetLockableDurations() []time.Duration {
	if m != nil {
		return m.LockableDurations
	}
	return nil
}

type RollappGauge struct {
	RollappId string `protobuf:"bytes,1,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
}

func (m *RollappGauge) Reset()         { *m = RollappGauge{} }
func (m *RollappGauge) String() string { return proto.CompactTextString(m) }
func (*RollappGauge) ProtoMessage()    {}
func (*RollappGauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_2589c173eab867e4, []int{2}
}
func (m *RollappGauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollappGauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollappGauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollappGauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollappGauge.Merge(m, src)
}
func (m *RollappGauge) XXX_Size() int {
	return m.Size()
}
func (m *RollappGauge) XXX_DiscardUnknown() {
	xxx_messageInfo_RollappGauge.DiscardUnknown(m)
}

var xxx_messageInfo_RollappGauge proto.InternalMessageInfo

func (m *RollappGauge) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

type EndorsementGauge struct {
	RollappId string `protobuf:"bytes,1,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// epoch_rewards are coins that have been unlocked and can be claimed during
	// this epoch
	EpochRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=epoch_rewards,json=epochRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"epoch_rewards"`
}

func (m *EndorsementGauge) Reset()         { *m = EndorsementGauge{} }
func (m *EndorsementGauge) String() string { return proto.CompactTextString(m) }
func (*EndorsementGauge) ProtoMessage()    {}
func (*EndorsementGauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_2589c173eab867e4, []int{3}
}
func (m *EndorsementGauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndorsementGauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndorsementGauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndorsementGauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndorsementGauge.Merge(m, src)
}
func (m *EndorsementGauge) XXX_Size() int {
	return m.Size()
}
func (m *EndorsementGauge) XXX_DiscardUnknown() {
	xxx_messageInfo_EndorsementGauge.DiscardUnknown(m)
}

var xxx_messageInfo_EndorsementGauge proto.InternalMessageInfo

func (m *EndorsementGauge) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *EndorsementGauge) GetEpochRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.EpochRewards
	}
	return nil
}

func init() {
	proto.RegisterType((*Gauge)(nil), "dymensionxyz.dymension.incentives.Gauge")
	proto.RegisterType((*LockableDurationsInfo)(nil), "dymensionxyz.dymension.incentives.LockableDurationsInfo")
	proto.RegisterType((*RollappGauge)(nil), "dymensionxyz.dymension.incentives.RollappGauge")
	proto.RegisterType((*EndorsementGauge)(nil), "dymensionxyz.dymension.incentives.EndorsementGauge")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/incentives/gauge.proto", fileDescriptor_2589c173eab867e4)
}

var fileDescriptor_2589c173eab867e4 = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x4f, 0xdb, 0x3c,
	0x18, 0x6e, 0x0a, 0x05, 0xea, 0x96, 0xef, 0xa3, 0x16, 0x9f, 0x14, 0x90, 0x68, 0x4b, 0x3f, 0x4d,
	0xea, 0xa5, 0xf6, 0x80, 0xc3, 0xa4, 0x1d, 0xcb, 0xd0, 0x40, 0x9b, 0x34, 0x88, 0x26, 0x6d, 0xda,
	0x25, 0x72, 0x62, 0x13, 0x2c, 0x92, 0x38, 0x8a, 0x9d, 0x8e, 0xee, 0x17, 0xec, 0xc8, 0x71, 0xf7,
	0xdd, 0xf6, 0x3f, 0x26, 0x71, 0xe4, 0xb8, 0x13, 0x4c, 0xf0, 0x0f, 0xf6, 0x0b, 0xa6, 0xd8, 0x09,
	0xad, 0x3a, 0x21, 0x76, 0xe0, 0x94, 0xf8, 0x7d, 0xdf, 0xe7, 0x79, 0xed, 0xe7, 0x79, 0x6d, 0x30,
	0xa0, 0xe3, 0x88, 0xc5, 0x92, 0x8b, 0xf8, 0x6c, 0xfc, 0x09, 0xdf, 0x2d, 0x30, 0x8f, 0x7d, 0x16,
	0x2b, 0x3e, 0x62, 0x12, 0x07, 0x24, 0x0b, 0x18, 0x4a, 0x52, 0xa1, 0x04, 0xdc, 0x9c, 0x2e, 0x47,
	0x77, 0x0b, 0x34, 0x29, 0x5f, 0x5f, 0x0d, 0x44, 0x20, 0x74, 0x35, 0xce, 0xff, 0x0c, 0x70, 0xbd,
	0x1d, 0x08, 0x11, 0x84, 0x0c, 0xeb, 0x95, 0x97, 0x1d, 0x63, 0x9a, 0xa5, 0x44, 0xe5, 0x50, 0x93,
	0xef, 0xcc, 0xe6, 0x15, 0x8f, 0x98, 0x54, 0x24, 0x4a, 0x4a, 0x02, 0x5f, 0xc8, 0x48, 0x48, 0xec,
	0x11, 0xc9, 0xf0, 0x68, 0xcb, 0x63, 0x8a, 0x6c, 0x61, 0x5f, 0xf0, 0x92, 0xa0, 0x7f, 0xcf, 0x41,
	0x42, 0xe1, 0x9f, 0x66, 0x89, 0xfe, 0x98, 0xca, 0xde, 0xf7, 0x1a, 0xa8, 0xbd, 0xcc, 0xcf, 0x04,
	0xff, 0x01, 0x55, 0x4e, 0x6d, 0xab, 0x6b, 0xf5, 0xe7, 0x9d, 0x2a, 0xa7, 0x70, 0x13, 0x34, 0xb9,
	0x74, 0x13, 0x96, 0x26, 0x4c, 0x65, 0x24, 0xb4, 0xab, 0x5d, 0xab, 0xbf, 0xe4, 0x34, 0xb8, 0x3c,
	0x2c, 0x43, 0x70, 0x0f, 0xd4, 0x88, 0x94, 0x4c, 0xd9, 0x73, 0x5d, 0xab, 0xdf, 0xd8, 0x1e, 0xa0,
	0x7b, 0x04, 0x31, 0x6d, 0xd1, 0x51, 0xc6, 0xd2, 0xf1, 0xae, 0x88, 0x29, 0xcf, 0xcf, 0xba, 0x5f,
	0x71, 0x0c, 0x1a, 0xbe, 0x02, 0x8b, 0xa9, 0x08, 0x43, 0x92, 0x24, 0x76, 0x5d, 0x13, 0x61, 0xf4,
	0xa0, 0xb2, 0xc8, 0x31, 0x08, 0xbd, 0xf7, 0xfd, 0x8a, 0x53, 0x32, 0xc0, 0x77, 0xa0, 0xc1, 0x62,
	0x2a, 0x52, 0xc9, 0x22, 0x16, 0x2b, 0x1b, 0x68, 0xc2, 0x9d, 0xbf, 0x20, 0xdc, 0x9b, 0xa0, 0x4a,
	0xd2, 0x69, 0x26, 0x48, 0x40, 0x2d, 0x57, 0x58, 0xda, 0xf3, 0xdd, 0xb9, 0x7e, 0x63, 0x7b, 0x0d,
	0x19, 0x0f, 0x50, 0xee, 0x01, 0x2a, 0x3c, 0x40, 0xbb, 0x82, 0xc7, 0xc3, 0xa7, 0x17, 0x57, 0x9d,
	0xca, 0xb7, 0xeb, 0x4e, 0x3f, 0xe0, 0xea, 0x24, 0xf3, 0x90, 0x2f, 0x22, 0x5c, 0x18, 0x66, 0x3e,
	0x03, 0x49, 0x4f, 0xb1, 0x1a, 0x27, 0x4c, 0x6a, 0x80, 0x74, 0x0c, 0x33, 0x7c, 0x0f, 0x80, 0x54,
	0x24, 0x55, 0x6e, 0xee, 0xb7, 0x5d, 0xd3, 0x5b, 0x5f, 0x47, 0x66, 0x18, 0x50, 0x39, 0x0c, 0xe8,
	0x6d, 0x39, 0x0c, 0xc3, 0x8d, 0xbc, 0xd1, 0xaf, 0xab, 0x4e, 0x6b, 0x4c, 0xa2, 0xf0, 0x79, 0x6f,
	0x82, 0xed, 0x9d, 0x5f, 0x77, 0x2c, 0xa7, 0xae, 0x03, 0x79, 0x39, 0xc4, 0x60, 0x35, 0xce, 0x22,
	0x97, 0x25, 0xc2, 0x3f, 0x91, 0x6e, 0x42, 0x38, 0x75, 0xc5, 0x88, 0xa5, 0xf6, 0x82, 0xb6, 0xbb,
	0x15, 0x67, 0xd1, 0x9e, 0x4e, 0x1d, 0x12, 0x4e, 0xdf, 0x8c, 0x58, 0x0a, 0xff, 0x07, 0xcb, 0xc7,
	0x3c, 0x0c, 0x19, 0x2d, 0x30, 0xf6, 0xa2, 0xae, 0x6c, 0x9a, 0xa0, 0x29, 0x86, 0x67, 0xa0, 0x45,
	0xb9, 0x54, 0x29, 0xf7, 0x32, 0xc5, 0xa8, 0x6b, 0xe4, 0x59, 0x7a, 0x7c, 0x79, 0x56, 0xa6, 0xba,
	0xe8, 0xc8, 0xf0, 0x5f, 0xb0, 0x3c, 0x89, 0xb9, 0x4a, 0xf4, 0x3e, 0x5b, 0xe0, 0xbf, 0xd7, 0xc2,
	0x3f, 0x25, 0x5e, 0xc8, 0x5e, 0x14, 0xb7, 0x49, 0x1e, 0xc4, 0xc7, 0x02, 0x0a, 0x00, 0xc3, 0x22,
	0xe1, 0x96, 0xf7, 0x4c, 0xda, 0x56, 0xb1, 0xcb, 0x59, 0x71, 0x4b, 0xec, 0xf0, 0x49, 0xa1, 0xed,
	0x9a, 0xd1, 0xf6, 0x4f, 0x8a, 0xde, 0x97, 0x5c, 0xe3, 0x56, 0x38, 0xdb, 0xb4, 0x37, 0x00, 0xcd,
	0xe9, 0xe1, 0x84, 0x1b, 0x00, 0x14, 0xc3, 0xe9, 0x16, 0x17, 0xac, 0xee, 0xd4, 0x8b, 0xc8, 0x01,
	0xed, 0x7d, 0xb5, 0xc0, 0xca, 0xec, 0xec, 0x3d, 0x80, 0x81, 0x09, 0x58, 0xd6, 0xb6, 0xb8, 0x29,
	0xfb, 0x48, 0x52, 0x2a, 0xed, 0xea, 0xe3, 0x8b, 0xde, 0xd4, 0x1d, 0x1c, 0xd3, 0x60, 0x78, 0x74,
	0x71, 0xd3, 0xb6, 0x2e, 0x6f, 0xda, 0xd6, 0xcf, 0x9b, 0xb6, 0x75, 0x7e, 0xdb, 0xae, 0x5c, 0xde,
	0xb6, 0x2b, 0x3f, 0x6e, 0xdb, 0x95, 0x0f, 0xcf, 0xa6, 0x18, 0xef, 0x79, 0x76, 0x46, 0x3b, 0xf8,
	0x6c, 0xfa, 0x11, 0xd5, 0x6d, 0xbc, 0x05, 0x2d, 0xfa, 0xce, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xfa, 0x67, 0xed, 0x1a, 0x76, 0x05, 0x00, 0x00,
}

func (m *Gauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DistributeTo != nil {
		{
			size := m.DistributeTo.Size()
			i -= size
			if _, err := m.DistributeTo.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DistributedCoins) > 0 {
		for iNdEx := len(m.DistributedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGauge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.FilledEpochs != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.FilledEpochs))
		i--
		dAtA[i] = 0x38
	}
	if m.NumEpochsPaidOver != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.NumEpochsPaidOver))
		i--
		dAtA[i] = 0x30
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGauge(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGauge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.IsPerpetual {
		i--
		if m.IsPerpetual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Gauge_Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gauge_Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Gauge_Rollapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gauge_Rollapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rollapp != nil {
		{
			size, err := m.Rollapp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Gauge_Endorsement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gauge_Endorsement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Endorsement != nil {
		{
			size, err := m.Endorsement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *LockableDurationsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockableDurationsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockableDurationsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockableDurations) > 0 {
		for iNdEx := len(m.LockableDurations) - 1; iNdEx >= 0; iNdEx-- {
			n, err := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.LockableDurations[iNdEx], dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.LockableDurations[iNdEx]):])
			if err != nil {
				return 0, err
			}
			i -= n
			i = encodeVarintGauge(dAtA, i, uint64(n))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RollappGauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollappGauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollappGauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintGauge(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndorsementGauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndorsementGauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndorsementGauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochRewards) > 0 {
		for iNdEx := len(m.EpochRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGauge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintGauge(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGauge(dAtA []byte, offset int, v uint64) int {
	offset -= sovGauge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Gauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGauge(uint64(m.Id))
	}
	if m.IsPerpetual {
		n += 2
	}
	if m.DistributeTo != nil {
		n += m.DistributeTo.Size()
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovGauge(uint64(l))
	if m.NumEpochsPaidOver != 0 {
		n += 1 + sovGauge(uint64(m.NumEpochsPaidOver))
	}
	if m.FilledEpochs != 0 {
		n += 1 + sovGauge(uint64(m.FilledEpochs))
	}
	if len(m.DistributedCoins) > 0 {
		for _, e := range m.DistributedCoins {
			l = e.Size()
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	return n
}

func (m *Gauge_Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}
func (m *Gauge_Rollapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rollapp != nil {
		l = m.Rollapp.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}
func (m *Gauge_Endorsement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Endorsement != nil {
		l = m.Endorsement.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}
func (m *LockableDurationsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockableDurations) > 0 {
		for _, e := range m.LockableDurations {
			l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(e)
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	return n
}

func (m *RollappGauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}

func (m *EndorsementGauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovGauge(uint64(l))
	}
	if len(m.EpochRewards) > 0 {
		for _, e := range m.EpochRewards {
			l = e.Size()
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	return n
}

func sovGauge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGauge(x uint64) (n int) {
	return sovGauge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Gauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPerpetual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPerpetual = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.QueryCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DistributeTo = &Gauge_Asset{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types1.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochsPaidOver", wireType)
			}
			m.NumEpochsPaidOver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochsPaidOver |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledEpochs", wireType)
			}
			m.FilledEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilledEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributedCoins = append(m.DistributedCoins, types1.Coin{})
			if err := m.DistributedCoins[len(m.DistributedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollapp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RollappGauge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DistributeTo = &Gauge_Rollapp{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endorsement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EndorsementGauge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DistributeTo = &Gauge_Endorsement{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockableDurationsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockableDurationsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockableDurationsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockableDurations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockableDurations = append(m.LockableDurations, time.Duration(0))
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&(m.LockableDurations[len(m.LockableDurations)-1]), dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollappGauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollappGauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollappGauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndorsementGauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndorsementGauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndorsementGauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochRewards = append(m.EpochRewards, types1.Coin{})
			if err := m.EpochRewards[len(m.EpochRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGauge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGauge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGauge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGauge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGauge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGauge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGauge = fmt.Errorf("proto: unexpected end of group")
)
