// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/incentives/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/dymensionxyz/dymension/v3/x/lockup/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Enum to specify the type of distribution
type GaugeType int32

const (
	GaugeType_GAUGE_TYPE_UNSPECIFIED GaugeType = 0
	GaugeType_GAUGE_TYPE_ASSET       GaugeType = 1
	GaugeType_GAUGE_TYPE_ENDORSEMENT GaugeType = 2
)

var GaugeType_name = map[int32]string{
	0: "GAUGE_TYPE_UNSPECIFIED",
	1: "GAUGE_TYPE_ASSET",
	2: "GAUGE_TYPE_ENDORSEMENT",
}

var GaugeType_value = map[string]int32{
	"GAUGE_TYPE_UNSPECIFIED": 0,
	"GAUGE_TYPE_ASSET":       1,
	"GAUGE_TYPE_ENDORSEMENT": 2,
}

func (x GaugeType) String() string {
	return proto.EnumName(GaugeType_name, int32(x))
}

func (GaugeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b43ff6915a3f83ca, []int{0}
}

// MsgUpdateParams allows to update module params.
type MsgUpdateParams struct {
	// Authority is the address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NewParams should be fully populated.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43ff6915a3f83ca, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43ff6915a3f83ca, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgCreateGauge creates a gague to distribute rewards to users
type MsgCreateGauge struct {
	// is_perpetual shows if it's a perpetual or non-perpetual gauge
	// Non-perpetual gauges distribute their tokens equally per epoch while the
	// gauge is in the active period. Perpetual gauges distribute all their tokens
	// at a single time and only distribute their tokens again once the gauge is
	// refilled
	IsPerpetual bool `protobuf:"varint,1,opt,name=is_perpetual,json=isPerpetual,proto3" json:"is_perpetual,omitempty"`
	// owner is the address of gauge creator
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	// distribute_to_type specifies which field is used for distribution
	GaugeType GaugeType `protobuf:"varint,3,opt,name=gauge_type,json=gaugeType,proto3,enum=dymensionxyz.dymension.incentives.GaugeType" json:"gauge_type,omitempty"`
	// asset is used if gauge_type is GAUGE_TYPE_ASSET
	Asset *types.QueryCondition `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// endorsement is used if gauge_type is GAUGE_TYPE_ENDORSEMENT
	Endorsement *EndorsementGauge `protobuf:"bytes,5,opt,name=endorsement,proto3" json:"endorsement,omitempty"`
	// coins are coin(s) to be distributed by the gauge
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
	// start_time is the distribution start time
	StartTime time.Time `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"timestamp"`
	// num_epochs_paid_over is the number of epochs distribution will be completed
	// over
	NumEpochsPaidOver uint64 `protobuf:"varint,8,opt,name=num_epochs_paid_over,json=numEpochsPaidOver,proto3" json:"num_epochs_paid_over,omitempty"`
}

func (m *MsgCreateGauge) Reset()         { *m = MsgCreateGauge{} }
func (m *MsgCreateGauge) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGauge) ProtoMessage()    {}
func (*MsgCreateGauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43ff6915a3f83ca, []int{2}
}
func (m *MsgCreateGauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGauge.Merge(m, src)
}
func (m *MsgCreateGauge) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGauge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGauge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGauge proto.InternalMessageInfo

func (m *MsgCreateGauge) GetIsPerpetual() bool {
	if m != nil {
		return m.IsPerpetual
	}
	return false
}

func (m *MsgCreateGauge) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCreateGauge) GetGaugeType() GaugeType {
	if m != nil {
		return m.GaugeType
	}
	return GaugeType_GAUGE_TYPE_UNSPECIFIED
}

func (m *MsgCreateGauge) GetAsset() *types.QueryCondition {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *MsgCreateGauge) GetEndorsement() *EndorsementGauge {
	if m != nil {
		return m.Endorsement
	}
	return nil
}

func (m *MsgCreateGauge) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *MsgCreateGauge) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *MsgCreateGauge) GetNumEpochsPaidOver() uint64 {
	if m != nil {
		return m.NumEpochsPaidOver
	}
	return 0
}

type MsgCreateGaugeResponse struct {
}

func (m *MsgCreateGaugeResponse) Reset()         { *m = MsgCreateGaugeResponse{} }
func (m *MsgCreateGaugeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGaugeResponse) ProtoMessage()    {}
func (*MsgCreateGaugeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43ff6915a3f83ca, []int{3}
}
func (m *MsgCreateGaugeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGaugeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGaugeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGaugeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGaugeResponse.Merge(m, src)
}
func (m *MsgCreateGaugeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGaugeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGaugeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGaugeResponse proto.InternalMessageInfo

// MsgAddToGauge adds coins to a previously created gauge
type MsgAddToGauge struct {
	// owner is the gauge owner's address
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	// gauge_id is the ID of gauge that rewards are getting added to
	GaugeId uint64 `protobuf:"varint,2,opt,name=gauge_id,json=gaugeId,proto3" json:"gauge_id,omitempty"`
	// rewards are the coin(s) to add to gauge
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
}

func (m *MsgAddToGauge) Reset()         { *m = MsgAddToGauge{} }
func (m *MsgAddToGauge) String() string { return proto.CompactTextString(m) }
func (*MsgAddToGauge) ProtoMessage()    {}
func (*MsgAddToGauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43ff6915a3f83ca, []int{4}
}
func (m *MsgAddToGauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToGauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToGauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToGauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToGauge.Merge(m, src)
}
func (m *MsgAddToGauge) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToGauge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToGauge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToGauge proto.InternalMessageInfo

func (m *MsgAddToGauge) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgAddToGauge) GetGaugeId() uint64 {
	if m != nil {
		return m.GaugeId
	}
	return 0
}

func (m *MsgAddToGauge) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type MsgAddToGaugeResponse struct {
}

func (m *MsgAddToGaugeResponse) Reset()         { *m = MsgAddToGaugeResponse{} }
func (m *MsgAddToGaugeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddToGaugeResponse) ProtoMessage()    {}
func (*MsgAddToGaugeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43ff6915a3f83ca, []int{5}
}
func (m *MsgAddToGaugeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToGaugeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToGaugeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToGaugeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToGaugeResponse.Merge(m, src)
}
func (m *MsgAddToGaugeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToGaugeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToGaugeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToGaugeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("dymensionxyz.dymension.incentives.GaugeType", GaugeType_name, GaugeType_value)
	proto.RegisterType((*MsgUpdateParams)(nil), "dymensionxyz.dymension.incentives.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "dymensionxyz.dymension.incentives.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateGauge)(nil), "dymensionxyz.dymension.incentives.MsgCreateGauge")
	proto.RegisterType((*MsgCreateGaugeResponse)(nil), "dymensionxyz.dymension.incentives.MsgCreateGaugeResponse")
	proto.RegisterType((*MsgAddToGauge)(nil), "dymensionxyz.dymension.incentives.MsgAddToGauge")
	proto.RegisterType((*MsgAddToGaugeResponse)(nil), "dymensionxyz.dymension.incentives.MsgAddToGaugeResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/incentives/tx.proto", fileDescriptor_b43ff6915a3f83ca)
}

var fileDescriptor_b43ff6915a3f83ca = []byte{
	// 860 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x23, 0xc9, 0xb6, 0x56, 0xae, 0xab, 0x2e, 0xdc, 0x98, 0x26, 0x0a, 0x49, 0xd1, 0xa1,
	0x50, 0x8d, 0x9a, 0x8c, 0x64, 0xa0, 0x3f, 0xba, 0x49, 0x0a, 0x2b, 0x18, 0x85, 0x1c, 0x85, 0x92,
	0x50, 0xa4, 0x17, 0x62, 0x25, 0x6e, 0xe9, 0x45, 0x44, 0x2e, 0xc1, 0x5d, 0x2a, 0x52, 0x0b, 0x14,
	0x45, 0xfb, 0x02, 0x79, 0x86, 0x1e, 0x7b, 0xca, 0xa1, 0xd7, 0x1e, 0x0b, 0xe4, 0x18, 0xf4, 0xd4,
	0x93, 0x53, 0xd8, 0x87, 0xdc, 0xf3, 0x04, 0x05, 0x97, 0xa4, 0x7e, 0x0c, 0xb8, 0x96, 0x81, 0x9e,
	0x96, 0xc3, 0x99, 0xef, 0x9b, 0x99, 0x9d, 0x6f, 0x48, 0x70, 0x64, 0xcd, 0x1d, 0xec, 0x32, 0x42,
	0xdd, 0xd9, 0xfc, 0x7b, 0x6d, 0x61, 0x68, 0xc4, 0x1d, 0x63, 0x97, 0x93, 0x29, 0x66, 0x1a, 0x9f,
	0xa9, 0x9e, 0x4f, 0x39, 0x85, 0x0f, 0x56, 0x63, 0xd5, 0x85, 0xa1, 0x2e, 0x63, 0x95, 0x7d, 0x9b,
	0xda, 0x54, 0x44, 0x6b, 0xe1, 0x53, 0x04, 0x54, 0x4a, 0x36, 0xa5, 0xf6, 0x04, 0x6b, 0xc2, 0x1a,
	0x05, 0xdf, 0x69, 0x9c, 0x38, 0x98, 0x71, 0xe4, 0x78, 0x71, 0x40, 0x71, 0x4c, 0x99, 0x43, 0x99,
	0x36, 0x42, 0x0c, 0x6b, 0xd3, 0xda, 0x08, 0x73, 0x54, 0xd3, 0xc6, 0x94, 0xb8, 0xb1, 0xff, 0x20,
	0xf6, 0x3b, 0xcc, 0xd6, 0xa6, 0xb5, 0xf0, 0x88, 0x1d, 0x87, 0x91, 0xc3, 0x8c, 0x52, 0x46, 0x46,
	0xec, 0x3a, 0xbe, 0xbd, 0x33, 0x1b, 0x05, 0x36, 0x8e, 0xc3, 0xab, 0x37, 0x84, 0x4f, 0xe8, 0xf8,
	0x59, 0xe0, 0x89, 0x23, 0x8e, 0x54, 0x6f, 0x27, 0xf6, 0x90, 0x8f, 0x9c, 0xb8, 0x90, 0xca, 0xaf,
	0x12, 0x78, 0xbf, 0xcb, 0xec, 0xa1, 0x67, 0x21, 0x8e, 0x7b, 0xc2, 0x03, 0x3f, 0x03, 0x39, 0x14,
	0xf0, 0x73, 0xea, 0x13, 0x3e, 0x97, 0xa5, 0xb2, 0x54, 0xcd, 0xb5, 0xe4, 0xbf, 0x7e, 0x3f, 0xde,
	0x8f, 0x3b, 0x68, 0x5a, 0x96, 0x8f, 0x19, 0xeb, 0x73, 0x9f, 0xb8, 0xb6, 0xb1, 0x0c, 0x85, 0x1d,
	0xb0, 0x15, 0x71, 0xcb, 0xf7, 0xca, 0x52, 0x35, 0x5f, 0xff, 0x44, 0xbd, 0x75, 0x26, 0x6a, 0x94,
	0xb2, 0x95, 0x79, 0x75, 0x51, 0x4a, 0x19, 0x31, 0xbc, 0xb1, 0xf7, 0xf3, 0xdb, 0x97, 0x47, 0x4b,
	0xe2, 0xca, 0x21, 0x38, 0xb8, 0x56, 0xa3, 0x81, 0x99, 0x47, 0x5d, 0x86, 0x2b, 0x7f, 0x64, 0xc0,
	0x5e, 0x97, 0xd9, 0x6d, 0x1f, 0x23, 0x8e, 0x3b, 0xe1, 0x95, 0xc1, 0x07, 0x60, 0x97, 0x30, 0xd3,
	0xc3, 0xbe, 0x87, 0x79, 0x80, 0x26, 0xa2, 0x83, 0x1d, 0x23, 0x4f, 0x58, 0x2f, 0x79, 0x05, 0x3f,
	0x06, 0x59, 0xfa, 0xdc, 0xc5, 0xbe, 0x28, 0x34, 0xd7, 0x2a, 0xbc, 0xbb, 0x28, 0xed, 0xce, 0x91,
	0x33, 0x69, 0x54, 0xc4, 0xeb, 0x8a, 0x11, 0xb9, 0xe1, 0xd7, 0x00, 0x88, 0x31, 0x98, 0x7c, 0xee,
	0x61, 0x39, 0x5d, 0x96, 0xaa, 0x7b, 0xf5, 0x4f, 0x37, 0xe8, 0x4a, 0x14, 0x32, 0x98, 0x7b, 0xd8,
	0xc8, 0xd9, 0xc9, 0x23, 0x6c, 0x83, 0x2c, 0x62, 0x0c, 0x73, 0x39, 0x23, 0x6e, 0xe7, 0xf8, 0x26,
	0x9e, 0x68, 0xa8, 0xea, 0x93, 0x00, 0xfb, 0xf3, 0x36, 0x75, 0x2d, 0xc2, 0x09, 0x75, 0x8d, 0x08,
	0x0b, 0x87, 0x20, 0x8f, 0x5d, 0x8b, 0xfa, 0x0c, 0x3b, 0xd8, 0xe5, 0x72, 0x56, 0x50, 0x9d, 0x6c,
	0x50, 0x92, 0xbe, 0x44, 0x89, 0xea, 0x8c, 0x55, 0x1e, 0x88, 0x40, 0x36, 0x54, 0x34, 0x93, 0xb7,
	0xca, 0xe9, 0x6a, 0xbe, 0x7e, 0xa8, 0xc6, 0xb3, 0x0e, 0x35, 0xaf, 0xc6, 0x9a, 0x57, 0xdb, 0x94,
	0xb8, 0xad, 0x87, 0xe1, 0xa4, 0x7e, 0x7b, 0x53, 0xaa, 0xda, 0x84, 0x9f, 0x07, 0x23, 0x75, 0x4c,
	0x9d, 0x58, 0xda, 0xf1, 0x71, 0xcc, 0xac, 0x67, 0x5a, 0x78, 0x5f, 0x4c, 0x00, 0x98, 0x11, 0x31,
	0xc3, 0x6f, 0x00, 0x60, 0x1c, 0xf9, 0xdc, 0x0c, 0xf7, 0x4b, 0xde, 0x16, 0x85, 0x2b, 0x6a, 0xb4,
	0x7c, 0x6a, 0xb2, 0x7c, 0xea, 0x20, 0x59, 0xbe, 0xd6, 0x47, 0x61, 0xa2, 0x77, 0x17, 0xa5, 0x42,
	0x34, 0x98, 0xc5, 0x56, 0x56, 0x5e, 0xbc, 0x29, 0x49, 0x46, 0x4e, 0x70, 0x85, 0xd1, 0x50, 0x03,
	0xfb, 0x6e, 0xe0, 0x98, 0xd8, 0xa3, 0xe3, 0x73, 0x66, 0x7a, 0x88, 0x58, 0x26, 0x9d, 0x62, 0x5f,
	0xde, 0x29, 0x4b, 0xd5, 0x8c, 0xf1, 0x81, 0x1b, 0x38, 0xba, 0x70, 0xf5, 0x10, 0xb1, 0x1e, 0x4f,
	0xb1, 0xdf, 0x00, 0xa1, 0xbc, 0xa2, 0x09, 0x57, 0x64, 0x70, 0x7f, 0x5d, 0x3e, 0x0b, 0x65, 0xfd,
	0x29, 0x81, 0xf7, 0xba, 0xcc, 0x6e, 0x5a, 0xd6, 0x80, 0x46, 0xc2, 0x5a, 0xa8, 0x46, 0xfa, 0x6f,
	0xd5, 0x1c, 0x82, 0x9d, 0x48, 0x35, 0xc4, 0x12, 0x02, 0xcb, 0x18, 0xdb, 0xc2, 0x3e, 0xb5, 0x20,
	0x06, 0xdb, 0x3e, 0x7e, 0x8e, 0x7c, 0x8b, 0xc9, 0xe9, 0xff, 0xff, 0xa6, 0x13, 0xee, 0xb5, 0x0e,
	0x0f, 0xc0, 0x87, 0x6b, 0x6d, 0x24, 0x0d, 0x1e, 0x3d, 0x05, 0xb9, 0x85, 0x4e, 0xa1, 0x02, 0xee,
	0x77, 0x9a, 0xc3, 0x8e, 0x6e, 0x0e, 0x9e, 0xf6, 0x74, 0x73, 0x78, 0xd6, 0xef, 0xe9, 0xed, 0xd3,
	0xaf, 0x4e, 0xf5, 0x47, 0x85, 0x14, 0xdc, 0x07, 0x85, 0x15, 0x5f, 0xb3, 0xdf, 0xd7, 0x07, 0x05,
	0xe9, 0x1a, 0x42, 0x3f, 0x7b, 0xf4, 0xd8, 0xe8, 0xeb, 0x5d, 0xfd, 0x6c, 0x50, 0xb8, 0x57, 0xff,
	0x25, 0x0d, 0xd2, 0x5d, 0x66, 0xc3, 0x1f, 0xc1, 0xee, 0xda, 0x97, 0xa5, 0xbe, 0x81, 0x50, 0xaf,
	0x6d, 0xba, 0xd2, 0xb8, 0x3b, 0x26, 0x69, 0x11, 0xfe, 0x00, 0xf2, 0xab, 0x5f, 0x86, 0xda, 0x66,
	0x54, 0x2b, 0x10, 0xe5, 0xcb, 0x3b, 0x43, 0x16, 0xc9, 0x67, 0x00, 0xac, 0x88, 0xe7, 0xe1, 0x66,
	0x44, 0x4b, 0x84, 0xf2, 0xc5, 0x5d, 0x11, 0x49, 0x66, 0x25, 0xfb, 0xd3, 0xdb, 0x97, 0x47, 0x52,
	0xeb, 0xc9, 0xab, 0xcb, 0xa2, 0xf4, 0xfa, 0xb2, 0x28, 0xfd, 0x73, 0x59, 0x94, 0x5e, 0x5c, 0x15,
	0x53, 0xaf, 0xaf, 0x8a, 0xa9, 0xbf, 0xaf, 0x8a, 0xa9, 0x6f, 0x3f, 0x5f, 0x91, 0xd4, 0x0d, 0x3f,
	0x8c, 0xe9, 0x89, 0x36, 0x5b, 0xfb, 0xd1, 0x86, 0x3a, 0x1b, 0x6d, 0x89, 0x45, 0x3d, 0xf9, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x50, 0x39, 0x8e, 0xa8, 0x9a, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams is used for updating module params.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateGauge(ctx context.Context, in *MsgCreateGauge, opts ...grpc.CallOption) (*MsgCreateGaugeResponse, error)
	AddToGauge(ctx context.Context, in *MsgAddToGauge, opts ...grpc.CallOption) (*MsgAddToGaugeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.incentives.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateGauge(ctx context.Context, in *MsgCreateGauge, opts ...grpc.CallOption) (*MsgCreateGaugeResponse, error) {
	out := new(MsgCreateGaugeResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.incentives.Msg/CreateGauge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddToGauge(ctx context.Context, in *MsgAddToGauge, opts ...grpc.CallOption) (*MsgAddToGaugeResponse, error) {
	out := new(MsgAddToGaugeResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.incentives.Msg/AddToGauge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams is used for updating module params.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateGauge(context.Context, *MsgCreateGauge) (*MsgCreateGaugeResponse, error)
	AddToGauge(context.Context, *MsgAddToGauge) (*MsgAddToGaugeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateGauge(ctx context.Context, req *MsgCreateGauge) (*MsgCreateGaugeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGauge not implemented")
}
func (*UnimplementedMsgServer) AddToGauge(ctx context.Context, req *MsgAddToGauge) (*MsgAddToGaugeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToGauge not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.incentives.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateGauge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGauge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGauge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.incentives.Msg/CreateGauge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGauge(ctx, req.(*MsgCreateGauge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddToGauge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddToGauge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddToGauge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.incentives.Msg/AddToGauge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddToGauge(ctx, req.(*MsgAddToGauge))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.incentives.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateGauge",
			Handler:    _Msg_CreateGauge_Handler,
		},
		{
			MethodName: "AddToGauge",
			Handler:    _Msg_AddToGauge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/incentives/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateGauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumEpochsPaidOver != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumEpochsPaidOver))
		i--
		dAtA[i] = 0x40
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTx(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x3a
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Endorsement != nil {
		{
			size, err := m.Endorsement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.GaugeType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GaugeType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsPerpetual {
		i--
		if m.IsPerpetual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateGaugeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGaugeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGaugeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddToGauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToGauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToGauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.GaugeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GaugeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddToGaugeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToGaugeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToGaugeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateGauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPerpetual {
		n += 2
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GaugeType != 0 {
		n += 1 + sovTx(uint64(m.GaugeType))
	}
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Endorsement != nil {
		l = m.Endorsement.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovTx(uint64(l))
	if m.NumEpochsPaidOver != 0 {
		n += 1 + sovTx(uint64(m.NumEpochsPaidOver))
	}
	return n
}

func (m *MsgCreateGaugeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddToGauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GaugeId != 0 {
		n += 1 + sovTx(uint64(m.GaugeId))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddToGaugeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPerpetual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPerpetual = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeType", wireType)
			}
			m.GaugeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeType |= GaugeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &types.QueryCondition{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endorsement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endorsement == nil {
				m.Endorsement = &EndorsementGauge{}
			}
			if err := m.Endorsement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types1.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochsPaidOver", wireType)
			}
			m.NumEpochsPaidOver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochsPaidOver |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGaugeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGaugeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGaugeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddToGauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToGauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToGauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeId", wireType)
			}
			m.GaugeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types1.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddToGaugeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToGaugeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToGaugeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
