// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/incentives/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params_EndorsementMode int32

const (
	Params_EndorsementModeRollapp       Params_EndorsementMode = 0
	Params_EndorsementModeRollappAndIRO Params_EndorsementMode = 1
)

var Params_EndorsementMode_name = map[int32]string{
	0: "EndorsementModeRollapp",
	1: "EndorsementModeRollappAndIRO",
}

var Params_EndorsementMode_value = map[string]int32{
	"EndorsementModeRollapp":       0,
	"EndorsementModeRollappAndIRO": 1,
}

func (x Params_EndorsementMode) String() string {
	return proto.EnumName(Params_EndorsementMode_name, int32(x))
}

func (Params_EndorsementMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_256a114c8e13cfa0, []int{0, 0}
}

// Params holds parameters for the incentives module
type Params struct {
	// distr_epoch_identifier is what epoch type distribution will be triggered by
	// (day, week, etc.)
	DistrEpochIdentifier string `protobuf:"bytes,1,opt,name=distr_epoch_identifier,json=distrEpochIdentifier,proto3" json:"distr_epoch_identifier,omitempty" yaml:"distr_epoch_identifier"`
	// CreateGaugeBaseFee is a base fee required to create a new gauge. The final
	// fee is calculated as
	// Fee = CreateGaugeBaseFee + AddDenomFee * (len(Denoms) + len(GaugeDenoms)).
	CreateGaugeBaseFee cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=create_gauge_base_fee,json=createGaugeBaseFee,proto3,customtype=cosmossdk.io/math.Int" json:"create_gauge_base_fee"`
	// AddToGaugeBaseFee is a base fee required to add to gauge. The final
	// fee is calculated as
	// Fee = AddToGaugeBaseFee + AddDenomFee * len(Denoms).
	AddToGaugeBaseFee cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=add_to_gauge_base_fee,json=addToGaugeBaseFee,proto3,customtype=cosmossdk.io/math.Int" json:"add_to_gauge_base_fee"`
	// AddDenomFee is a fee charged for adding every new denom to the gauge.
	AddDenomFee cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=add_denom_fee,json=addDenomFee,proto3,customtype=cosmossdk.io/math.Int" json:"add_denom_fee"`
	// EndorsementMode switches between endorsing only active Rollapps and endorsing both active Rollapps and IROs
	EndorsementMode Params_EndorsementMode `protobuf:"varint,5,opt,name=endorsement_mode,json=endorsementMode,proto3,enum=dymensionxyz.dymension.incentives.Params_EndorsementMode" json:"endorsement_mode,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_256a114c8e13cfa0, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDistrEpochIdentifier() string {
	if m != nil {
		return m.DistrEpochIdentifier
	}
	return ""
}

func (m *Params) GetEndorsementMode() Params_EndorsementMode {
	if m != nil {
		return m.EndorsementMode
	}
	return Params_EndorsementModeRollapp
}

func init() {
	proto.RegisterEnum("dymensionxyz.dymension.incentives.Params_EndorsementMode", Params_EndorsementMode_name, Params_EndorsementMode_value)
	proto.RegisterType((*Params)(nil), "dymensionxyz.dymension.incentives.Params")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/incentives/params.proto", fileDescriptor_256a114c8e13cfa0)
}

var fileDescriptor_256a114c8e13cfa0 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xd1, 0x6a, 0x13, 0x41,
	0x14, 0x86, 0x77, 0xb5, 0x16, 0x1c, 0xd1, 0xc6, 0xa5, 0x29, 0x31, 0xe8, 0x26, 0xcd, 0x55, 0x41,
	0x9c, 0x05, 0x7b, 0x21, 0x7a, 0x67, 0xb0, 0xca, 0x5e, 0x48, 0x74, 0x11, 0x04, 0x41, 0x87, 0xc9,
	0x9e, 0xd3, 0xcd, 0x60, 0x66, 0xce, 0xb2, 0x33, 0x2d, 0x5d, 0x9f, 0xc2, 0xc7, 0xf0, 0x01, 0x7c,
	0x88, 0x5e, 0x16, 0xaf, 0xc4, 0x8b, 0x20, 0xc9, 0x1b, 0xf8, 0x04, 0xb2, 0xbb, 0xd2, 0xb4, 0xa1,
	0x52, 0x7a, 0x37, 0xe7, 0xfc, 0xff, 0xf9, 0xe6, 0xc0, 0xf9, 0x19, 0x87, 0x52, 0xa3, 0xb1, 0x8a,
	0xcc, 0x51, 0xf9, 0x25, 0x3a, 0x2d, 0x22, 0x65, 0x52, 0x34, 0x4e, 0x1d, 0xa2, 0x8d, 0x72, 0x59,
	0x48, 0x6d, 0x79, 0x5e, 0x90, 0xa3, 0x60, 0xfb, 0xac, 0x7f, 0x39, 0xcc, 0x97, 0xfe, 0xee, 0x66,
	0x46, 0x19, 0xd5, 0xee, 0xa8, 0x7a, 0x35, 0x83, 0xdd, 0x7b, 0x29, 0x59, 0x4d, 0x56, 0x34, 0x42,
	0x53, 0x34, 0xd2, 0xe0, 0xdb, 0x1a, 0x5b, 0x7f, 0x53, 0x7f, 0x12, 0xbc, 0x67, 0x5b, 0xa0, 0xac,
	0x2b, 0x04, 0xe6, 0x94, 0x4e, 0x84, 0x82, 0x0a, 0xba, 0xaf, 0xb0, 0xe8, 0xf8, 0x7d, 0x7f, 0xe7,
	0xe6, 0x70, 0xfb, 0xcf, 0xac, 0xf7, 0xa0, 0x94, 0x7a, 0xfa, 0x6c, 0x70, 0xb1, 0x6f, 0x90, 0x6c,
	0xd6, 0xc2, 0x5e, 0xd5, 0x8f, 0x4f, 0xdb, 0xc1, 0x27, 0xd6, 0x4e, 0x0b, 0x94, 0x0e, 0x45, 0x26,
	0x0f, 0x32, 0x14, 0x63, 0x69, 0x51, 0xec, 0x23, 0x76, 0xae, 0xd5, 0xdc, 0x87, 0xc7, 0xb3, 0x9e,
	0xf7, 0x6b, 0xd6, 0x6b, 0x37, 0x8b, 0x59, 0xf8, 0xcc, 0x15, 0x45, 0x5a, 0xba, 0x09, 0x8f, 0x8d,
	0xfb, 0xf1, 0xfd, 0x11, 0xfb, 0xb7, 0x71, 0x6c, 0x5c, 0x12, 0x34, 0xa4, 0x57, 0x15, 0x68, 0x28,
	0x2d, 0xbe, 0x44, 0x0c, 0x3e, 0xb2, 0xb6, 0x04, 0x10, 0x8e, 0x56, 0xf9, 0xd7, 0xaf, 0xce, 0xbf,
	0x2b, 0x01, 0xde, 0xd1, 0x39, 0xfc, 0x88, 0xdd, 0xae, 0xf0, 0x80, 0x86, 0x74, 0x8d, 0x5d, 0xbb,
	0x3a, 0xf6, 0x96, 0x04, 0x78, 0x51, 0x01, 0x2a, 0x20, 0xb0, 0x16, 0x1a, 0xa0, 0xc2, 0xa2, 0x46,
	0xe3, 0x84, 0x26, 0xc0, 0xce, 0x8d, 0xbe, 0xbf, 0x73, 0xe7, 0xf1, 0x53, 0x7e, 0xe9, 0x89, 0x79,
	0x73, 0x2d, 0xbe, 0xb7, 0x24, 0xbc, 0x26, 0xc0, 0x64, 0x03, 0xcf, 0x37, 0x06, 0x23, 0xb6, 0xb1,
	0xe2, 0x09, 0xba, 0x6c, 0x6b, 0x75, 0x8c, 0xa6, 0x53, 0x99, 0xe7, 0x2d, 0x2f, 0xe8, 0xb3, 0xfb,
	0x17, 0x6b, 0xcf, 0x0d, 0xc4, 0xc9, 0xa8, 0xe5, 0x0f, 0xdf, 0x1e, 0xcf, 0x43, 0xff, 0x64, 0x1e,
	0xfa, 0xbf, 0xe7, 0xa1, 0xff, 0x75, 0x11, 0x7a, 0x27, 0x8b, 0xd0, 0xfb, 0xb9, 0x08, 0xbd, 0x0f,
	0x4f, 0x32, 0xe5, 0x26, 0x07, 0x63, 0x9e, 0x92, 0x8e, 0xfe, 0x93, 0xe9, 0xc3, 0xdd, 0xe8, 0xe8,
	0x6c, 0xb0, 0x5d, 0x99, 0xa3, 0x1d, 0xaf, 0xd7, 0x21, 0xdc, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x48, 0xfe, 0x24, 0x6d, 0x0a, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndorsementMode != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.EndorsementMode))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.AddDenomFee.Size()
		i -= size
		if _, err := m.AddDenomFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AddToGaugeBaseFee.Size()
		i -= size
		if _, err := m.AddToGaugeBaseFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CreateGaugeBaseFee.Size()
		i -= size
		if _, err := m.CreateGaugeBaseFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DistrEpochIdentifier) > 0 {
		i -= len(m.DistrEpochIdentifier)
		copy(dAtA[i:], m.DistrEpochIdentifier)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DistrEpochIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DistrEpochIdentifier)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.CreateGaugeBaseFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.AddToGaugeBaseFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.AddDenomFee.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.EndorsementMode != 0 {
		n += 1 + sovParams(uint64(m.EndorsementMode))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrEpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistrEpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateGaugeBaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreateGaugeBaseFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddToGaugeBaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddToGaugeBaseFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddDenomFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddDenomFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndorsementMode", wireType)
			}
			m.EndorsementMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndorsementMode |= Params_EndorsementMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
