// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/delayedack/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/dymensionxyz/dymension/v3/x/common/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventFinalizePacket struct {
	// Sender is the signer of the message.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// RollappID is the ID of the rollapp.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// PacketProofHeight height at which the proof was retrieved.
	PacketProofHeight uint64 `protobuf:"varint,3,opt,name=packet_proof_height,json=packetProofHeight,proto3" json:"packet_proof_height,omitempty"`
	// PacketType is a type of the packet. Eg, RECV, ACK, TIMEOUT.
	PacketType types.RollappPacket_Type `protobuf:"varint,4,opt,name=packet_type,json=packetType,proto3,enum=dymensionxyz.dymension.common.RollappPacket_Type" json:"packet_type,omitempty"`
	// PacketSrcChannel identifies the channel end on the sending chain.
	PacketSrcChannel string `protobuf:"bytes,5,opt,name=packet_src_channel,json=packetSrcChannel,proto3" json:"packet_src_channel,omitempty"`
	// PacketSequence is a sequence number of the packet.
	PacketSequence uint64 `protobuf:"varint,6,opt,name=packet_sequence,json=packetSequence,proto3" json:"packet_sequence,omitempty"`
}

func (m *EventFinalizePacket) Reset()         { *m = EventFinalizePacket{} }
func (m *EventFinalizePacket) String() string { return proto.CompactTextString(m) }
func (*EventFinalizePacket) ProtoMessage()    {}
func (*EventFinalizePacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_de2c6b6165d75670, []int{0}
}
func (m *EventFinalizePacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFinalizePacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFinalizePacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFinalizePacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFinalizePacket.Merge(m, src)
}
func (m *EventFinalizePacket) XXX_Size() int {
	return m.Size()
}
func (m *EventFinalizePacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFinalizePacket.DiscardUnknown(m)
}

var xxx_messageInfo_EventFinalizePacket proto.InternalMessageInfo

func (m *EventFinalizePacket) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventFinalizePacket) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *EventFinalizePacket) GetPacketProofHeight() uint64 {
	if m != nil {
		return m.PacketProofHeight
	}
	return 0
}

func (m *EventFinalizePacket) GetPacketType() types.RollappPacket_Type {
	if m != nil {
		return m.PacketType
	}
	return types.RollappPacket_ON_RECV
}

func (m *EventFinalizePacket) GetPacketSrcChannel() string {
	if m != nil {
		return m.PacketSrcChannel
	}
	return ""
}

func (m *EventFinalizePacket) GetPacketSequence() uint64 {
	if m != nil {
		return m.PacketSequence
	}
	return 0
}

func init() {
	proto.RegisterType((*EventFinalizePacket)(nil), "dymensionxyz.dymension.delayedack.EventFinalizePacket")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/delayedack/events.proto", fileDescriptor_de2c6b6165d75670)
}

var fileDescriptor_de2c6b6165d75670 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4f, 0xc2, 0x30,
	0x14, 0xc7, 0x29, 0x22, 0x09, 0x35, 0x41, 0x2d, 0x89, 0x59, 0x4c, 0x5c, 0xd0, 0x8b, 0x1c, 0x4c,
	0x17, 0xe1, 0xe0, 0x5d, 0xa3, 0xd1, 0x1b, 0x4e, 0x4f, 0x5e, 0x96, 0xd1, 0x3d, 0xd9, 0xc2, 0x68,
	0xeb, 0x56, 0x08, 0xe3, 0x53, 0xf8, 0x2d, 0xfc, 0x2a, 0x1e, 0x39, 0x7a, 0x34, 0xf0, 0x45, 0xcc,
	0xda, 0x22, 0x5c, 0xb8, 0xf5, 0xbd, 0xff, 0xbf, 0xbf, 0xf7, 0x7f, 0x79, 0x98, 0x46, 0xc5, 0x18,
	0x78, 0x9e, 0x08, 0x3e, 0x2b, 0xe6, 0xde, 0x7f, 0xe1, 0x45, 0x90, 0x86, 0x05, 0x44, 0x21, 0x1b,
	0x79, 0x30, 0x05, 0xae, 0x72, 0x2a, 0x33, 0xa1, 0x04, 0x39, 0xdf, 0xf6, 0x6f, 0x3e, 0xd3, 0x8d,
	0xff, 0xb4, 0xbb, 0x03, 0xc9, 0xc4, 0x78, 0x2c, 0xb8, 0x97, 0x89, 0x34, 0x0d, 0xa5, 0x0c, 0x64,
	0xc8, 0x46, 0xa0, 0x0c, 0xf6, 0xe2, 0xab, 0x8a, 0x5b, 0xf7, 0xe5, 0x9c, 0x87, 0x84, 0x87, 0x69,
	0x32, 0x87, 0xbe, 0x56, 0xc9, 0x09, 0xae, 0xe7, 0xc0, 0x23, 0xc8, 0x1c, 0xd4, 0x46, 0x9d, 0x86,
	0x6f, 0x2b, 0x72, 0x86, 0xf1, 0x9a, 0x93, 0x44, 0x4e, 0x55, 0x6b, 0x0d, 0xdb, 0x79, 0x8a, 0x08,
	0xc5, 0x2d, 0x83, 0x0f, 0x64, 0x26, 0xc4, 0x7b, 0x10, 0x43, 0x32, 0x8c, 0x95, 0xb3, 0xd7, 0x46,
	0x9d, 0x9a, 0x7f, 0x6c, 0xa4, 0x7e, 0xa9, 0x3c, 0x6a, 0x81, 0xf8, 0xf8, 0xc0, 0xfa, 0x55, 0x21,
	0xc1, 0xa9, 0xb5, 0x51, 0xa7, 0xd9, 0xbd, 0xa6, 0x3b, 0x76, 0x35, 0x8b, 0x50, 0xdf, 0x8c, 0x33,
	0x49, 0xe9, 0x6b, 0x21, 0xc1, 0xc7, 0x86, 0x52, 0xbe, 0xc9, 0x15, 0x26, 0x96, 0x99, 0x67, 0x2c,
	0x60, 0x71, 0xc8, 0x39, 0xa4, 0xce, 0xbe, 0x8e, 0x7a, 0x64, 0x94, 0x97, 0x8c, 0xdd, 0x99, 0x3e,
	0xb9, 0xc4, 0x87, 0x6b, 0x37, 0x7c, 0x4c, 0x80, 0x33, 0x70, 0xea, 0x3a, 0x6d, 0xd3, 0x5a, 0x6d,
	0xf7, 0xf6, 0xf9, 0x7b, 0xe9, 0xa2, 0xc5, 0xd2, 0x45, 0xbf, 0x4b, 0x17, 0x7d, 0xae, 0xdc, 0xca,
	0x62, 0xe5, 0x56, 0x7e, 0x56, 0x6e, 0xe5, 0xed, 0x66, 0x98, 0xa8, 0x78, 0x32, 0x28, 0xe3, 0x79,
	0x3b, 0x4e, 0x30, 0xed, 0x79, 0xb3, 0xed, 0xd3, 0x96, 0xdb, 0xe6, 0x83, 0xba, 0xbe, 0x41, 0xef,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xa4, 0x49, 0x5e, 0x0c, 0x02, 0x00, 0x00,
}

func (m *EventFinalizePacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFinalizePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFinalizePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PacketSequence != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PacketSequence))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PacketSrcChannel) > 0 {
		i -= len(m.PacketSrcChannel)
		copy(dAtA[i:], m.PacketSrcChannel)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PacketSrcChannel)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PacketType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PacketType))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketProofHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PacketProofHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventFinalizePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PacketProofHeight != 0 {
		n += 1 + sovEvents(uint64(m.PacketProofHeight))
	}
	if m.PacketType != 0 {
		n += 1 + sovEvents(uint64(m.PacketType))
	}
	l = len(m.PacketSrcChannel)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PacketSequence != 0 {
		n += 1 + sovEvents(uint64(m.PacketSequence))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventFinalizePacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFinalizePacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFinalizePacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketProofHeight", wireType)
			}
			m.PacketProofHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketProofHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketType", wireType)
			}
			m.PacketType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketType |= types.RollappPacket_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSrcChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketSrcChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSequence", wireType)
			}
			m.PacketSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
