// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/delayedack/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/dymensionxyz/dymension/v3/x/common/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgFinalizePacket finalizes a single packet.
type MsgFinalizePacket struct {
	// Sender is the signer of the message.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// RollappID is the ID of the rollapp.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// PacketProofHeight is a height at which the proof was retrieved.
	PacketProofHeight uint64 `protobuf:"varint,3,opt,name=packet_proof_height,json=packetProofHeight,proto3" json:"packet_proof_height,omitempty"`
	// PacketType is a type of the packet. Eg, RECV, ACK, TIMEOUT.
	PacketType types.RollappPacket_Type `protobuf:"varint,4,opt,name=packet_type,json=packetType,proto3,enum=dymensionxyz.dymension.common.RollappPacket_Type" json:"packet_type,omitempty"`
	// PacketSrcChannel identifies the channel end on the sending chain.
	PacketSrcChannel string `protobuf:"bytes,5,opt,name=packet_src_channel,json=packetSrcChannel,proto3" json:"packet_src_channel,omitempty"`
	// PacketSequence is a sequence number of the packet.
	PacketSequence uint64 `protobuf:"varint,6,opt,name=packet_sequence,json=packetSequence,proto3" json:"packet_sequence,omitempty"`
}

func (m *MsgFinalizePacket) Reset()         { *m = MsgFinalizePacket{} }
func (m *MsgFinalizePacket) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizePacket) ProtoMessage()    {}
func (*MsgFinalizePacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_604a74c1ca57f5ed, []int{0}
}
func (m *MsgFinalizePacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizePacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizePacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizePacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizePacket.Merge(m, src)
}
func (m *MsgFinalizePacket) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizePacket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizePacket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizePacket proto.InternalMessageInfo

func (m *MsgFinalizePacket) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgFinalizePacket) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *MsgFinalizePacket) GetPacketProofHeight() uint64 {
	if m != nil {
		return m.PacketProofHeight
	}
	return 0
}

func (m *MsgFinalizePacket) GetPacketType() types.RollappPacket_Type {
	if m != nil {
		return m.PacketType
	}
	return types.RollappPacket_ON_RECV
}

func (m *MsgFinalizePacket) GetPacketSrcChannel() string {
	if m != nil {
		return m.PacketSrcChannel
	}
	return ""
}

func (m *MsgFinalizePacket) GetPacketSequence() uint64 {
	if m != nil {
		return m.PacketSequence
	}
	return 0
}

type MsgFinalizePacketResponse struct {
}

func (m *MsgFinalizePacketResponse) Reset()         { *m = MsgFinalizePacketResponse{} }
func (m *MsgFinalizePacketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizePacketResponse) ProtoMessage()    {}
func (*MsgFinalizePacketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_604a74c1ca57f5ed, []int{1}
}
func (m *MsgFinalizePacketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizePacketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizePacketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizePacketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizePacketResponse.Merge(m, src)
}
func (m *MsgFinalizePacketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizePacketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizePacketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizePacketResponse proto.InternalMessageInfo

// MsgFinalizePacketsUntilHeight finalizes packets for the given rollapp until the given height inclusively.
type MsgFinalizePacketsUntilHeight struct {
	// Sender is the signer of the message.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// RollappID is the ID of the rollapp.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// Height is a height until which packets are to be finalized. Height is inclusive.
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *MsgFinalizePacketsUntilHeight) Reset()         { *m = MsgFinalizePacketsUntilHeight{} }
func (m *MsgFinalizePacketsUntilHeight) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizePacketsUntilHeight) ProtoMessage()    {}
func (*MsgFinalizePacketsUntilHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_604a74c1ca57f5ed, []int{2}
}
func (m *MsgFinalizePacketsUntilHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizePacketsUntilHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizePacketsUntilHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizePacketsUntilHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizePacketsUntilHeight.Merge(m, src)
}
func (m *MsgFinalizePacketsUntilHeight) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizePacketsUntilHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizePacketsUntilHeight.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizePacketsUntilHeight proto.InternalMessageInfo

func (m *MsgFinalizePacketsUntilHeight) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgFinalizePacketsUntilHeight) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *MsgFinalizePacketsUntilHeight) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type MsgFinalizePacketsUntilHeightResponse struct {
}

func (m *MsgFinalizePacketsUntilHeightResponse) Reset()         { *m = MsgFinalizePacketsUntilHeightResponse{} }
func (m *MsgFinalizePacketsUntilHeightResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizePacketsUntilHeightResponse) ProtoMessage()    {}
func (*MsgFinalizePacketsUntilHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_604a74c1ca57f5ed, []int{3}
}
func (m *MsgFinalizePacketsUntilHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizePacketsUntilHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizePacketsUntilHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizePacketsUntilHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizePacketsUntilHeightResponse.Merge(m, src)
}
func (m *MsgFinalizePacketsUntilHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizePacketsUntilHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizePacketsUntilHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizePacketsUntilHeightResponse proto.InternalMessageInfo

// MsgFinalizeRollappPacketsByReceiver finalizes the rollapp packets for the specified receiver until the latest
// finalized height inclusively.
type MsgFinalizeRollappPacketsByReceiver struct {
	// Sender is the signer of the message.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// RollappID is the ID of the rollapp.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// Receiver is the one who waits tokens after the finalization.
	Receiver string `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *MsgFinalizeRollappPacketsByReceiver) Reset()         { *m = MsgFinalizeRollappPacketsByReceiver{} }
func (m *MsgFinalizeRollappPacketsByReceiver) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizeRollappPacketsByReceiver) ProtoMessage()    {}
func (*MsgFinalizeRollappPacketsByReceiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_604a74c1ca57f5ed, []int{4}
}
func (m *MsgFinalizeRollappPacketsByReceiver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizeRollappPacketsByReceiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizeRollappPacketsByReceiver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizeRollappPacketsByReceiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizeRollappPacketsByReceiver.Merge(m, src)
}
func (m *MsgFinalizeRollappPacketsByReceiver) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizeRollappPacketsByReceiver) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizeRollappPacketsByReceiver.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizeRollappPacketsByReceiver proto.InternalMessageInfo

func (m *MsgFinalizeRollappPacketsByReceiver) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgFinalizeRollappPacketsByReceiver) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *MsgFinalizeRollappPacketsByReceiver) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

type MsgFinalizeRollappPacketsByReceiverResponse struct {
}

func (m *MsgFinalizeRollappPacketsByReceiverResponse) Reset() {
	*m = MsgFinalizeRollappPacketsByReceiverResponse{}
}
func (m *MsgFinalizeRollappPacketsByReceiverResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgFinalizeRollappPacketsByReceiverResponse) ProtoMessage() {}
func (*MsgFinalizeRollappPacketsByReceiverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_604a74c1ca57f5ed, []int{5}
}
func (m *MsgFinalizeRollappPacketsByReceiverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizeRollappPacketsByReceiverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizeRollappPacketsByReceiverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizeRollappPacketsByReceiverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizeRollappPacketsByReceiverResponse.Merge(m, src)
}
func (m *MsgFinalizeRollappPacketsByReceiverResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizeRollappPacketsByReceiverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizeRollappPacketsByReceiverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizeRollappPacketsByReceiverResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgFinalizePacket)(nil), "dymensionxyz.dymension.delayedack.MsgFinalizePacket")
	proto.RegisterType((*MsgFinalizePacketResponse)(nil), "dymensionxyz.dymension.delayedack.MsgFinalizePacketResponse")
	proto.RegisterType((*MsgFinalizePacketsUntilHeight)(nil), "dymensionxyz.dymension.delayedack.MsgFinalizePacketsUntilHeight")
	proto.RegisterType((*MsgFinalizePacketsUntilHeightResponse)(nil), "dymensionxyz.dymension.delayedack.MsgFinalizePacketsUntilHeightResponse")
	proto.RegisterType((*MsgFinalizeRollappPacketsByReceiver)(nil), "dymensionxyz.dymension.delayedack.MsgFinalizeRollappPacketsByReceiver")
	proto.RegisterType((*MsgFinalizeRollappPacketsByReceiverResponse)(nil), "dymensionxyz.dymension.delayedack.MsgFinalizeRollappPacketsByReceiverResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/delayedack/tx.proto", fileDescriptor_604a74c1ca57f5ed)
}

var fileDescriptor_604a74c1ca57f5ed = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x4d, 0x1b, 0x91, 0x57, 0x29, 0xd0, 0x43, 0x2a, 0xc6, 0xa8, 0x56, 0x08, 0x42,
	0x8d, 0x02, 0xd8, 0x6a, 0x8a, 0x84, 0x84, 0x18, 0x50, 0x91, 0xaa, 0x32, 0x14, 0x15, 0x03, 0x0b,
	0x4b, 0xe4, 0xda, 0x8f, 0xc4, 0xaa, 0x73, 0x67, 0x7c, 0x6e, 0x14, 0x97, 0x05, 0x21, 0xd8, 0xf9,
	0x18, 0x8c, 0x15, 0x23, 0x9f, 0x80, 0xb1, 0x23, 0x23, 0x4a, 0x86, 0x7e, 0x08, 0x16, 0x14, 0xdf,
	0xc5, 0xc4, 0x44, 0x69, 0x21, 0x30, 0xd9, 0xef, 0xde, 0xbb, 0xff, 0xfb, 0xdd, 0xff, 0xec, 0x07,
	0x0d, 0x2f, 0xe9, 0x22, 0x13, 0x3e, 0x67, 0xfd, 0xe4, 0xc8, 0xca, 0x02, 0xcb, 0xc3, 0xc0, 0x49,
	0xd0, 0x73, 0xdc, 0x03, 0x2b, 0xee, 0x9b, 0x61, 0xc4, 0x63, 0x4e, 0xaf, 0x4f, 0xd6, 0x9a, 0x59,
	0x60, 0xfe, 0xaa, 0xd5, 0xaf, 0xb8, 0x5c, 0x74, 0xb9, 0xb0, 0xba, 0xa2, 0x6d, 0xf5, 0x36, 0x46,
	0x0f, 0xb9, 0x57, 0x6f, 0xce, 0xe8, 0xe3, 0xf2, 0x6e, 0x97, 0x33, 0x2b, 0xe2, 0x41, 0xe0, 0x84,
	0x61, 0x2b, 0x74, 0xdc, 0x03, 0x8c, 0xe5, 0x9e, 0xda, 0xe7, 0x05, 0x58, 0xd9, 0x15, 0xed, 0x6d,
	0x9f, 0x39, 0x81, 0x7f, 0x84, 0x7b, 0x69, 0x8e, 0xae, 0x42, 0x49, 0x20, 0xf3, 0x30, 0xd2, 0x48,
	0x95, 0xd4, 0xcb, 0xb6, 0x8a, 0xe8, 0x1a, 0xc0, 0x58, 0xc5, 0xf7, 0xb4, 0x85, 0x34, 0x57, 0x56,
	0x2b, 0x8f, 0x3d, 0x6a, 0xc2, 0x65, 0x29, 0xde, 0x0a, 0x23, 0xce, 0x5f, 0xb5, 0x3a, 0xe8, 0xb7,
	0x3b, 0xb1, 0x56, 0xac, 0x92, 0xfa, 0xa2, 0xbd, 0x22, 0x53, 0x7b, 0xa3, 0xcc, 0x4e, 0x9a, 0xa0,
	0x36, 0x2c, 0xab, 0xfa, 0x38, 0x09, 0x51, 0x5b, 0xac, 0x92, 0x7a, 0xa5, 0xb9, 0x61, 0xce, 0xb0,
	0x40, 0x1e, 0xc3, 0xb4, 0x65, 0x3b, 0x49, 0x6a, 0x3e, 0x4f, 0x42, 0xb4, 0x41, 0xaa, 0x8c, 0xde,
	0xe9, 0x6d, 0xa0, 0x4a, 0x53, 0x44, 0x6e, 0xcb, 0xed, 0x38, 0x8c, 0x61, 0xa0, 0x2d, 0xa5, 0xa8,
	0x97, 0x64, 0xe6, 0x59, 0xe4, 0x3e, 0x92, 0xeb, 0x74, 0x1d, 0x2e, 0x8e, 0xab, 0xf1, 0xf5, 0x21,
	0x32, 0x17, 0xb5, 0x52, 0x4a, 0x5b, 0x51, 0xa5, 0x6a, 0xf5, 0xfe, 0xf2, 0xbb, 0xd3, 0xe3, 0x86,
	0xb2, 0xa1, 0x76, 0x0d, 0xae, 0x4e, 0x79, 0x66, 0xa3, 0x08, 0x39, 0x13, 0x58, 0x7b, 0x03, 0x6b,
	0x53, 0x49, 0xf1, 0x82, 0xc5, 0x7e, 0xa0, 0x4e, 0x3d, 0xa7, 0xb9, 0xab, 0x50, 0xca, 0xf9, 0xa9,
	0xa2, 0x3c, 0xd9, 0x3a, 0xdc, 0x3c, 0xb3, 0x79, 0x46, 0xf9, 0x81, 0xc0, 0x8d, 0x89, 0xca, 0x9c,
	0xa9, 0x62, 0x2b, 0xb1, 0xd1, 0x45, 0xbf, 0x87, 0xd1, 0xbc, 0xb0, 0x3a, 0x5c, 0x88, 0x94, 0x44,
	0x8a, 0x5b, 0xb6, 0xb3, 0x38, 0x0f, 0x7c, 0x07, 0x6e, 0xfd, 0x01, 0xc6, 0x18, 0xbb, 0xf9, 0xa3,
	0x08, 0xc5, 0x5d, 0xd1, 0xa6, 0xef, 0x09, 0x54, 0x7e, 0xfb, 0x66, 0xef, 0x9a, 0xe7, 0xfe, 0x3a,
	0xe6, 0x94, 0x37, 0xfa, 0x83, 0x79, 0x76, 0x8d, 0x71, 0xe8, 0x27, 0x02, 0xfa, 0x19, 0x37, 0xfd,
	0x70, 0x1e, 0xf1, 0x49, 0x05, 0x7d, 0xe7, 0x5f, 0x15, 0x32, 0xd4, 0x2f, 0x04, 0xaa, 0xe7, 0xde,
	0xf6, 0xf6, 0xdf, 0xb5, 0x9b, 0xa5, 0xa3, 0x3f, 0xf9, 0x3f, 0x3a, 0x63, 0x78, 0x7d, 0xe9, 0xed,
	0xe9, 0x71, 0x83, 0x6c, 0x3d, 0xfd, 0x3a, 0x30, 0xc8, 0xc9, 0xc0, 0x20, 0xdf, 0x07, 0x06, 0xf9,
	0x38, 0x34, 0x0a, 0x27, 0x43, 0xa3, 0xf0, 0x6d, 0x68, 0x14, 0x5e, 0xde, 0x6b, 0xfb, 0x71, 0xe7,
	0x70, 0x7f, 0x34, 0x23, 0xac, 0x19, 0x53, 0xb0, 0xb7, 0x69, 0xf5, 0x73, 0x23, 0x37, 0x09, 0x51,
	0xec, 0x97, 0xd2, 0x31, 0xb8, 0xf9, 0x33, 0x00, 0x00, 0xff, 0xff, 0x16, 0xed, 0x0f, 0x08, 0xa4,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// FinalizePacket finalizes a singe packet.
	FinalizePacket(ctx context.Context, in *MsgFinalizePacket, opts ...grpc.CallOption) (*MsgFinalizePacketResponse, error)
	// FinalizePacketsUntilHeight finalizes the packets for the given rollapp until the given height inclusively.
	FinalizePacketsUntilHeight(ctx context.Context, in *MsgFinalizePacketsUntilHeight, opts ...grpc.CallOption) (*MsgFinalizePacketsUntilHeightResponse, error)
	// FinalizeRollappPacketsByReceiver finalizes the rollapp packets for the specified receiver until the latest
	// finalized height inclusively.
	FinalizeRollappPacketsByReceiver(ctx context.Context, in *MsgFinalizeRollappPacketsByReceiver, opts ...grpc.CallOption) (*MsgFinalizeRollappPacketsByReceiverResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) FinalizePacket(ctx context.Context, in *MsgFinalizePacket, opts ...grpc.CallOption) (*MsgFinalizePacketResponse, error) {
	out := new(MsgFinalizePacketResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.delayedack.Msg/FinalizePacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinalizePacketsUntilHeight(ctx context.Context, in *MsgFinalizePacketsUntilHeight, opts ...grpc.CallOption) (*MsgFinalizePacketsUntilHeightResponse, error) {
	out := new(MsgFinalizePacketsUntilHeightResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.delayedack.Msg/FinalizePacketsUntilHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinalizeRollappPacketsByReceiver(ctx context.Context, in *MsgFinalizeRollappPacketsByReceiver, opts ...grpc.CallOption) (*MsgFinalizeRollappPacketsByReceiverResponse, error) {
	out := new(MsgFinalizeRollappPacketsByReceiverResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.delayedack.Msg/FinalizeRollappPacketsByReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// FinalizePacket finalizes a singe packet.
	FinalizePacket(context.Context, *MsgFinalizePacket) (*MsgFinalizePacketResponse, error)
	// FinalizePacketsUntilHeight finalizes the packets for the given rollapp until the given height inclusively.
	FinalizePacketsUntilHeight(context.Context, *MsgFinalizePacketsUntilHeight) (*MsgFinalizePacketsUntilHeightResponse, error)
	// FinalizeRollappPacketsByReceiver finalizes the rollapp packets for the specified receiver until the latest
	// finalized height inclusively.
	FinalizeRollappPacketsByReceiver(context.Context, *MsgFinalizeRollappPacketsByReceiver) (*MsgFinalizeRollappPacketsByReceiverResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) FinalizePacket(ctx context.Context, req *MsgFinalizePacket) (*MsgFinalizePacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizePacket not implemented")
}
func (*UnimplementedMsgServer) FinalizePacketsUntilHeight(ctx context.Context, req *MsgFinalizePacketsUntilHeight) (*MsgFinalizePacketsUntilHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizePacketsUntilHeight not implemented")
}
func (*UnimplementedMsgServer) FinalizeRollappPacketsByReceiver(ctx context.Context, req *MsgFinalizeRollappPacketsByReceiver) (*MsgFinalizeRollappPacketsByReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeRollappPacketsByReceiver not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_FinalizePacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinalizePacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinalizePacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.delayedack.Msg/FinalizePacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinalizePacket(ctx, req.(*MsgFinalizePacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinalizePacketsUntilHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinalizePacketsUntilHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinalizePacketsUntilHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.delayedack.Msg/FinalizePacketsUntilHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinalizePacketsUntilHeight(ctx, req.(*MsgFinalizePacketsUntilHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinalizeRollappPacketsByReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinalizeRollappPacketsByReceiver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinalizeRollappPacketsByReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.delayedack.Msg/FinalizeRollappPacketsByReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinalizeRollappPacketsByReceiver(ctx, req.(*MsgFinalizeRollappPacketsByReceiver))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.delayedack.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FinalizePacket",
			Handler:    _Msg_FinalizePacket_Handler,
		},
		{
			MethodName: "FinalizePacketsUntilHeight",
			Handler:    _Msg_FinalizePacketsUntilHeight_Handler,
		},
		{
			MethodName: "FinalizeRollappPacketsByReceiver",
			Handler:    _Msg_FinalizeRollappPacketsByReceiver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/delayedack/tx.proto",
}

func (m *MsgFinalizePacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PacketSequence != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PacketSequence))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PacketSrcChannel) > 0 {
		i -= len(m.PacketSrcChannel)
		copy(dAtA[i:], m.PacketSrcChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PacketSrcChannel)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PacketType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PacketType))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketProofHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PacketProofHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinalizePacketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizePacketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizePacketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFinalizePacketsUntilHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizePacketsUntilHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizePacketsUntilHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinalizePacketsUntilHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizePacketsUntilHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizePacketsUntilHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFinalizeRollappPacketsByReceiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizeRollappPacketsByReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizeRollappPacketsByReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinalizeRollappPacketsByReceiverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizeRollappPacketsByReceiverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizeRollappPacketsByReceiverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgFinalizePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PacketProofHeight != 0 {
		n += 1 + sovTx(uint64(m.PacketProofHeight))
	}
	if m.PacketType != 0 {
		n += 1 + sovTx(uint64(m.PacketType))
	}
	l = len(m.PacketSrcChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PacketSequence != 0 {
		n += 1 + sovTx(uint64(m.PacketSequence))
	}
	return n
}

func (m *MsgFinalizePacketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFinalizePacketsUntilHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	return n
}

func (m *MsgFinalizePacketsUntilHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFinalizeRollappPacketsByReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFinalizeRollappPacketsByReceiverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgFinalizePacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizePacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizePacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketProofHeight", wireType)
			}
			m.PacketProofHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketProofHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketType", wireType)
			}
			m.PacketType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketType |= types.RollappPacket_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSrcChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketSrcChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSequence", wireType)
			}
			m.PacketSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizePacketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizePacketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizePacketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizePacketsUntilHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizePacketsUntilHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizePacketsUntilHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizePacketsUntilHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizePacketsUntilHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizePacketsUntilHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizeRollappPacketsByReceiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizeRollappPacketsByReceiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizeRollappPacketsByReceiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizeRollappPacketsByReceiverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizeRollappPacketsByReceiverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizeRollappPacketsByReceiverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
