// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/otcbuyback/events.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventAuctionCreated is emitted when a new auction is created
type EventAuctionCreated struct {
	// Auction ID
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// Token allocation for the auction
	Allocation types.Coin `protobuf:"bytes,2,opt,name=allocation,proto3" json:"allocation"`
	// Start time of the auction
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Duration of the auction
	EndTime string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Initial discount percentage
	InitialDiscount string `protobuf:"bytes,6,opt,name=initial_discount,json=initialDiscount,proto3" json:"initial_discount,omitempty"`
	// Maximum discount percentage
	MaxDiscount string `protobuf:"bytes,7,opt,name=max_discount,json=maxDiscount,proto3" json:"max_discount,omitempty"`
}

func (m *EventAuctionCreated) Reset()         { *m = EventAuctionCreated{} }
func (m *EventAuctionCreated) String() string { return proto.CompactTextString(m) }
func (*EventAuctionCreated) ProtoMessage()    {}
func (*EventAuctionCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_b069dfb73d1a330a, []int{0}
}
func (m *EventAuctionCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAuctionCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAuctionCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAuctionCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAuctionCreated.Merge(m, src)
}
func (m *EventAuctionCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventAuctionCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAuctionCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventAuctionCreated proto.InternalMessageInfo

func (m *EventAuctionCreated) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *EventAuctionCreated) GetAllocation() types.Coin {
	if m != nil {
		return m.Allocation
	}
	return types.Coin{}
}

func (m *EventAuctionCreated) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *EventAuctionCreated) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *EventAuctionCreated) GetInitialDiscount() string {
	if m != nil {
		return m.InitialDiscount
	}
	return ""
}

func (m *EventAuctionCreated) GetMaxDiscount() string {
	if m != nil {
		return m.MaxDiscount
	}
	return ""
}

// EventTokensPurchased is emitted when tokens are purchased in an auction
type EventTokensPurchased struct {
	// Auction ID
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// Buyer address
	Buyer string `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// Amount of tokens purchased
	TokensPurchased cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=tokens_purchased,json=tokensPurchased,proto3,customtype=cosmossdk.io/math.Int" json:"tokens_purchased"`
	// Amount paid by buyer
	AmountPaid types.Coin `protobuf:"bytes,4,opt,name=amount_paid,json=amountPaid,proto3" json:"amount_paid"`
	// Price per token
	PricePerToken cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=price_per_token,json=pricePerToken,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price_per_token"`
}

func (m *EventTokensPurchased) Reset()         { *m = EventTokensPurchased{} }
func (m *EventTokensPurchased) String() string { return proto.CompactTextString(m) }
func (*EventTokensPurchased) ProtoMessage()    {}
func (*EventTokensPurchased) Descriptor() ([]byte, []int) {
	return fileDescriptor_b069dfb73d1a330a, []int{1}
}
func (m *EventTokensPurchased) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTokensPurchased) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTokensPurchased.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTokensPurchased) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTokensPurchased.Merge(m, src)
}
func (m *EventTokensPurchased) XXX_Size() int {
	return m.Size()
}
func (m *EventTokensPurchased) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTokensPurchased.DiscardUnknown(m)
}

var xxx_messageInfo_EventTokensPurchased proto.InternalMessageInfo

func (m *EventTokensPurchased) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *EventTokensPurchased) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *EventTokensPurchased) GetAmountPaid() types.Coin {
	if m != nil {
		return m.AmountPaid
	}
	return types.Coin{}
}

// EventAuctionCompleted is emitted when an auction ends
type EventAuctionCompleted struct {
	// Auction ID
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// Total tokens sold
	TotalSold cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_sold,json=totalSold,proto3,customtype=cosmossdk.io/math.Int" json:"total_sold"`
	// Total amount raised in all accepted tokens
	TotalRaised []types.Coin `protobuf:"bytes,3,rep,name=total_raised,json=totalRaised,proto3" json:"total_raised"`
	// Final sale price per token
	FinalPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=final_price,json=finalPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"final_price"`
	// Reason for completion (sold_out, time_expired, etc.)
	CompletionReason string `protobuf:"bytes,5,opt,name=completion_reason,json=completionReason,proto3" json:"completion_reason,omitempty"`
}

func (m *EventAuctionCompleted) Reset()         { *m = EventAuctionCompleted{} }
func (m *EventAuctionCompleted) String() string { return proto.CompactTextString(m) }
func (*EventAuctionCompleted) ProtoMessage()    {}
func (*EventAuctionCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_b069dfb73d1a330a, []int{2}
}
func (m *EventAuctionCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAuctionCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAuctionCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAuctionCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAuctionCompleted.Merge(m, src)
}
func (m *EventAuctionCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventAuctionCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAuctionCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventAuctionCompleted proto.InternalMessageInfo

func (m *EventAuctionCompleted) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *EventAuctionCompleted) GetTotalRaised() []types.Coin {
	if m != nil {
		return m.TotalRaised
	}
	return nil
}

func (m *EventAuctionCompleted) GetCompletionReason() string {
	if m != nil {
		return m.CompletionReason
	}
	return ""
}

// EventTokensClaimed is emitted when a user claims vested tokens
type EventTokensClaimed struct {
	// Auction ID
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// Claimer address
	Claimer string `protobuf:"bytes,2,opt,name=claimer,proto3" json:"claimer,omitempty"`
	// Amount of tokens claimed
	ClaimedAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=claimed_amount,json=claimedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"claimed_amount"`
	// Remaining vesting amount
	RemainingVesting cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=remaining_vesting,json=remainingVesting,proto3,customtype=cosmossdk.io/math.Int" json:"remaining_vesting"`
}

func (m *EventTokensClaimed) Reset()         { *m = EventTokensClaimed{} }
func (m *EventTokensClaimed) String() string { return proto.CompactTextString(m) }
func (*EventTokensClaimed) ProtoMessage()    {}
func (*EventTokensClaimed) Descriptor() ([]byte, []int) {
	return fileDescriptor_b069dfb73d1a330a, []int{3}
}
func (m *EventTokensClaimed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTokensClaimed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTokensClaimed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTokensClaimed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTokensClaimed.Merge(m, src)
}
func (m *EventTokensClaimed) XXX_Size() int {
	return m.Size()
}
func (m *EventTokensClaimed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTokensClaimed.DiscardUnknown(m)
}

var xxx_messageInfo_EventTokensClaimed proto.InternalMessageInfo

func (m *EventTokensClaimed) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *EventTokensClaimed) GetClaimer() string {
	if m != nil {
		return m.Claimer
	}
	return ""
}

func init() {
	proto.RegisterType((*EventAuctionCreated)(nil), "dymensionxyz.dymension.otcbuyback.EventAuctionCreated")
	proto.RegisterType((*EventTokensPurchased)(nil), "dymensionxyz.dymension.otcbuyback.EventTokensPurchased")
	proto.RegisterType((*EventAuctionCompleted)(nil), "dymensionxyz.dymension.otcbuyback.EventAuctionCompleted")
	proto.RegisterType((*EventTokensClaimed)(nil), "dymensionxyz.dymension.otcbuyback.EventTokensClaimed")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/otcbuyback/events.proto", fileDescriptor_b069dfb73d1a330a)
}

var fileDescriptor_b069dfb73d1a330a = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0x8d, 0xc3, 0xd7, 0xcb, 0x0d, 0x3c, 0x82, 0x1f, 0x48, 0x81, 0xa7, 0x67, 0x20, 0x2b, 0x9e,
	0x10, 0xb6, 0x80, 0x45, 0x97, 0x2d, 0x81, 0x2e, 0xa8, 0xba, 0x48, 0x0d, 0x42, 0x6d, 0x37, 0xd6,
	0x78, 0x66, 0x6a, 0x46, 0xd8, 0x33, 0x96, 0x67, 0x12, 0x25, 0xfd, 0x15, 0xdd, 0xf4, 0x9f, 0xf0,
	0x1f, 0xca, 0x12, 0xb1, 0xaa, 0x58, 0xa0, 0x0a, 0x7e, 0x47, 0xa5, 0xca, 0x33, 0x03, 0x49, 0x5b,
	0x55, 0x7c, 0xec, 0x3c, 0xf7, 0x9e, 0x73, 0xe6, 0xde, 0xe3, 0xa3, 0x01, 0x9f, 0x0c, 0x32, 0xca,
	0x25, 0x13, 0xbc, 0x3f, 0xf8, 0x18, 0xdc, 0x1d, 0x02, 0xa1, 0x70, 0xdc, 0x1d, 0xc4, 0x08, 0x9f,
	0x04, 0xb4, 0x47, 0xb9, 0x92, 0x7e, 0x5e, 0x08, 0x25, 0xdc, 0xd5, 0x51, 0xfc, 0x90, 0xec, 0x0f,
	0xf1, 0x4b, 0xf3, 0x89, 0x48, 0x84, 0x46, 0x07, 0xe5, 0x97, 0x21, 0x2e, 0x79, 0x58, 0xc8, 0x4c,
	0xc8, 0x20, 0x46, 0x92, 0x06, 0xbd, 0xcd, 0x98, 0x2a, 0xb4, 0x19, 0x60, 0xc1, 0xb8, 0xed, 0x2f,
	0x9a, 0x7e, 0x64, 0x88, 0xe6, 0x60, 0x5a, 0xad, 0xef, 0x0e, 0xfc, 0xf3, 0xb2, 0x1c, 0x62, 0xa7,
	0x8b, 0x15, 0x13, 0x7c, 0xb7, 0xa0, 0x48, 0x51, 0xe2, 0xfe, 0x07, 0x80, 0x4c, 0x25, 0x62, 0xa4,
	0xe9, 0xac, 0x38, 0x6b, 0xe3, 0x61, 0xcd, 0x56, 0xf6, 0x89, 0xfb, 0x1c, 0x00, 0xa5, 0xa9, 0xc0,
	0xa8, 0x3c, 0x37, 0xab, 0x2b, 0xce, 0x5a, 0x7d, 0x6b, 0xd1, 0xb7, 0xca, 0xe5, 0x18, 0xbe, 0x1d,
	0xc3, 0xdf, 0x15, 0x8c, 0xb7, 0xc7, 0xcf, 0xae, 0x96, 0x2b, 0xe1, 0x08, 0xa5, 0xd4, 0x97, 0x0a,
	0x15, 0x2a, 0x52, 0x2c, 0xa3, 0xcd, 0xf1, 0x15, 0x67, 0xad, 0x16, 0xd6, 0x74, 0xe5, 0x90, 0x65,
	0xd4, 0x5d, 0x84, 0xbf, 0x28, 0x27, 0xa6, 0x39, 0xa1, 0x9b, 0x53, 0x94, 0x13, 0xdd, 0xfa, 0x1f,
	0x1a, 0x8c, 0x33, 0xc5, 0x50, 0x1a, 0x11, 0x26, 0xb1, 0xe8, 0x72, 0xd5, 0x9c, 0xd4, 0x90, 0x59,
	0x5b, 0xdf, 0xb3, 0x65, 0x77, 0x15, 0xa6, 0x33, 0xd4, 0x1f, 0xc2, 0xa6, 0x34, 0xac, 0x9e, 0xa1,
	0xfe, 0x2d, 0xa4, 0x75, 0x59, 0x85, 0x79, 0xbd, 0xff, 0xa1, 0x38, 0xa1, 0x5c, 0x76, 0xba, 0x05,
	0x3e, 0x46, 0xf2, 0x7e, 0x03, 0x7c, 0x98, 0x88, 0xbb, 0x03, 0x5a, 0xe8, 0xdd, 0x6b, 0xed, 0xe6,
	0xc5, 0xe9, 0xc6, 0xbc, 0x5d, 0x7f, 0x87, 0x90, 0x82, 0x4a, 0x79, 0xa0, 0x0a, 0xc6, 0x93, 0xd0,
	0xc0, 0xdc, 0x23, 0x68, 0x28, 0x7d, 0x43, 0x94, 0xdf, 0x5e, 0xd1, 0x1c, 0xd3, 0xd4, 0xf5, 0xd2,
	0x9b, 0xcb, 0xab, 0xe5, 0x05, 0x43, 0x97, 0xe4, 0xc4, 0x67, 0x22, 0xc8, 0x90, 0x3a, 0xf6, 0xf7,
	0xb9, 0xba, 0x38, 0xdd, 0x00, 0xab, 0xbb, 0xcf, 0x55, 0x38, 0xab, 0x7e, 0x19, 0xf3, 0x05, 0xd4,
	0x51, 0x56, 0x6e, 0x12, 0xe5, 0x88, 0x11, 0x6d, 0xe4, 0x83, 0xfe, 0x84, 0xe6, 0x74, 0x10, 0x23,
	0xee, 0x3b, 0x98, 0xcd, 0x0b, 0x86, 0x69, 0x94, 0xd3, 0x22, 0xd2, 0xf2, 0xc6, 0xf1, 0xf6, 0xa6,
	0x1d, 0xec, 0xdf, 0xdf, 0x07, 0x7b, 0x4d, 0x13, 0x84, 0x07, 0x7b, 0x14, 0x8f, 0x8c, 0xb7, 0x47,
	0x71, 0x38, 0xa3, 0x95, 0x3a, 0xb4, 0xd0, 0x6e, 0xb6, 0xbe, 0x54, 0x61, 0xe1, 0xa7, 0x70, 0x89,
	0x2c, 0x4f, 0xe9, 0x03, 0xe2, 0xf5, 0x0a, 0x40, 0x09, 0x85, 0xd2, 0x48, 0x8a, 0x94, 0x58, 0x8b,
	0x1f, 0xe5, 0x53, 0x4d, 0xd3, 0x0f, 0x44, 0x4a, 0xdc, 0x36, 0x4c, 0x1b, 0xad, 0x02, 0x31, 0xe3,
	0xfa, 0xd8, 0x43, 0x2c, 0xaa, 0x6b, 0x52, 0xa8, 0x39, 0x6e, 0x08, 0xf5, 0x0f, 0x8c, 0xa3, 0x34,
	0xd2, 0xfb, 0x99, 0xb8, 0x3e, 0xc5, 0x1f, 0xd0, 0x2a, 0x9d, 0x52, 0xc4, 0x5d, 0x87, 0x39, 0x6c,
	0xfc, 0x28, 0x5d, 0x28, 0x28, 0x92, 0xc2, 0x3a, 0x1f, 0x36, 0x86, 0x8d, 0x50, 0xd7, 0x5b, 0x9f,
	0xab, 0xe0, 0x8e, 0xc4, 0x74, 0x37, 0x45, 0x2c, 0xbb, 0xdf, 0xc6, 0x2d, 0x98, 0xc2, 0x1a, 0x79,
	0x7f, 0x4c, 0x6f, 0x81, 0x6e, 0x08, 0x7f, 0x9b, 0x4f, 0x12, 0x99, 0x90, 0x3c, 0x25, 0xa6, 0x33,
	0x56, 0x62, 0x47, 0x2b, 0xb8, 0x6f, 0x61, 0xae, 0xa0, 0x19, 0x62, 0x9c, 0xf1, 0x24, 0xea, 0x51,
	0xa9, 0x18, 0x4f, 0xac, 0x89, 0x8f, 0x92, 0x6d, 0xdc, 0xa9, 0x1c, 0x19, 0x91, 0xf6, 0x9b, 0xb3,
	0x6b, 0xcf, 0x39, 0xbf, 0xf6, 0x9c, 0x6f, 0xd7, 0x9e, 0xf3, 0xe9, 0xc6, 0xab, 0x9c, 0xdf, 0x78,
	0x95, 0xaf, 0x37, 0x5e, 0xe5, 0xfd, 0xb3, 0x84, 0xa9, 0xe3, 0x6e, 0xec, 0x63, 0x91, 0x05, 0x7f,
	0x78, 0x87, 0x7b, 0xdb, 0x41, 0x7f, 0xf4, 0x31, 0x56, 0x83, 0x9c, 0xca, 0x78, 0x52, 0x3f, 0x8c,
	0xdb, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x19, 0x8f, 0x2b, 0x6b, 0xbe, 0x05, 0x00, 0x00,
}

func (m *EventAuctionCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAuctionCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAuctionCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxDiscount) > 0 {
		i -= len(m.MaxDiscount)
		copy(dAtA[i:], m.MaxDiscount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MaxDiscount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InitialDiscount) > 0 {
		i -= len(m.InitialDiscount)
		copy(dAtA[i:], m.InitialDiscount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.InitialDiscount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Allocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventTokensPurchased) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTokensPurchased) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTokensPurchased) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PricePerToken.Size()
		i -= size
		if _, err := m.PricePerToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.AmountPaid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TokensPurchased.Size()
		i -= size
		if _, err := m.TokensPurchased.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventAuctionCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAuctionCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAuctionCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompletionReason) > 0 {
		i -= len(m.CompletionReason)
		copy(dAtA[i:], m.CompletionReason)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CompletionReason)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.FinalPrice.Size()
		i -= size
		if _, err := m.FinalPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.TotalRaised) > 0 {
		for iNdEx := len(m.TotalRaised) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalRaised[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.TotalSold.Size()
		i -= size
		if _, err := m.TotalSold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventTokensClaimed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTokensClaimed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTokensClaimed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RemainingVesting.Size()
		i -= size
		if _, err := m.RemainingVesting.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ClaimedAmount.Size()
		i -= size
		if _, err := m.ClaimedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Claimer) > 0 {
		i -= len(m.Claimer)
		copy(dAtA[i:], m.Claimer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Claimer)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventAuctionCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovEvents(uint64(m.AuctionId))
	}
	l = m.Allocation.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.InitialDiscount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MaxDiscount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventTokensPurchased) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovEvents(uint64(m.AuctionId))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.TokensPurchased.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.AmountPaid.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.PricePerToken.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventAuctionCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovEvents(uint64(m.AuctionId))
	}
	l = m.TotalSold.Size()
	n += 1 + l + sovEvents(uint64(l))
	if len(m.TotalRaised) > 0 {
		for _, e := range m.TotalRaised {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = m.FinalPrice.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.CompletionReason)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventTokensClaimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovEvents(uint64(m.AuctionId))
	}
	l = len(m.Claimer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.ClaimedAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.RemainingVesting.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventAuctionCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAuctionCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAuctionCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialDiscount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialDiscount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDiscount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxDiscount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTokensPurchased) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTokensPurchased: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTokensPurchased: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensPurchased", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensPurchased.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountPaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePerToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PricePerToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAuctionCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAuctionCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAuctionCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRaised", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRaised = append(m.TotalRaised, types.Coin{})
			if err := m.TotalRaised[len(m.TotalRaised)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTokensClaimed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTokensClaimed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTokensClaimed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingVesting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingVesting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
