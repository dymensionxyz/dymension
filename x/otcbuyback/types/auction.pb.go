// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/otcbuyback/auction.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types1 "github.com/dymensionxyz/dymension/v3/x/streamer/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Auction represents a Dutch auction with decreasing prices over time
type Auction struct {
	// Unique identifier for the auction
	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Completed bool   `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	// Total adym allocation for the auction
	Allocation cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=allocation,proto3,customtype=cosmossdk.io/math.Int" json:"allocation"`
	// Start time of the auction
	StartTime time.Time `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// End time of the auction
	EndTime time.Time `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// Initial discount percentage (e.g., "0.05" for 5%)
	InitialDiscount cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=initial_discount,json=initialDiscount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"initial_discount"`
	// Maximum discount percentage (e.g., "0.50" for 50%)
	MaxDiscount cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=max_discount,json=maxDiscount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_discount"`
	// Total amount of tokens already sold
	SoldAmount cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=sold_amount,json=soldAmount,proto3,customtype=cosmossdk.io/math.Int" json:"sold_amount"`
	// Total raised amount in all accepted tokens
	RaisedAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,9,rep,name=raised_amount,json=raisedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"raised_amount"`
	// The vesting params for purchased tokens in the auction
	VestingParams Auction_VestingParams `protobuf:"bytes,10,opt,name=vesting_params,json=vestingParams,proto3" json:"vesting_params"`
	// Pump params to be used for pump streams after auction completion
	PumpParams Auction_PumpParams `protobuf:"bytes,11,opt,name=pump_params,json=pumpParams,proto3" json:"pump_params"`
}

func (m *Auction) Reset()         { *m = Auction{} }
func (m *Auction) String() string { return proto.CompactTextString(m) }
func (*Auction) ProtoMessage()    {}
func (*Auction) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b55f8661b3f5d1f, []int{0}
}
func (m *Auction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction.Merge(m, src)
}
func (m *Auction) XXX_Size() int {
	return m.Size()
}
func (m *Auction) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction.DiscardUnknown(m)
}

var xxx_messageInfo_Auction proto.InternalMessageInfo

func (m *Auction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Auction) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *Auction) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Auction) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *Auction) GetRaisedAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RaisedAmount
	}
	return nil
}

func (m *Auction) GetVestingParams() Auction_VestingParams {
	if m != nil {
		return m.VestingParams
	}
	return Auction_VestingParams{}
}

func (m *Auction) GetPumpParams() Auction_PumpParams {
	if m != nil {
		return m.PumpParams
	}
	return Auction_PumpParams{}
}

type Auction_VestingParams struct {
	// Vesting period for purchased tokens (e.g., "3 months")
	VestingPeriod time.Duration `protobuf:"bytes,1,opt,name=vesting_period,json=vestingPeriod,proto3,stdduration" json:"vesting_period"`
	// Delay before vesting starts after auction ends (e.g., "7 days")
	VestingStartAfterAuctionEnd time.Duration `protobuf:"bytes,2,opt,name=vesting_start_after_auction_end,json=vestingStartAfterAuctionEnd,proto3,stdduration" json:"vesting_start_after_auction_end"`
}

func (m *Auction_VestingParams) Reset()         { *m = Auction_VestingParams{} }
func (m *Auction_VestingParams) String() string { return proto.CompactTextString(m) }
func (*Auction_VestingParams) ProtoMessage()    {}
func (*Auction_VestingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b55f8661b3f5d1f, []int{0, 0}
}
func (m *Auction_VestingParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction_VestingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction_VestingParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction_VestingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction_VestingParams.Merge(m, src)
}
func (m *Auction_VestingParams) XXX_Size() int {
	return m.Size()
}
func (m *Auction_VestingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction_VestingParams.DiscardUnknown(m)
}

var xxx_messageInfo_Auction_VestingParams proto.InternalMessageInfo

func (m *Auction_VestingParams) GetVestingPeriod() time.Duration {
	if m != nil {
		return m.VestingPeriod
	}
	return 0
}

func (m *Auction_VestingParams) GetVestingStartAfterAuctionEnd() time.Duration {
	if m != nil {
		return m.VestingStartAfterAuctionEnd
	}
	return 0
}

// Pump Params defines parameters for the pump streams created after auction
// completion
type Auction_PumpParams struct {
	EpochIdentifier          string           `protobuf:"bytes,1,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty"`
	NumEpochs                uint64           `protobuf:"varint,2,opt,name=num_epochs,json=numEpochs,proto3" json:"num_epochs,omitempty"`
	NumOfPumpsPerEpoch       uint64           `protobuf:"varint,3,opt,name=num_of_pumps_per_epoch,json=numOfPumpsPerEpoch,proto3" json:"num_of_pumps_per_epoch,omitempty"`
	PumpDistr                types1.PumpDistr `protobuf:"varint,4,opt,name=pump_distr,json=pumpDistr,proto3,enum=dymensionxyz.dymension.streamer.PumpDistr" json:"pump_distr,omitempty"`
	StartTimeAfterAuctionEnd time.Duration    `protobuf:"bytes,5,opt,name=start_time_after_auction_end,json=startTimeAfterAuctionEnd,proto3,stdduration" json:"start_time_after_auction_end"`
}

func (m *Auction_PumpParams) Reset()         { *m = Auction_PumpParams{} }
func (m *Auction_PumpParams) String() string { return proto.CompactTextString(m) }
func (*Auction_PumpParams) ProtoMessage()    {}
func (*Auction_PumpParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b55f8661b3f5d1f, []int{0, 1}
}
func (m *Auction_PumpParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction_PumpParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction_PumpParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction_PumpParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction_PumpParams.Merge(m, src)
}
func (m *Auction_PumpParams) XXX_Size() int {
	return m.Size()
}
func (m *Auction_PumpParams) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction_PumpParams.DiscardUnknown(m)
}

var xxx_messageInfo_Auction_PumpParams proto.InternalMessageInfo

func (m *Auction_PumpParams) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *Auction_PumpParams) GetNumEpochs() uint64 {
	if m != nil {
		return m.NumEpochs
	}
	return 0
}

func (m *Auction_PumpParams) GetNumOfPumpsPerEpoch() uint64 {
	if m != nil {
		return m.NumOfPumpsPerEpoch
	}
	return 0
}

func (m *Auction_PumpParams) GetPumpDistr() types1.PumpDistr {
	if m != nil {
		return m.PumpDistr
	}
	return types1.PumpDistr_PUMP_DISTR_UNSPECIFIED
}

func (m *Auction_PumpParams) GetStartTimeAfterAuctionEnd() time.Duration {
	if m != nil {
		return m.StartTimeAfterAuctionEnd
	}
	return 0
}

func init() {
	proto.RegisterType((*Auction)(nil), "dymensionxyz.dymension.otcbuyback.Auction")
	proto.RegisterType((*Auction_VestingParams)(nil), "dymensionxyz.dymension.otcbuyback.Auction.VestingParams")
	proto.RegisterType((*Auction_PumpParams)(nil), "dymensionxyz.dymension.otcbuyback.Auction.PumpParams")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/otcbuyback/auction.proto", fileDescriptor_9b55f8661b3f5d1f)
}

var fileDescriptor_9b55f8661b3f5d1f = []byte{
	// 785 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x4e, 0x23, 0x47,
	0x10, 0xf6, 0x18, 0x03, 0x76, 0x9b, 0x3f, 0xb5, 0x92, 0xc8, 0x18, 0x32, 0x76, 0x72, 0x72, 0x7e,
	0x98, 0x09, 0x46, 0x51, 0x72, 0x8b, 0x30, 0xe6, 0xe0, 0x04, 0x29, 0x64, 0x82, 0x72, 0x88, 0x90,
	0x46, 0xed, 0x99, 0xb6, 0x69, 0xe1, 0xee, 0x1e, 0x4d, 0xf7, 0x58, 0x76, 0x9e, 0x82, 0x63, 0x9e,
	0x21, 0xe7, 0x9c, 0xf2, 0x00, 0x11, 0xb9, 0xa1, 0x9c, 0x56, 0x7b, 0x80, 0x15, 0xbc, 0xc8, 0xaa,
	0x7f, 0xfc, 0x03, 0xbb, 0x68, 0x81, 0x93, 0xa7, 0xab, 0xeb, 0xfb, 0xaa, 0xea, 0xeb, 0xaa, 0x32,
	0xf0, 0xe3, 0x31, 0xc5, 0x4c, 0x10, 0xce, 0x46, 0xe3, 0x3f, 0x66, 0x07, 0x9f, 0xcb, 0xa8, 0x9b,
	0x8d, 0xbb, 0x28, 0x3a, 0xf7, 0x51, 0x16, 0x49, 0xc2, 0x99, 0x97, 0xa4, 0x5c, 0x72, 0xf8, 0xd9,
	0x3c, 0xc0, 0x9b, 0x1e, 0xbc, 0x19, 0xa0, 0xfa, 0x51, 0x9f, 0xf7, 0xb9, 0xf6, 0xf6, 0xd5, 0x97,
	0x01, 0x56, 0x6b, 0x7d, 0xce, 0xfb, 0x03, 0xec, 0xeb, 0x53, 0x37, 0xeb, 0xf9, 0x92, 0x50, 0x2c,
	0x24, 0xa2, 0x89, 0x75, 0x70, 0x1f, 0x3a, 0xc4, 0x59, 0x8a, 0x66, 0x91, 0xab, 0x6e, 0xc4, 0x05,
	0xe5, 0xc2, 0xef, 0x22, 0x81, 0xfd, 0xe1, 0x6e, 0x17, 0x4b, 0xb4, 0xeb, 0x47, 0x9c, 0x4c, 0xee,
	0x37, 0xcd, 0x7d, 0x68, 0x22, 0x9b, 0x83, 0xbd, 0xfa, 0xfa, 0x91, 0x2a, 0x85, 0x4c, 0x31, 0xa2,
	0x38, 0xb5, 0x1f, 0xc6, 0xfb, 0xf3, 0xff, 0x00, 0x58, 0xde, 0x37, 0x45, 0xc3, 0x35, 0x90, 0x27,
	0x71, 0xc5, 0xa9, 0x3b, 0x8d, 0x42, 0x90, 0x27, 0x31, 0xdc, 0x06, 0xa5, 0x88, 0xd3, 0x64, 0x80,
	0x25, 0x8e, 0x2b, 0xf9, 0xba, 0xd3, 0x28, 0x06, 0x33, 0x03, 0xfc, 0x09, 0x00, 0x34, 0x18, 0xf0,
	0x48, 0xa7, 0x5d, 0x59, 0xa8, 0x3b, 0x8d, 0x52, 0xeb, 0xab, 0xcb, 0xeb, 0x5a, 0xee, 0xf5, 0x75,
	0xed, 0x63, 0x93, 0x91, 0x88, 0xcf, 0x3d, 0xc2, 0x7d, 0x8a, 0xe4, 0x99, 0xd7, 0x61, 0xf2, 0xff,
	0xbf, 0x77, 0x80, 0x4d, 0xb5, 0xc3, 0x64, 0x30, 0x07, 0x87, 0x07, 0x00, 0x08, 0x89, 0x52, 0x19,
	0x2a, 0xa1, 0x2a, 0x85, 0xba, 0xd3, 0x28, 0x37, 0xab, 0x9e, 0x11, 0xc9, 0x9b, 0x88, 0xe4, 0x9d,
	0x4c, 0x54, 0x6c, 0x15, 0x55, 0xa0, 0x8b, 0x9b, 0x9a, 0x13, 0x94, 0x34, 0x4e, 0xdd, 0xc0, 0x1f,
	0x40, 0x11, 0xb3, 0xd8, 0x50, 0x2c, 0x3e, 0x83, 0x62, 0x19, 0xb3, 0x58, 0x13, 0x9c, 0x82, 0x0d,
	0xc2, 0x88, 0x24, 0x68, 0x10, 0xc6, 0x44, 0x44, 0x3c, 0x63, 0xb2, 0xb2, 0xa4, 0x0b, 0xdb, 0xb5,
	0x85, 0x6d, 0xbd, 0x5b, 0xd8, 0x11, 0xee, 0xa3, 0x68, 0xdc, 0xc6, 0xd1, 0x5c, 0x79, 0x6d, 0x1c,
	0x05, 0xeb, 0x96, 0xaa, 0x6d, 0x99, 0xe0, 0x09, 0x58, 0xa1, 0x68, 0x34, 0x63, 0x5e, 0x7e, 0x29,
	0x73, 0x99, 0xa2, 0xd1, 0x94, 0xf5, 0x08, 0x94, 0x05, 0x1f, 0xc4, 0x21, 0xa2, 0x9a, 0xb4, 0xf8,
	0x82, 0x77, 0x50, 0xf8, 0x7d, 0x0d, 0x87, 0x09, 0x58, 0x4d, 0x11, 0x11, 0x78, 0xca, 0x57, 0xaa,
	0x2f, 0x34, 0xca, 0xcd, 0x4d, 0xcf, 0xfa, 0xab, 0x7e, 0xf4, 0x6c, 0x3f, 0x7a, 0x07, 0x9c, 0xb0,
	0xd6, 0x37, 0x2a, 0xd4, 0x5f, 0x37, 0xb5, 0x46, 0x9f, 0xc8, 0xb3, 0xac, 0xeb, 0x45, 0x9c, 0xda,
	0x7e, 0xb4, 0x3f, 0x3b, 0x22, 0x3e, 0xf7, 0xe5, 0x38, 0xc1, 0x42, 0x03, 0x44, 0xb0, 0x62, 0x22,
	0xd8, 0x88, 0x18, 0xac, 0x0d, 0xb1, 0x90, 0x84, 0xf5, 0xc3, 0x04, 0xa5, 0x88, 0x8a, 0x0a, 0xd0,
	0x4f, 0xf7, 0xbd, 0xf7, 0xc1, 0xe1, 0xf3, 0x6c, 0xe3, 0x7a, 0xbf, 0x19, 0x82, 0x63, 0x8d, 0x6f,
	0x15, 0x54, 0x46, 0xc1, 0xea, 0x70, 0xde, 0x08, 0x4f, 0x41, 0x39, 0xc9, 0x68, 0x32, 0x89, 0x51,
	0xd6, 0x31, 0xbe, 0x7d, 0x46, 0x8c, 0xe3, 0x8c, 0x26, 0xf7, 0x02, 0x80, 0x64, 0x6a, 0xa9, 0xfe,
	0xeb, 0x80, 0xd5, 0x7b, 0x49, 0xc0, 0x1f, 0xe7, 0xca, 0xc2, 0x29, 0xe1, 0x66, 0xae, 0x94, 0x92,
	0x0f, 0x3b, 0xb2, 0x6d, 0x27, 0xdf, 0x34, 0xe4, 0x9f, 0xaa, 0x21, 0xa7, 0xb9, 0x6b, 0x24, 0x24,
	0xa0, 0x36, 0xe1, 0x32, 0x43, 0x82, 0x7a, 0x12, 0xa7, 0xa1, 0xdd, 0x55, 0x21, 0x66, 0x66, 0x3a,
	0x9f, 0x48, 0xbe, 0x65, 0xb9, 0x7e, 0x55, 0x54, 0xfb, 0x8a, 0xc9, 0x96, 0x78, 0xc8, 0xe2, 0xea,
	0x3f, 0x79, 0x00, 0x66, 0x95, 0xc2, 0x2f, 0xc0, 0x06, 0x4e, 0x78, 0x74, 0x16, 0x92, 0x18, 0x33,
	0x49, 0x7a, 0x04, 0xa7, 0xba, 0x8e, 0x52, 0xb0, 0xae, 0xed, 0x9d, 0xa9, 0x19, 0x7e, 0x0a, 0x00,
	0xcb, 0x68, 0xa8, 0xcd, 0x42, 0xe7, 0x53, 0x08, 0x4a, 0x2c, 0xa3, 0x87, 0xda, 0x00, 0x9b, 0xe0,
	0x13, 0x75, 0xcd, 0x7b, 0xa1, 0x92, 0x4d, 0x28, 0x51, 0x8c, 0xaf, 0xde, 0x1c, 0x85, 0x00, 0xb2,
	0x8c, 0xfe, 0xdc, 0x53, 0xa1, 0xc5, 0x31, 0x4e, 0x35, 0x08, 0x76, 0x80, 0xd6, 0x58, 0x4d, 0x8c,
	0x4c, 0xf5, 0x52, 0x58, 0x6b, 0x7e, 0xf9, 0xd8, 0x93, 0x4d, 0xd6, 0x9b, 0x7e, 0xa8, 0xb6, 0x42,
	0x04, 0xa5, 0x64, 0xf2, 0x09, 0x23, 0xb0, 0x3d, 0xdb, 0x2f, 0xef, 0xd1, 0x6f, 0xf1, 0xe9, 0xfa,
	0x55, 0xa6, 0x0b, 0xe7, 0x81, 0x78, 0xad, 0x5f, 0x2e, 0x6f, 0x5d, 0xe7, 0xea, 0xd6, 0x75, 0xde,
	0xdc, 0xba, 0xce, 0xc5, 0x9d, 0x9b, 0xbb, 0xba, 0x73, 0x73, 0xaf, 0xee, 0xdc, 0xdc, 0xef, 0xdf,
	0xcd, 0x0d, 0xc7, 0x23, 0xeb, 0x79, 0xb8, 0xe7, 0x8f, 0xe6, 0xff, 0x89, 0xf4, 0xc4, 0x74, 0x97,
	0x74, 0x26, 0x7b, 0x6f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x60, 0x08, 0x30, 0x16, 0xbb, 0x06, 0x00,
	0x00,
}

func (m *Auction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PumpParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.VestingParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.RaisedAmount) > 0 {
		for iNdEx := len(m.RaisedAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RaisedAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size := m.SoldAmount.Size()
		i -= size
		if _, err := m.SoldAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.MaxDiscount.Size()
		i -= size
		if _, err := m.MaxDiscount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.InitialDiscount.Size()
		i -= size
		if _, err := m.InitialDiscount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintAuction(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintAuction(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	{
		size := m.Allocation.Size()
		i -= size
		if _, err := m.Allocation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Auction_VestingParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction_VestingParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction_VestingParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.VestingStartAfterAuctionEnd, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.VestingStartAfterAuctionEnd):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintAuction(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	n6, err6 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.VestingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.VestingPeriod):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintAuction(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Auction_PumpParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction_PumpParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction_PumpParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.StartTimeAfterAuctionEnd, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.StartTimeAfterAuctionEnd):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintAuction(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x2a
	if m.PumpDistr != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.PumpDistr))
		i--
		dAtA[i] = 0x20
	}
	if m.NumOfPumpsPerEpoch != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.NumOfPumpsPerEpoch))
		i--
		dAtA[i] = 0x18
	}
	if m.NumEpochs != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.NumEpochs))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Auction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuction(uint64(m.Id))
	}
	if m.Completed {
		n += 2
	}
	l = m.Allocation.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAuction(uint64(l))
	l = m.InitialDiscount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.MaxDiscount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.SoldAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	if len(m.RaisedAmount) > 0 {
		for _, e := range m.RaisedAmount {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	l = m.VestingParams.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.PumpParams.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *Auction_VestingParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.VestingPeriod)
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.VestingStartAfterAuctionEnd)
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *Auction_PumpParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	if m.NumEpochs != 0 {
		n += 1 + sovAuction(uint64(m.NumEpochs))
	}
	if m.NumOfPumpsPerEpoch != 0 {
		n += 1 + sovAuction(uint64(m.NumOfPumpsPerEpoch))
	}
	if m.PumpDistr != 0 {
		n += 1 + sovAuction(uint64(m.PumpDistr))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.StartTimeAfterAuctionEnd)
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Auction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialDiscount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialDiscount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDiscount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxDiscount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SoldAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaisedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaisedAmount = append(m.RaisedAmount, types.Coin{})
			if err := m.RaisedAmount[len(m.RaisedAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PumpParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PumpParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Auction_VestingParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.VestingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingStartAfterAuctionEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.VestingStartAfterAuctionEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Auction_PumpParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PumpParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PumpParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochs", wireType)
			}
			m.NumEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfPumpsPerEpoch", wireType)
			}
			m.NumOfPumpsPerEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfPumpsPerEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PumpDistr", wireType)
			}
			m.PumpDistr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PumpDistr |= types1.PumpDistr(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeAfterAuctionEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.StartTimeAfterAuctionEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
