// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/otcbuyback/tokens.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AcceptedToken defines an accepted token for purchases
type AcceptedToken struct {
	Denom     string    `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	TokenData TokenData `protobuf:"bytes,2,opt,name=token_data,json=tokenData,proto3" json:"token_data"`
}

func (m *AcceptedToken) Reset()         { *m = AcceptedToken{} }
func (m *AcceptedToken) String() string { return proto.CompactTextString(m) }
func (*AcceptedToken) ProtoMessage()    {}
func (*AcceptedToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_af26f433e4114f8c, []int{0}
}
func (m *AcceptedToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptedToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptedToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptedToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptedToken.Merge(m, src)
}
func (m *AcceptedToken) XXX_Size() int {
	return m.Size()
}
func (m *AcceptedToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptedToken.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptedToken proto.InternalMessageInfo

func (m *AcceptedToken) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AcceptedToken) GetTokenData() TokenData {
	if m != nil {
		return m.TokenData
	}
	return TokenData{}
}

// TokenData defines data for an accepted token
type TokenData struct {
	PoolId           uint64                      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	LastAveragePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=last_average_price,json=lastAveragePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"last_average_price"`
}

func (m *TokenData) Reset()         { *m = TokenData{} }
func (m *TokenData) String() string { return proto.CompactTextString(m) }
func (*TokenData) ProtoMessage()    {}
func (*TokenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_af26f433e4114f8c, []int{1}
}
func (m *TokenData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenData.Merge(m, src)
}
func (m *TokenData) XXX_Size() int {
	return m.Size()
}
func (m *TokenData) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenData.DiscardUnknown(m)
}

var xxx_messageInfo_TokenData proto.InternalMessageInfo

func (m *TokenData) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func init() {
	proto.RegisterType((*AcceptedToken)(nil), "dymensionxyz.dymension.otcbuyback.AcceptedToken")
	proto.RegisterType((*TokenData)(nil), "dymensionxyz.dymension.otcbuyback.TokenData")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/otcbuyback/tokens.proto", fileDescriptor_af26f433e4114f8c)
}

var fileDescriptor_af26f433e4114f8c = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x3f, 0x8b, 0xdb, 0x40,
	0x10, 0xc5, 0xa5, 0xe0, 0x38, 0x68, 0x43, 0x20, 0x08, 0x43, 0x1c, 0x07, 0x64, 0xc7, 0x95, 0x8b,
	0x64, 0x17, 0xc7, 0x45, 0x6a, 0x1b, 0x37, 0x81, 0x14, 0xb1, 0x48, 0x95, 0x46, 0xac, 0x76, 0x27,
	0xb2, 0xb0, 0xa5, 0x11, 0xda, 0x95, 0xb1, 0xd2, 0xa7, 0xcf, 0x87, 0xc9, 0x87, 0x70, 0x69, 0xae,
	0x3a, 0xae, 0x30, 0x87, 0xfd, 0x45, 0x0e, 0x69, 0xfd, 0xe7, 0xee, 0xe0, 0xb8, 0x4e, 0x4f, 0xef,
	0xcd, 0x6f, 0xf4, 0xc4, 0x10, 0x2a, 0xcb, 0x04, 0x52, 0x15, 0x63, 0xba, 0x2e, 0xff, 0xb0, 0xb3,
	0x60, 0xa8, 0x45, 0x58, 0x94, 0x21, 0x17, 0x0b, 0xa6, 0x71, 0x01, 0xa9, 0xa2, 0x59, 0x8e, 0x1a,
	0xdd, 0x8f, 0xf7, 0xf3, 0x97, 0x61, 0x7a, 0xc9, 0x77, 0x5a, 0x11, 0x46, 0x58, 0xa7, 0x59, 0xf5,
	0x64, 0x06, 0x3b, 0xdd, 0x08, 0x31, 0x5a, 0x02, 0xab, 0x55, 0x58, 0xfc, 0x66, 0x3a, 0x4e, 0x40,
	0x69, 0x9e, 0x64, 0xc7, 0x80, 0xf7, 0x38, 0x20, 0x8b, 0x9c, 0xeb, 0x8a, 0x7d, 0xf4, 0x05, 0xaa,
	0x04, 0x15, 0x0b, 0xb9, 0x02, 0xb6, 0x1a, 0x86, 0xa0, 0xf9, 0x90, 0x09, 0x8c, 0x4f, 0xfe, 0x7b,
	0xe3, 0x07, 0x66, 0xb3, 0x11, 0xc6, 0xea, 0xaf, 0xc9, 0x9b, 0xb1, 0x10, 0x90, 0x69, 0x90, 0x3f,
	0xab, 0x32, 0x6e, 0x8b, 0xbc, 0x94, 0x90, 0x62, 0xd2, 0xb6, 0x7b, 0xf6, 0xc0, 0xf1, 0x8d, 0x70,
	0x67, 0x84, 0xd4, 0x5d, 0x03, 0xc9, 0x35, 0x6f, 0xbf, 0xe8, 0xd9, 0x83, 0xd7, 0x5f, 0x3e, 0xd1,
	0x67, 0x0b, 0xd3, 0x9a, 0x39, 0xe5, 0x9a, 0x4f, 0x1a, 0x9b, 0x5d, 0xd7, 0xf2, 0x1d, 0x7d, 0x7a,
	0xd1, 0xff, 0x6b, 0x13, 0xe7, 0x6c, 0xbb, 0xef, 0xc8, 0xab, 0x0c, 0x71, 0x19, 0xc4, 0xb2, 0x5e,
	0xdc, 0xf0, 0x9b, 0x95, 0xfc, 0x26, 0xdd, 0x80, 0xb8, 0x4b, 0xae, 0x74, 0xc0, 0x57, 0x90, 0xf3,
	0x08, 0x82, 0x2c, 0x8f, 0x05, 0xd4, 0x5f, 0xe0, 0x4c, 0x86, 0x15, 0xf3, 0x66, 0xd7, 0xfd, 0x60,
	0x2a, 0x29, 0xb9, 0xa0, 0x31, 0xb2, 0x84, 0xeb, 0x39, 0xfd, 0x0e, 0x11, 0x17, 0xe5, 0x14, 0xc4,
	0xd5, 0xff, 0xcf, 0xe4, 0xd8, 0x78, 0x0a, 0xc2, 0x7f, 0x5b, 0xc1, 0xc6, 0x86, 0xf5, 0xa3, 0x42,
	0x4d, 0x66, 0x9b, 0xbd, 0x67, 0x6f, 0xf7, 0x9e, 0x7d, 0xbb, 0xf7, 0xec, 0x7f, 0x07, 0xcf, 0xda,
	0x1e, 0x3c, 0xeb, 0xfa, 0xe0, 0x59, 0xbf, 0xbe, 0x46, 0xb1, 0x9e, 0x17, 0x21, 0x15, 0x98, 0xb0,
	0x27, 0x6e, 0x61, 0x35, 0x62, 0xeb, 0x07, 0x07, 0x51, 0x66, 0xa0, 0xc2, 0x66, 0xfd, 0x6f, 0x47,
	0x77, 0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0x20, 0x0f, 0xaa, 0x42, 0x02, 0x00, 0x00,
}

func (m *AcceptedToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptedToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptedToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTokens(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTokens(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LastAveragePrice.Size()
		i -= size
		if _, err := m.LastAveragePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTokens(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintTokens(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokens(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokens(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AcceptedToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTokens(uint64(l))
	}
	l = m.TokenData.Size()
	n += 1 + l + sovTokens(uint64(l))
	return n
}

func (m *TokenData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTokens(uint64(m.PoolId))
	}
	l = m.LastAveragePrice.Size()
	n += 1 + l + sovTokens(uint64(l))
	return n
}

func sovTokens(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokens(x uint64) (n int) {
	return sovTokens(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AcceptedToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokens
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptedToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptedToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokens(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokens
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokens
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAveragePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastAveragePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokens(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokens
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokens(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokens
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokens
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokens
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokens
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokens        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokens          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokens = fmt.Errorf("proto: unexpected end of group")
)
