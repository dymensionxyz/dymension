// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/sponsorship/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the sponsorship module's genesis state.
type GenesisState struct {
	// Params defines params for x/sponsorship module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// VoterInfos hold information about voters.
	VoterInfos []VoterInfo `protobuf:"bytes,2,rep,name=voter_infos,json=voterInfos,proto3" json:"voter_infos"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee4956cb806e59f4, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetVoterInfos() []VoterInfo {
	if m != nil {
		return m.VoterInfos
	}
	return nil
}

// VoterInfo hold information about the voter.
type VoterInfo struct {
	// Voter is the bech32 encoded address of the user sending the vote.
	Voter string `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	// Vote represents the user's vote.
	Vote Vote `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote"`
	// Validators is a breakdown of the user's voting power for different validators.
	Validators []ValidatorVotingPower `protobuf:"bytes,3,rep,name=validators,proto3" json:"validators"`
}

func (m *VoterInfo) Reset()         { *m = VoterInfo{} }
func (m *VoterInfo) String() string { return proto.CompactTextString(m) }
func (*VoterInfo) ProtoMessage()    {}
func (*VoterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee4956cb806e59f4, []int{1}
}
func (m *VoterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoterInfo.Merge(m, src)
}
func (m *VoterInfo) XXX_Size() int {
	return m.Size()
}
func (m *VoterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VoterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VoterInfo proto.InternalMessageInfo

func (m *VoterInfo) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *VoterInfo) GetVote() Vote {
	if m != nil {
		return m.Vote
	}
	return Vote{}
}

func (m *VoterInfo) GetValidators() []ValidatorVotingPower {
	if m != nil {
		return m.Validators
	}
	return nil
}

// ValidatorVotingPower holds information about how much voting power the user
// gets from delegating to the given validator.
type ValidatorVotingPower struct {
	// Validator is the bech32 encoded address of the validator.
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// Power is a total voting power assigned to this validator.
	Power github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=power,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"power"`
}

func (m *ValidatorVotingPower) Reset()         { *m = ValidatorVotingPower{} }
func (m *ValidatorVotingPower) String() string { return proto.CompactTextString(m) }
func (*ValidatorVotingPower) ProtoMessage()    {}
func (*ValidatorVotingPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee4956cb806e59f4, []int{2}
}
func (m *ValidatorVotingPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorVotingPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorVotingPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorVotingPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorVotingPower.Merge(m, src)
}
func (m *ValidatorVotingPower) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorVotingPower) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorVotingPower.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorVotingPower proto.InternalMessageInfo

func (m *ValidatorVotingPower) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "dymensionxyz.dymension.sponsorship.GenesisState")
	proto.RegisterType((*VoterInfo)(nil), "dymensionxyz.dymension.sponsorship.VoterInfo")
	proto.RegisterType((*ValidatorVotingPower)(nil), "dymensionxyz.dymension.sponsorship.ValidatorVotingPower")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/sponsorship/genesis.proto", fileDescriptor_ee4956cb806e59f4)
}

var fileDescriptor_ee4956cb806e59f4 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x6e, 0xd4, 0x40,
	0x10, 0xc6, 0xbd, 0xf9, 0x27, 0x79, 0x8f, 0x6a, 0x75, 0x85, 0x49, 0xe1, 0x44, 0x2e, 0xd0, 0x09,
	0xe9, 0xd6, 0x28, 0x41, 0x28, 0x2d, 0x16, 0x12, 0xa4, 0x8b, 0x1c, 0x94, 0x82, 0x82, 0xc8, 0x89,
	0x37, 0xbe, 0x15, 0x78, 0xc7, 0xda, 0x59, 0xcc, 0x1d, 0x4f, 0x41, 0xc1, 0x73, 0x50, 0xf1, 0x10,
	0x57, 0x9e, 0xa8, 0x10, 0xc5, 0x81, 0xee, 0x5e, 0x04, 0x79, 0xed, 0x33, 0x46, 0x22, 0x3a, 0x57,
	0x9e, 0xf1, 0xcc, 0xef, 0xf3, 0xf7, 0x59, 0x43, 0x9f, 0xa4, 0xb3, 0x5c, 0x28, 0x94, 0xa0, 0xa6,
	0xb3, 0x4f, 0x61, 0xdb, 0x84, 0x58, 0x80, 0x42, 0xd0, 0x38, 0x91, 0x45, 0x98, 0x09, 0x25, 0x50,
	0x22, 0x2f, 0x34, 0x18, 0x60, 0x41, 0x97, 0xe0, 0x6d, 0xc3, 0x3b, 0xc4, 0xe1, 0x30, 0x83, 0x0c,
	0xec, 0x7a, 0x58, 0x55, 0x35, 0x79, 0xf8, 0xf0, 0x16, 0x30, 0x07, 0xbc, 0xae, 0x07, 0x75, 0xd3,
	0x8c, 0x9e, 0xf6, 0xb0, 0xd1, 0xa9, 0x6b, 0x2a, 0xf8, 0x4a, 0xe8, 0x83, 0x97, 0xb5, 0xb9, 0x4b,
	0x93, 0x18, 0xc1, 0x5e, 0xd1, 0x83, 0x22, 0xd1, 0x49, 0x8e, 0x1e, 0x39, 0x26, 0xa3, 0xc1, 0xc9,
	0x63, 0xbe, 0xdd, 0x2c, 0xbf, 0xb0, 0x44, 0xb4, 0x37, 0x5f, 0x1e, 0x39, 0x71, 0xc3, 0xb3, 0xd7,
	0x74, 0x50, 0x82, 0x11, 0xfa, 0x5a, 0xaa, 0x3b, 0x40, 0x6f, 0xe7, 0x78, 0x77, 0x34, 0x38, 0x19,
	0xf7, 0x91, 0xbb, 0xaa, 0xb0, 0x73, 0x75, 0x07, 0x8d, 0x22, 0x2d, 0x37, 0x2f, 0x30, 0xf8, 0x45,
	0xa8, 0xdb, 0xce, 0x19, 0xa7, 0xfb, 0x76, 0x66, 0xcd, 0xba, 0x91, 0xf7, 0xfd, 0xdb, 0x78, 0xd8,
	0xfc, 0x95, 0xe7, 0x69, 0xaa, 0x05, 0xe2, 0xa5, 0xd1, 0x52, 0x65, 0x71, 0xbd, 0xc6, 0x22, 0xba,
	0x57, 0x15, 0xde, 0x8e, 0xcd, 0x36, 0xea, 0x6b, 0xa6, 0xf1, 0x61, 0x59, 0xf6, 0x96, 0xd2, 0x32,
	0x79, 0x2f, 0xd3, 0xc4, 0x80, 0x46, 0x6f, 0xd7, 0xc6, 0x3a, 0xeb, 0xa5, 0xb4, 0xa1, 0xae, 0xc0,
	0x48, 0x95, 0x5d, 0xc0, 0x47, 0xa1, 0xdb, 0x84, 0xad, 0x62, 0xf0, 0x85, 0xd0, 0xe1, 0xff, 0x56,
	0xd9, 0x33, 0xea, 0xb6, 0x6b, 0x5b, 0x03, 0xff, 0x5d, 0x65, 0x2f, 0xe8, 0x7e, 0x51, 0x09, 0xd8,
	0xd4, 0x6e, 0xc4, 0xab, 0x2f, 0xfe, 0x5c, 0x1e, 0x3d, 0xca, 0xa4, 0x99, 0x7c, 0xb8, 0xe1, 0xb7,
	0x90, 0x37, 0x97, 0xd4, 0x3c, 0xc6, 0x98, 0xbe, 0x0b, 0xcd, 0xac, 0x10, 0xc8, 0xcf, 0x95, 0x89,
	0x6b, 0x38, 0x8a, 0xe7, 0x2b, 0x9f, 0x2c, 0x56, 0x3e, 0xf9, 0xbd, 0xf2, 0xc9, 0xe7, 0xb5, 0xef,
	0x2c, 0xd6, 0xbe, 0xf3, 0x63, 0xed, 0x3b, 0x6f, 0xce, 0x3a, 0x42, 0xf7, 0x1c, 0x61, 0x79, 0x1a,
	0x4e, 0xff, 0xb9, 0x44, 0x2b, 0x7f, 0x73, 0x60, 0x8f, 0xf0, 0xf4, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x15, 0x95, 0x9f, 0x51, 0x43, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterInfos) > 0 {
		for iNdEx := len(m.VoterInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoterInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VoterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorVotingPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorVotingPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorVotingPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Power.Size()
		i -= size
		if _, err := m.Power.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.VoterInfos) > 0 {
		for _, e := range m.VoterInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *VoterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Vote.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ValidatorVotingPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Power.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterInfos = append(m.VoterInfos, VoterInfo{})
			if err := m.VoterInfos[len(m.VoterInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, ValidatorVotingPower{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorVotingPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorVotingPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorVotingPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
