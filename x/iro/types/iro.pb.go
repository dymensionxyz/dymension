// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/iro/iro.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Bonding curve represents a bonding curve in the IRO module.
// BondingCurve represents a bonding curve with parameters M, N, and C.
// The price of the token is calculated as follows:
// price = M * x^N + C
type BondingCurve struct {
	M                      cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=M,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"M"`
	N                      cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=N,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"N"`
	C                      cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=C,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"C"`
	RollappDenomDecimals   uint64                      `protobuf:"varint,4,opt,name=rollapp_denom_decimals,json=rollappDenomDecimals,proto3" json:"rollapp_denom_decimals,omitempty"`
	LiquidityDenomDecimals uint64                      `protobuf:"varint,5,opt,name=liquidity_denom_decimals,json=liquidityDenomDecimals,proto3" json:"liquidity_denom_decimals,omitempty"`
}

func (m *BondingCurve) Reset()         { *m = BondingCurve{} }
func (m *BondingCurve) String() string { return proto.CompactTextString(m) }
func (*BondingCurve) ProtoMessage()    {}
func (*BondingCurve) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d27cc6b5064d3f, []int{0}
}
func (m *BondingCurve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondingCurve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondingCurve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondingCurve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondingCurve.Merge(m, src)
}
func (m *BondingCurve) XXX_Size() int {
	return m.Size()
}
func (m *BondingCurve) XXX_DiscardUnknown() {
	xxx_messageInfo_BondingCurve.DiscardUnknown(m)
}

var xxx_messageInfo_BondingCurve proto.InternalMessageInfo

func (m *BondingCurve) GetRollappDenomDecimals() uint64 {
	if m != nil {
		return m.RollappDenomDecimals
	}
	return 0
}

func (m *BondingCurve) GetLiquidityDenomDecimals() uint64 {
	if m != nil {
		return m.LiquidityDenomDecimals
	}
	return 0
}

// Plan represents a plan in the IRO module.
type Plan struct {
	// The ID of the plan.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the rollapp.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// The module account address to hold the raised DYM tokens.
	ModuleAccAddress string `protobuf:"bytes,3,opt,name=module_acc_address,json=moduleAccAddress,proto3" json:"module_acc_address,omitempty"`
	// The total amount of tokens allocated for the IRO.
	TotalAllocation types.Coin   `protobuf:"bytes,4,opt,name=total_allocation,json=totalAllocation,proto3" json:"total_allocation"`
	BondingCurve    BondingCurve `protobuf:"bytes,5,opt,name=bonding_curve,json=bondingCurve,proto3" json:"bonding_curve"`
	// If set, the plan is settled, and the minted allocated tokens can be claimed
	// for this settled_denom
	SettledDenom string `protobuf:"bytes,6,opt,name=settled_denom,json=settledDenom,proto3" json:"settled_denom,omitempty"`
	// The start time of the plan.
	StartTime time.Time `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// The time before which the rollapp cannot be started.
	// Deprecated: use iro_plan_duration instead.
	DeprecatedPreLaunchTime time.Time `protobuf:"bytes,8,opt,name=deprecated_pre_launch_time,json=deprecatedPreLaunchTime,proto3,stdtime" json:"deprecated_pre_launch_time"` // Deprecated: Do not use.
	// The amount of tokens sold so far.
	SoldAmt cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=sold_amt,json=soldAmt,proto3,customtype=cosmossdk.io/math.Int" json:"sold_amt"`
	// The amount of tokens claimed so far.
	ClaimedAmt cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=claimed_amt,json=claimedAmt,proto3,customtype=cosmossdk.io/math.Int" json:"claimed_amt"`
	// The incentive plan parameters for the tokens left after the plan is
	// settled.
	IncentivePlanParams IncentivePlanParams `protobuf:"bytes,11,opt,name=incentive_plan_params,json=incentivePlanParams,proto3" json:"incentive_plan_params"`
	// The maximum amount of tokens that can be sold for the plan.
	// This ensures we'll have enough tokens to bootstrap liquidity
	MaxAmountToSell cosmossdk_io_math.Int `protobuf:"bytes,12,opt,name=max_amount_to_sell,json=maxAmountToSell,proto3,customtype=cosmossdk.io/math.Int" json:"max_amount_to_sell"`
	// The part of the liquidity that will be used for liquidity pool
	LiquidityPart cosmossdk_io_math.LegacyDec `protobuf:"bytes,13,opt,name=liquidity_part,json=liquidityPart,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"liquidity_part"`
	VestingPlan   IROVestingPlan              `protobuf:"bytes,14,opt,name=vesting_plan,json=vestingPlan,proto3" json:"vesting_plan"`
	// Whether trading is enabled for the plan. default to true
	// can be set to false initially, to require EnableTrading tx for this IRO
	TradingEnabled bool `protobuf:"varint,15,opt,name=trading_enabled,json=tradingEnabled,proto3" json:"trading_enabled,omitempty"`
	// The duration of the plan (minimal time from start time to pre-launch time)
	IroPlanDuration time.Duration `protobuf:"bytes,16,opt,name=iro_plan_duration,json=iroPlanDuration,proto3,stdduration" json:"iro_plan_duration"`
	// the denom used for raising liquidity
	LiquidityDenom string `protobuf:"bytes,17,opt,name=liquidity_denom,json=liquidityDenom,proto3" json:"liquidity_denom,omitempty"`
	// Whether the plan was created as a fair launch
	FairLaunched bool `protobuf:"varint,18,opt,name=fair_launched,json=fairLaunched,proto3" json:"fair_launched,omitempty"`
	// graduated pool ID
	GraduatedPoolId uint64 `protobuf:"varint,19,opt,name=graduated_pool_id,json=graduatedPoolId,proto3" json:"graduated_pool_id,omitempty"`
}

func (m *Plan) Reset()         { *m = Plan{} }
func (m *Plan) String() string { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()    {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d27cc6b5064d3f, []int{1}
}
func (m *Plan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(m, src)
}
func (m *Plan) XXX_Size() int {
	return m.Size()
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

func (m *Plan) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Plan) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *Plan) GetModuleAccAddress() string {
	if m != nil {
		return m.ModuleAccAddress
	}
	return ""
}

func (m *Plan) GetTotalAllocation() types.Coin {
	if m != nil {
		return m.TotalAllocation
	}
	return types.Coin{}
}

func (m *Plan) GetBondingCurve() BondingCurve {
	if m != nil {
		return m.BondingCurve
	}
	return BondingCurve{}
}

func (m *Plan) GetSettledDenom() string {
	if m != nil {
		return m.SettledDenom
	}
	return ""
}

func (m *Plan) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

// Deprecated: Do not use.
func (m *Plan) GetDeprecatedPreLaunchTime() time.Time {
	if m != nil {
		return m.DeprecatedPreLaunchTime
	}
	return time.Time{}
}

func (m *Plan) GetIncentivePlanParams() IncentivePlanParams {
	if m != nil {
		return m.IncentivePlanParams
	}
	return IncentivePlanParams{}
}

func (m *Plan) GetVestingPlan() IROVestingPlan {
	if m != nil {
		return m.VestingPlan
	}
	return IROVestingPlan{}
}

func (m *Plan) GetTradingEnabled() bool {
	if m != nil {
		return m.TradingEnabled
	}
	return false
}

func (m *Plan) GetIroPlanDuration() time.Duration {
	if m != nil {
		return m.IroPlanDuration
	}
	return 0
}

func (m *Plan) GetLiquidityDenom() string {
	if m != nil {
		return m.LiquidityDenom
	}
	return ""
}

func (m *Plan) GetFairLaunched() bool {
	if m != nil {
		return m.FairLaunched
	}
	return false
}

func (m *Plan) GetGraduatedPoolId() uint64 {
	if m != nil {
		return m.GraduatedPoolId
	}
	return 0
}

type IncentivePlanParams struct {
	// start_time_after_settlement is the time after IRO settlement when the
	// distribution of the remaining tokens as incentives will start
	StartTimeAfterSettlement time.Duration `protobuf:"bytes,1,opt,name=start_time_after_settlement,json=startTimeAfterSettlement,proto3,stdduration" json:"start_time_after_settlement"`
	// num_epochs_paid_over is the number of total epochs distribution will be
	// completed over
	NumEpochsPaidOver uint64 `protobuf:"varint,2,opt,name=num_epochs_paid_over,json=numEpochsPaidOver,proto3" json:"num_epochs_paid_over,omitempty"`
}

func (m *IncentivePlanParams) Reset()         { *m = IncentivePlanParams{} }
func (m *IncentivePlanParams) String() string { return proto.CompactTextString(m) }
func (*IncentivePlanParams) ProtoMessage()    {}
func (*IncentivePlanParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d27cc6b5064d3f, []int{2}
}
func (m *IncentivePlanParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivePlanParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivePlanParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivePlanParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivePlanParams.Merge(m, src)
}
func (m *IncentivePlanParams) XXX_Size() int {
	return m.Size()
}
func (m *IncentivePlanParams) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivePlanParams.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivePlanParams proto.InternalMessageInfo

func (m *IncentivePlanParams) GetStartTimeAfterSettlement() time.Duration {
	if m != nil {
		return m.StartTimeAfterSettlement
	}
	return 0
}

func (m *IncentivePlanParams) GetNumEpochsPaidOver() uint64 {
	if m != nil {
		return m.NumEpochsPaidOver
	}
	return 0
}

type IROVestingPlan struct {
	Amount                   cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	Claimed                  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=claimed,proto3,customtype=cosmossdk.io/math.Int" json:"claimed"`
	VestingDuration          time.Duration         `protobuf:"bytes,3,opt,name=vesting_duration,json=vestingDuration,proto3,stdduration" json:"vesting_duration" yaml:"vesting_duration"`
	StartTimeAfterSettlement time.Duration         `protobuf:"bytes,4,opt,name=start_time_after_settlement,json=startTimeAfterSettlement,proto3,stdduration" json:"start_time_after_settlement"`
	// Vesting start time (set on IRO settlement)
	StartTime time.Time `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// Vesting end time (set on IRO settlement)
	EndTime time.Time `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
}

func (m *IROVestingPlan) Reset()         { *m = IROVestingPlan{} }
func (m *IROVestingPlan) String() string { return proto.CompactTextString(m) }
func (*IROVestingPlan) ProtoMessage()    {}
func (*IROVestingPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d27cc6b5064d3f, []int{3}
}
func (m *IROVestingPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IROVestingPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IROVestingPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IROVestingPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IROVestingPlan.Merge(m, src)
}
func (m *IROVestingPlan) XXX_Size() int {
	return m.Size()
}
func (m *IROVestingPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_IROVestingPlan.DiscardUnknown(m)
}

var xxx_messageInfo_IROVestingPlan proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BondingCurve)(nil), "dymensionxyz.dymension.iro.BondingCurve")
	proto.RegisterType((*Plan)(nil), "dymensionxyz.dymension.iro.Plan")
	proto.RegisterType((*IncentivePlanParams)(nil), "dymensionxyz.dymension.iro.IncentivePlanParams")
	proto.RegisterType((*IROVestingPlan)(nil), "dymensionxyz.dymension.iro.IROVestingPlan")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/iro/iro.proto", fileDescriptor_e7d27cc6b5064d3f)
}

var fileDescriptor_e7d27cc6b5064d3f = []byte{
	// 1064 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x4f, 0x1b, 0xc7,
	0x1b, 0x66, 0xc1, 0xe1, 0x63, 0x30, 0x36, 0x0c, 0x24, 0xd9, 0x10, 0xfd, 0x6c, 0xe4, 0xfc, 0xa4,
	0xa0, 0x54, 0xd9, 0x2d, 0x49, 0x0f, 0x55, 0x2e, 0x91, 0x31, 0x44, 0x22, 0x22, 0xc1, 0x5a, 0xa2,
	0x2a, 0xea, 0x65, 0x34, 0xde, 0x19, 0xcc, 0xa8, 0xb3, 0x33, 0xdb, 0xd9, 0xb1, 0x85, 0xfb, 0x17,
	0xf4, 0x98, 0x63, 0x8f, 0x3d, 0xf7, 0x9c, 0x7f, 0xa0, 0xb7, 0x1c, 0xa3, 0x9c, 0xaa, 0x1e, 0x68,
	0x05, 0xc7, 0xde, 0x7a, 0xe9, 0xb5, 0x9a, 0x0f, 0x9b, 0x8f, 0x34, 0x50, 0x50, 0x0f, 0x48, 0xec,
	0xfb, 0xce, 0xf3, 0xbc, 0xfb, 0xbe, 0xf3, 0x3c, 0xaf, 0x17, 0xfc, 0x9f, 0x0c, 0x32, 0x2a, 0x0a,
	0x26, 0xc5, 0xc1, 0xe0, 0xbb, 0x78, 0xf4, 0x10, 0x33, 0x25, 0xcd, 0x5f, 0x94, 0x2b, 0xa9, 0x25,
	0x5c, 0x3e, 0x7d, 0x2a, 0x1a, 0x3d, 0x44, 0x4c, 0xc9, 0xe5, 0xa5, 0xae, 0xec, 0x4a, 0x7b, 0x2c,
	0x36, 0xff, 0x39, 0xc4, 0x72, 0xbd, 0x2b, 0x65, 0x97, 0xd3, 0xd8, 0x3e, 0x75, 0x7a, 0x7b, 0xb1,
	0x66, 0x19, 0x2d, 0x34, 0xce, 0x72, 0x7f, 0xa0, 0x76, 0xfe, 0x00, 0xe9, 0x29, 0xac, 0x0d, 0xa9,
	0xcf, 0xa7, 0xb2, 0xc8, 0x64, 0x11, 0x77, 0x70, 0x41, 0xe3, 0xfe, 0x5a, 0x87, 0x6a, 0xbc, 0x16,
	0xa7, 0x92, 0x0d, 0xf3, 0x77, 0x5c, 0x1e, 0xb9, 0xca, 0xee, 0xc1, 0xa7, 0xee, 0x5f, 0xd0, 0x53,
	0x8e, 0x15, 0xce, 0xfc, 0xc1, 0xc6, 0xcf, 0xe3, 0xa0, 0xbc, 0x2e, 0x05, 0x61, 0xa2, 0xdb, 0xea,
	0xa9, 0x3e, 0x85, 0x4f, 0x41, 0xf0, 0x22, 0x0c, 0x56, 0x82, 0xd5, 0x99, 0xf5, 0xb5, 0x77, 0x87,
	0xf5, 0xb1, 0x5f, 0x0f, 0xeb, 0x77, 0x1d, 0x75, 0x41, 0xbe, 0x89, 0x98, 0x8c, 0x33, 0xac, 0xf7,
	0xa3, 0x6d, 0xda, 0xc5, 0xe9, 0x60, 0x83, 0xa6, 0x1f, 0xde, 0x3e, 0x04, 0xbe, 0xf2, 0x06, 0x4d,
	0x93, 0xe0, 0x85, 0x21, 0x78, 0x19, 0x8e, 0x5f, 0x9b, 0xe0, 0xa5, 0x21, 0x68, 0x85, 0x13, 0xd7,
	0x26, 0x68, 0xc1, 0x2f, 0xc0, 0x2d, 0x25, 0x39, 0xc7, 0x79, 0x8e, 0x08, 0x15, 0x32, 0x43, 0x84,
	0xa6, 0x2c, 0xc3, 0xbc, 0x08, 0x4b, 0x2b, 0xc1, 0x6a, 0x29, 0x59, 0xf2, 0xd9, 0x0d, 0x93, 0xdc,
	0xf0, 0x39, 0xf8, 0x25, 0x08, 0x39, 0xfb, 0xb6, 0xc7, 0x08, 0xd3, 0x83, 0xf3, 0xb8, 0x1b, 0x16,
	0x77, 0x6b, 0x94, 0x3f, 0x83, 0x6c, 0xfc, 0x31, 0x03, 0x4a, 0x6d, 0x8e, 0x05, 0xac, 0x80, 0x71,
	0x46, 0xec, 0xf0, 0x4a, 0xc9, 0x38, 0x23, 0xf0, 0x7f, 0x00, 0x0c, 0x5f, 0x84, 0x11, 0x37, 0x93,
	0x64, 0xc6, 0x47, 0xb6, 0x08, 0x7c, 0x06, 0x60, 0x26, 0x49, 0x8f, 0x53, 0x84, 0xd3, 0x14, 0x61,
	0x42, 0x14, 0x2d, 0x0a, 0xdf, 0x79, 0xf8, 0xe1, 0xed, 0xc3, 0x25, 0xdf, 0x56, 0xd3, 0x65, 0x76,
	0xb5, 0x62, 0xa2, 0x9b, 0xcc, 0x3b, 0x4c, 0x33, 0x4d, 0x7d, 0x1c, 0x3e, 0x07, 0xf3, 0x5a, 0x6a,
	0xcc, 0x11, 0xe6, 0x5c, 0xa6, 0x56, 0x41, 0xb6, 0xd3, 0xd9, 0x47, 0x77, 0x22, 0x4f, 0x61, 0x24,
	0x14, 0x79, 0x09, 0x45, 0x2d, 0xc9, 0xc4, 0x7a, 0xc9, 0x8c, 0x36, 0xa9, 0x5a, 0x60, 0x73, 0x84,
	0x83, 0xbb, 0x60, 0xae, 0xe3, 0xe4, 0x80, 0x52, 0xa3, 0x07, 0xdb, 0xfa, 0xec, 0xa3, 0xd5, 0xe8,
	0xd3, 0xf2, 0x8f, 0x4e, 0xeb, 0xc7, 0xf3, 0x96, 0x3b, 0xa7, 0x35, 0x75, 0x0f, 0xcc, 0x15, 0x54,
	0x6b, 0x4e, 0x89, 0x1b, 0x6c, 0x38, 0x69, 0x47, 0x51, 0xf6, 0x41, 0x3b, 0x4d, 0xd8, 0x02, 0xa0,
	0xd0, 0x58, 0x69, 0x64, 0x6c, 0x12, 0x4e, 0xd9, 0xb2, 0xcb, 0x91, 0xb3, 0x48, 0x34, 0xb4, 0x48,
	0xf4, 0x6a, 0xe8, 0xa1, 0xf5, 0x69, 0x53, 0xe8, 0xcd, 0x6f, 0xf5, 0x20, 0x99, 0xb1, 0x38, 0x93,
	0x81, 0x29, 0x58, 0x26, 0x34, 0x57, 0x34, 0xc5, 0x9a, 0x12, 0x94, 0x2b, 0x8a, 0x38, 0xee, 0x89,
	0x74, 0xdf, 0x91, 0x4e, 0x5f, 0x4a, 0x0a, 0x86, 0xa4, 0x61, 0x90, 0xdc, 0x3e, 0x61, 0x6a, 0x2b,
	0xba, 0x6d, 0x79, 0x6c, 0x91, 0x67, 0x60, 0xba, 0x90, 0x9c, 0x20, 0x9c, 0xe9, 0x70, 0xc6, 0xde,
	0xd6, 0x67, 0x5e, 0xa7, 0x37, 0x3f, 0xd6, 0xe9, 0x96, 0xd0, 0xa7, 0x14, 0xba, 0x25, 0x74, 0x32,
	0x65, 0xc0, 0xcd, 0x4c, 0xc3, 0x6d, 0x30, 0x9b, 0x72, 0xcc, 0x32, 0xea, 0xa8, 0xc0, 0xd5, 0xa9,
	0x80, 0xc7, 0x1b, 0x36, 0x06, 0x6e, 0x32, 0x91, 0x52, 0xa1, 0x59, 0x9f, 0xa2, 0x9c, 0x63, 0x81,
	0x9c, 0xd1, 0xc3, 0x59, 0xdb, 0x75, 0x7c, 0xd1, 0x0d, 0x6e, 0x0d, 0x81, 0x46, 0xc6, 0x6d, 0x0b,
	0xf3, 0x17, 0xb9, 0xc8, 0x3e, 0x4e, 0xc1, 0xd7, 0x00, 0x66, 0xf8, 0x00, 0xe1, 0x4c, 0xf6, 0x84,
	0x46, 0x5a, 0xa2, 0x82, 0x72, 0x1e, 0x96, 0xaf, 0xfe, 0xfe, 0xd5, 0x0c, 0x1f, 0x34, 0x2d, 0xcb,
	0x2b, 0xb9, 0x4b, 0x39, 0x87, 0xaf, 0x41, 0xe5, 0xc4, 0x84, 0x39, 0x56, 0x3a, 0x9c, 0xbb, 0xee,
	0x22, 0x98, 0x1b, 0x11, 0xb5, 0xb1, 0xd2, 0x70, 0x17, 0x94, 0xfb, 0xb4, 0xd0, 0x46, 0xd8, 0x66,
	0x38, 0x61, 0xc5, 0x4e, 0xe5, 0xc1, 0x85, 0x53, 0x49, 0x76, 0xbe, 0x72, 0x10, 0xd3, 0xbb, 0x1f,
	0xc8, 0x6c, 0xff, 0x24, 0x04, 0xef, 0x83, 0xaa, 0x56, 0xd8, 0xba, 0x85, 0x0a, 0xdc, 0xe1, 0x94,
	0x84, 0xd5, 0x95, 0x60, 0x75, 0x3a, 0xa9, 0xf8, 0xf0, 0xa6, 0x8b, 0xc2, 0x1d, 0xb0, 0xc0, 0x94,
	0x74, 0xd7, 0x32, 0xdc, 0xf2, 0xe1, 0xbc, 0xf7, 0xe8, 0x79, 0x39, 0x6e, 0xf8, 0x03, 0x4e, 0xe2,
	0x3f, 0x18, 0x89, 0x57, 0x99, 0x92, 0xa6, 0xe2, 0x30, 0x65, 0x2a, 0x9f, 0xdb, 0x56, 0xe1, 0x82,
	0x35, 0x55, 0xe5, 0xec, 0x92, 0x32, 0xde, 0xdb, 0xc3, 0x4c, 0x79, 0x1f, 0x50, 0x12, 0x42, 0xfb,
	0x82, 0x65, 0x13, 0xdc, 0xf6, 0x31, 0xf8, 0x00, 0x2c, 0x74, 0x15, 0x26, 0x3d, 0xe7, 0x1a, 0x29,
	0xb9, 0xd9, 0x57, 0x8b, 0x76, 0x8f, 0x55, 0x47, 0x89, 0xb6, 0x94, 0x7c, 0x8b, 0x34, 0x7e, 0x0a,
	0xc0, 0xe2, 0x3f, 0xe8, 0x05, 0x76, 0xc0, 0xdd, 0x13, 0xff, 0x22, 0xbc, 0xa7, 0xa9, 0x42, 0xce,
	0xe0, 0x19, 0x15, 0xda, 0x6e, 0xc5, 0x7f, 0xd9, 0x6c, 0x38, 0xf2, 0x73, 0xd3, 0xb0, 0xec, 0x8e,
	0x48, 0x60, 0x0c, 0x96, 0x44, 0x2f, 0x43, 0x34, 0x97, 0xe9, 0x7e, 0x81, 0x72, 0xcc, 0x08, 0x92,
	0x7d, 0xaa, 0xec, 0x6a, 0x2d, 0x25, 0x0b, 0xa2, 0x97, 0x6d, 0xda, 0x54, 0x1b, 0x33, 0xb2, 0xd3,
	0xa7, 0xaa, 0xf1, 0xd7, 0x04, 0xa8, 0x9c, 0xbd, 0x46, 0xd8, 0x02, 0x93, 0x4e, 0xb8, 0xfe, 0x57,
	0xee, 0x4a, 0x82, 0xf5, 0x50, 0xb8, 0x09, 0xa6, 0xbc, 0xf5, 0xfc, 0x4f, 0xdd, 0xd5, 0x36, 0x80,
	0xc7, 0x42, 0x06, 0xe6, 0x87, 0xa2, 0x1c, 0xa9, 0x62, 0xe2, 0xb2, 0x41, 0xdd, 0x33, 0xa5, 0xfe,
	0x3c, 0xac, 0xdf, 0x1e, 0xe0, 0x8c, 0x3f, 0x69, 0x9c, 0x27, 0x68, 0x38, 0xc1, 0xf8, 0xf0, 0x48,
	0x30, 0x97, 0x5c, 0x4f, 0xe9, 0xbf, 0xb8, 0x9e, 0xb3, 0x2b, 0xfc, 0xc6, 0xf5, 0x56, 0xf8, 0x53,
	0x30, 0x4d, 0x05, 0x71, 0x14, 0x93, 0x57, 0xa0, 0x98, 0xa2, 0x82, 0x98, 0xf8, 0x93, 0xd2, 0xf7,
	0x3f, 0xd6, 0xc7, 0xd6, 0x9f, 0xbf, 0x3b, 0xaa, 0x05, 0xef, 0x8f, 0x6a, 0xc1, 0xef, 0x47, 0xb5,
	0xe0, 0xcd, 0x71, 0x6d, 0xec, 0xfd, 0x71, 0x6d, 0xec, 0x97, 0xe3, 0xda, 0xd8, 0xd7, 0x9f, 0x77,
	0x99, 0xde, 0xef, 0x75, 0xa2, 0x54, 0x66, 0xf1, 0x27, 0x3e, 0x93, 0xfa, 0x8f, 0xe3, 0x03, 0xfb,
	0xad, 0xa4, 0x07, 0x39, 0x2d, 0x3a, 0x93, 0xb6, 0xf0, 0xe3, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x69, 0xa9, 0xd4, 0x2a, 0x0a, 0x00, 0x00,
}

func (m *BondingCurve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondingCurve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondingCurve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LiquidityDenomDecimals != 0 {
		i = encodeVarintIro(dAtA, i, uint64(m.LiquidityDenomDecimals))
		i--
		dAtA[i] = 0x28
	}
	if m.RollappDenomDecimals != 0 {
		i = encodeVarintIro(dAtA, i, uint64(m.RollappDenomDecimals))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.C.Size()
		i -= size
		if _, err := m.C.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.N.Size()
		i -= size
		if _, err := m.N.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.M.Size()
		i -= size
		if _, err := m.M.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Plan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GraduatedPoolId != 0 {
		i = encodeVarintIro(dAtA, i, uint64(m.GraduatedPoolId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.FairLaunched {
		i--
		if m.FairLaunched {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.LiquidityDenom) > 0 {
		i -= len(m.LiquidityDenom)
		copy(dAtA[i:], m.LiquidityDenom)
		i = encodeVarintIro(dAtA, i, uint64(len(m.LiquidityDenom)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.IroPlanDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.IroPlanDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintIro(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if m.TradingEnabled {
		i--
		if m.TradingEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	{
		size, err := m.VestingPlan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.LiquidityPart.Size()
		i -= size
		if _, err := m.LiquidityPart.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.MaxAmountToSell.Size()
		i -= size
		if _, err := m.MaxAmountToSell.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.IncentivePlanParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.ClaimedAmt.Size()
		i -= size
		if _, err := m.ClaimedAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.SoldAmt.Size()
		i -= size
		if _, err := m.SoldAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.DeprecatedPreLaunchTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DeprecatedPreLaunchTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintIro(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x42
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintIro(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x3a
	if len(m.SettledDenom) > 0 {
		i -= len(m.SettledDenom)
		copy(dAtA[i:], m.SettledDenom)
		i = encodeVarintIro(dAtA, i, uint64(len(m.SettledDenom)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.BondingCurve.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.TotalAllocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ModuleAccAddress) > 0 {
		i -= len(m.ModuleAccAddress)
		copy(dAtA[i:], m.ModuleAccAddress)
		i = encodeVarintIro(dAtA, i, uint64(len(m.ModuleAccAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintIro(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintIro(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentivePlanParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivePlanParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivePlanParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumEpochsPaidOver != 0 {
		i = encodeVarintIro(dAtA, i, uint64(m.NumEpochsPaidOver))
		i--
		dAtA[i] = 0x10
	}
	n8, err8 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.StartTimeAfterSettlement, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.StartTimeAfterSettlement):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintIro(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IROVestingPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IROVestingPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IROVestingPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n9, err9 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintIro(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x32
	n10, err10 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintIro(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x2a
	n11, err11 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.StartTimeAfterSettlement, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.StartTimeAfterSettlement):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintIro(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x22
	n12, err12 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.VestingDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.VestingDuration):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintIro(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x1a
	{
		size := m.Claimed.Size()
		i -= size
		if _, err := m.Claimed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintIro(dAtA []byte, offset int, v uint64) int {
	offset -= sovIro(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BondingCurve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.M.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.N.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.C.Size()
	n += 1 + l + sovIro(uint64(l))
	if m.RollappDenomDecimals != 0 {
		n += 1 + sovIro(uint64(m.RollappDenomDecimals))
	}
	if m.LiquidityDenomDecimals != 0 {
		n += 1 + sovIro(uint64(m.LiquidityDenomDecimals))
	}
	return n
}

func (m *Plan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIro(uint64(m.Id))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovIro(uint64(l))
	}
	l = len(m.ModuleAccAddress)
	if l > 0 {
		n += 1 + l + sovIro(uint64(l))
	}
	l = m.TotalAllocation.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.BondingCurve.Size()
	n += 1 + l + sovIro(uint64(l))
	l = len(m.SettledDenom)
	if l > 0 {
		n += 1 + l + sovIro(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovIro(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DeprecatedPreLaunchTime)
	n += 1 + l + sovIro(uint64(l))
	l = m.SoldAmt.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.ClaimedAmt.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.IncentivePlanParams.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.MaxAmountToSell.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.LiquidityPart.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.VestingPlan.Size()
	n += 1 + l + sovIro(uint64(l))
	if m.TradingEnabled {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.IroPlanDuration)
	n += 2 + l + sovIro(uint64(l))
	l = len(m.LiquidityDenom)
	if l > 0 {
		n += 2 + l + sovIro(uint64(l))
	}
	if m.FairLaunched {
		n += 3
	}
	if m.GraduatedPoolId != 0 {
		n += 2 + sovIro(uint64(m.GraduatedPoolId))
	}
	return n
}

func (m *IncentivePlanParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.StartTimeAfterSettlement)
	n += 1 + l + sovIro(uint64(l))
	if m.NumEpochsPaidOver != 0 {
		n += 1 + sovIro(uint64(m.NumEpochsPaidOver))
	}
	return n
}

func (m *IROVestingPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.Claimed.Size()
	n += 1 + l + sovIro(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.VestingDuration)
	n += 1 + l + sovIro(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.StartTimeAfterSettlement)
	n += 1 + l + sovIro(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovIro(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovIro(uint64(l))
	return n
}

func sovIro(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIro(x uint64) (n int) {
	return sovIro(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BondingCurve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIro
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondingCurve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondingCurve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.M.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.N.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappDenomDecimals", wireType)
			}
			m.RollappDenomDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RollappDenomDecimals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityDenomDecimals", wireType)
			}
			m.LiquidityDenomDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityDenomDecimals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIro(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIro
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIro
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAllocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAllocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondingCurve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondingCurve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettledDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettledDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedPreLaunchTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.DeprecatedPreLaunchTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SoldAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivePlanParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncentivePlanParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmountToSell", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxAmountToSell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityPart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TradingEnabled = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IroPlanDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.IroPlanDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FairLaunched", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FairLaunched = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraduatedPoolId", wireType)
			}
			m.GraduatedPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GraduatedPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIro(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIro
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentivePlanParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIro
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentivePlanParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentivePlanParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeAfterSettlement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.StartTimeAfterSettlement, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochsPaidOver", wireType)
			}
			m.NumEpochsPaidOver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochsPaidOver |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIro(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIro
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IROVestingPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIro
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IROVestingPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IROVestingPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Claimed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.VestingDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeAfterSettlement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.StartTimeAfterSettlement, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIro(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIro
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIro(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIro
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIro
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIro
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIro
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIro
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIro
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIro        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIro          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIro = fmt.Errorf("proto: unexpected end of group")
)
