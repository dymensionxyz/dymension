// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/iro/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryVestingRequest is the request type for the
// Query/QueryVesting RPC method.
type QueryVestingRequest struct {
	// plan_id is the ID of the plan.
	PlanId string `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (m *QueryVestingRequest) Reset()         { *m = QueryVestingRequest{} }
func (m *QueryVestingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVestingRequest) ProtoMessage()    {}
func (*QueryVestingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{0}
}
func (m *QueryVestingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingRequest.Merge(m, src)
}
func (m *QueryVestingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingRequest proto.InternalMessageInfo

func (m *QueryVestingRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

// QueryVestingResponse is the response type for the
// Query/QueryVesting RPC method.
type QueryVestingResponse struct {
	Owner string                `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Total cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total,proto3,customtype=cosmossdk.io/math.Int" json:"total"`
	// vested_amount is the amount of tokens that are vested.
	VestedAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=vested_amount,json=vestedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"vested_amount"`
	// claimable_amount is the amount of tokens that are claimable.
	ClaimableAmount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=claimable_amount,json=claimableAmount,proto3,customtype=cosmossdk.io/math.Int" json:"claimable_amount"`
}

func (m *QueryVestingResponse) Reset()         { *m = QueryVestingResponse{} }
func (m *QueryVestingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVestingResponse) ProtoMessage()    {}
func (*QueryVestingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{1}
}
func (m *QueryVestingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingResponse.Merge(m, src)
}
func (m *QueryVestingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingResponse proto.InternalMessageInfo

func (m *QueryVestingResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryPlanRequest is the request type for the Query/QueryPlan RPC method.
type QueryPlansRequest struct {
	// non_settled_only is an optional flag to filter out plans that are already
	// settled.
	NonSettledOnly bool `protobuf:"varint,1,opt,name=non_settled_only,json=nonSettledOnly,proto3" json:"non_settled_only,omitempty"`
	// non_graduated_only is an optional flag to filter out plans that are already
	// graduated.
	NonGraduatedOnly bool `protobuf:"varint,2,opt,name=non_graduated_only,json=nonGraduatedOnly,proto3" json:"non_graduated_only,omitempty"`
	// standard_launch_only is an optional flag to filter out plans that are not
	// standard launched.
	StandardLaunchOnly bool               `protobuf:"varint,3,opt,name=standard_launch_only,json=standardLaunchOnly,proto3" json:"standard_launch_only,omitempty"`
	Pagination         *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPlansRequest) Reset()         { *m = QueryPlansRequest{} }
func (m *QueryPlansRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPlansRequest) ProtoMessage()    {}
func (*QueryPlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{4}
}
func (m *QueryPlansRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlansRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlansRequest.Merge(m, src)
}
func (m *QueryPlansRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlansRequest proto.InternalMessageInfo

func (m *QueryPlansRequest) GetNonSettledOnly() bool {
	if m != nil {
		return m.NonSettledOnly
	}
	return false
}

func (m *QueryPlansRequest) GetNonGraduatedOnly() bool {
	if m != nil {
		return m.NonGraduatedOnly
	}
	return false
}

func (m *QueryPlansRequest) GetStandardLaunchOnly() bool {
	if m != nil {
		return m.StandardLaunchOnly
	}
	return false
}

func (m *QueryPlansRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPlanResponse is the response type for the Query/QueryPlan RPC method.
type QueryPlansResponse struct {
	Plans      []Plan              `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPlansResponse) Reset()         { *m = QueryPlansResponse{} }
func (m *QueryPlansResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPlansResponse) ProtoMessage()    {}
func (*QueryPlansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{5}
}
func (m *QueryPlansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlansResponse.Merge(m, src)
}
func (m *QueryPlansResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlansResponse proto.InternalMessageInfo

func (m *QueryPlansResponse) GetPlans() []Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

func (m *QueryPlansResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPlanRequest is the request type for the Query/QueryPlan RPC method.
type QueryPlanRequest struct {
	PlanId string `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (m *QueryPlanRequest) Reset()         { *m = QueryPlanRequest{} }
func (m *QueryPlanRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPlanRequest) ProtoMessage()    {}
func (*QueryPlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{6}
}
func (m *QueryPlanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlanRequest.Merge(m, src)
}
func (m *QueryPlanRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlanRequest proto.InternalMessageInfo

func (m *QueryPlanRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

// QueryPlanResponse is the response type for the Query/QueryPlan RPC method.
type QueryPlanResponse struct {
	Plan *Plan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (m *QueryPlanResponse) Reset()         { *m = QueryPlanResponse{} }
func (m *QueryPlanResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPlanResponse) ProtoMessage()    {}
func (*QueryPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{7}
}
func (m *QueryPlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlanResponse.Merge(m, src)
}
func (m *QueryPlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlanResponse proto.InternalMessageInfo

func (m *QueryPlanResponse) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

// QueryPlanByRollappRequest is the request type for the
// Query/QueryPlanByRollapp RPC method.
type QueryPlanByRollappRequest struct {
	RollappId string `protobuf:"bytes,1,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
}

func (m *QueryPlanByRollappRequest) Reset()         { *m = QueryPlanByRollappRequest{} }
func (m *QueryPlanByRollappRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPlanByRollappRequest) ProtoMessage()    {}
func (*QueryPlanByRollappRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{8}
}
func (m *QueryPlanByRollappRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlanByRollappRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlanByRollappRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlanByRollappRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlanByRollappRequest.Merge(m, src)
}
func (m *QueryPlanByRollappRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlanByRollappRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlanByRollappRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlanByRollappRequest proto.InternalMessageInfo

func (m *QueryPlanByRollappRequest) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

// QueryPlanByRollappResponse is the response type for the
// Query/QueryPlanByRollapp RPC method.
type QueryPlanByRollappResponse struct {
	Plan *Plan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (m *QueryPlanByRollappResponse) Reset()         { *m = QueryPlanByRollappResponse{} }
func (m *QueryPlanByRollappResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPlanByRollappResponse) ProtoMessage()    {}
func (*QueryPlanByRollappResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{9}
}
func (m *QueryPlanByRollappResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlanByRollappResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlanByRollappResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlanByRollappResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlanByRollappResponse.Merge(m, src)
}
func (m *QueryPlanByRollappResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlanByRollappResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlanByRollappResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlanByRollappResponse proto.InternalMessageInfo

func (m *QueryPlanByRollappResponse) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

// QuerySpotPriceRequest is the request type for the Query/QuerySpotPrice RPC
// method.
type QuerySpotPriceRequest struct {
	PlanId string `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (m *QuerySpotPriceRequest) Reset()         { *m = QuerySpotPriceRequest{} }
func (m *QuerySpotPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotPriceRequest) ProtoMessage()    {}
func (*QuerySpotPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{10}
}
func (m *QuerySpotPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotPriceRequest.Merge(m, src)
}
func (m *QuerySpotPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotPriceRequest proto.InternalMessageInfo

func (m *QuerySpotPriceRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

// QuerySpotPriceResponse is the response type for the Query/QuerySpotPrice RPC
// method.
type QuerySpotPriceResponse struct {
	Price cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
}

func (m *QuerySpotPriceResponse) Reset()         { *m = QuerySpotPriceResponse{} }
func (m *QuerySpotPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotPriceResponse) ProtoMessage()    {}
func (*QuerySpotPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{11}
}
func (m *QuerySpotPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotPriceResponse.Merge(m, src)
}
func (m *QuerySpotPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotPriceResponse proto.InternalMessageInfo

// QueryCostRequest is the request type for the Query/QueryCost RPC method.
type QueryCostRequest struct {
	PlanId string                `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	Amt    cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amt,proto3,customtype=cosmossdk.io/math.Int" json:"amt"`
	Sell   bool                  `protobuf:"varint,3,opt,name=sell,proto3" json:"sell,omitempty"`
}

func (m *QueryCostRequest) Reset()         { *m = QueryCostRequest{} }
func (m *QueryCostRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCostRequest) ProtoMessage()    {}
func (*QueryCostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{12}
}
func (m *QueryCostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCostRequest.Merge(m, src)
}
func (m *QueryCostRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCostRequest proto.InternalMessageInfo

func (m *QueryCostRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

func (m *QueryCostRequest) GetSell() bool {
	if m != nil {
		return m.Sell
	}
	return false
}

// QueryCostResponse is the response type for the Query/QueryCost RPC method.
type QueryCostResponse struct {
	Cost *types.Coin `protobuf:"bytes,1,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *QueryCostResponse) Reset()         { *m = QueryCostResponse{} }
func (m *QueryCostResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCostResponse) ProtoMessage()    {}
func (*QueryCostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{13}
}
func (m *QueryCostResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCostResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCostResponse.Merge(m, src)
}
func (m *QueryCostResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCostResponse proto.InternalMessageInfo

func (m *QueryCostResponse) GetCost() *types.Coin {
	if m != nil {
		return m.Cost
	}
	return nil
}

// QueryTokensForExactInAmountRequest is the request type for the
// Query/QueryTokensForExactInAmount RPC method.
type QueryTokensForExactInAmountRequest struct {
	PlanId string                `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	Amt    cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amt,proto3,customtype=cosmossdk.io/math.Int" json:"amt"`
}

func (m *QueryTokensForExactInAmountRequest) Reset()         { *m = QueryTokensForExactInAmountRequest{} }
func (m *QueryTokensForExactInAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokensForExactInAmountRequest) ProtoMessage()    {}
func (*QueryTokensForExactInAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{14}
}
func (m *QueryTokensForExactInAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokensForExactInAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokensForExactInAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokensForExactInAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokensForExactInAmountRequest.Merge(m, src)
}
func (m *QueryTokensForExactInAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokensForExactInAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokensForExactInAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokensForExactInAmountRequest proto.InternalMessageInfo

func (m *QueryTokensForExactInAmountRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

// QueryTokensForExactInAmountResponse is the response type for the
// Query/QueryTokensForExactInAmount RPC method.
type QueryTokensForExactInAmountResponse struct {
	Tokens *types.Coin `protobuf:"bytes,1,opt,name=tokens,proto3" json:"tokens,omitempty"`
}

func (m *QueryTokensForExactInAmountResponse) Reset()         { *m = QueryTokensForExactInAmountResponse{} }
func (m *QueryTokensForExactInAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokensForExactInAmountResponse) ProtoMessage()    {}
func (*QueryTokensForExactInAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{15}
}
func (m *QueryTokensForExactInAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokensForExactInAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokensForExactInAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokensForExactInAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokensForExactInAmountResponse.Merge(m, src)
}
func (m *QueryTokensForExactInAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokensForExactInAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokensForExactInAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokensForExactInAmountResponse proto.InternalMessageInfo

func (m *QueryTokensForExactInAmountResponse) GetTokens() *types.Coin {
	if m != nil {
		return m.Tokens
	}
	return nil
}

// QueryClaimedRequest is the request type for the Query/QueryClaimed RPC
// method.
type QueryClaimedRequest struct {
	PlanId string `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (m *QueryClaimedRequest) Reset()         { *m = QueryClaimedRequest{} }
func (m *QueryClaimedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClaimedRequest) ProtoMessage()    {}
func (*QueryClaimedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{16}
}
func (m *QueryClaimedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimedRequest.Merge(m, src)
}
func (m *QueryClaimedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimedRequest proto.InternalMessageInfo

func (m *QueryClaimedRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

// QueryClaimedResponse is the response type for the Query/QueryClaimed RPC
// method.
type QueryClaimedResponse struct {
	ClaimedAmt *cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=claimed_amt,json=claimedAmt,proto3,customtype=cosmossdk.io/math.Int" json:"claimed_amt,omitempty"`
}

func (m *QueryClaimedResponse) Reset()         { *m = QueryClaimedResponse{} }
func (m *QueryClaimedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClaimedResponse) ProtoMessage()    {}
func (*QueryClaimedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2c72bd0c23c1c0, []int{17}
}
func (m *QueryClaimedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimedResponse.Merge(m, src)
}
func (m *QueryClaimedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimedResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryVestingRequest)(nil), "dymensionxyz.dymension.iro.QueryVestingRequest")
	proto.RegisterType((*QueryVestingResponse)(nil), "dymensionxyz.dymension.iro.QueryVestingResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "dymensionxyz.dymension.iro.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dymensionxyz.dymension.iro.QueryParamsResponse")
	proto.RegisterType((*QueryPlansRequest)(nil), "dymensionxyz.dymension.iro.QueryPlansRequest")
	proto.RegisterType((*QueryPlansResponse)(nil), "dymensionxyz.dymension.iro.QueryPlansResponse")
	proto.RegisterType((*QueryPlanRequest)(nil), "dymensionxyz.dymension.iro.QueryPlanRequest")
	proto.RegisterType((*QueryPlanResponse)(nil), "dymensionxyz.dymension.iro.QueryPlanResponse")
	proto.RegisterType((*QueryPlanByRollappRequest)(nil), "dymensionxyz.dymension.iro.QueryPlanByRollappRequest")
	proto.RegisterType((*QueryPlanByRollappResponse)(nil), "dymensionxyz.dymension.iro.QueryPlanByRollappResponse")
	proto.RegisterType((*QuerySpotPriceRequest)(nil), "dymensionxyz.dymension.iro.QuerySpotPriceRequest")
	proto.RegisterType((*QuerySpotPriceResponse)(nil), "dymensionxyz.dymension.iro.QuerySpotPriceResponse")
	proto.RegisterType((*QueryCostRequest)(nil), "dymensionxyz.dymension.iro.QueryCostRequest")
	proto.RegisterType((*QueryCostResponse)(nil), "dymensionxyz.dymension.iro.QueryCostResponse")
	proto.RegisterType((*QueryTokensForExactInAmountRequest)(nil), "dymensionxyz.dymension.iro.QueryTokensForExactInAmountRequest")
	proto.RegisterType((*QueryTokensForExactInAmountResponse)(nil), "dymensionxyz.dymension.iro.QueryTokensForExactInAmountResponse")
	proto.RegisterType((*QueryClaimedRequest)(nil), "dymensionxyz.dymension.iro.QueryClaimedRequest")
	proto.RegisterType((*QueryClaimedResponse)(nil), "dymensionxyz.dymension.iro.QueryClaimedResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/iro/query.proto", fileDescriptor_ae2c72bd0c23c1c0)
}

var fileDescriptor_ae2c72bd0c23c1c0 = []byte{
	// 1137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0x8e, 0xf3, 0x0b, 0xfa, 0x12, 0x4a, 0x18, 0x52, 0x48, 0xb6, 0xb0, 0x2d, 0x6e, 0xd5, 0x84,
	0x24, 0x6b, 0x27, 0x1b, 0x8a, 0xc4, 0xef, 0x66, 0x53, 0x9a, 0x2e, 0xaa, 0x44, 0x70, 0x51, 0x41,
	0x5c, 0xcc, 0xac, 0x3d, 0x38, 0x56, 0xbd, 0x33, 0xae, 0x3d, 0x1b, 0xb2, 0x94, 0x72, 0xe0, 0x2f,
	0x40, 0x42, 0x20, 0x21, 0xe0, 0xce, 0x81, 0x03, 0x07, 0xfe, 0x06, 0xd4, 0x63, 0x05, 0x17, 0xc4,
	0xa1, 0x42, 0x09, 0x48, 0xfc, 0x19, 0xc8, 0x33, 0x63, 0xc7, 0x9b, 0xb6, 0xb6, 0xb7, 0x88, 0xdb,
	0x7a, 0xe6, 0x7d, 0xdf, 0xfb, 0xde, 0x9b, 0x37, 0x9f, 0xd7, 0x70, 0xce, 0xed, 0x77, 0x09, 0x8d,
	0x7d, 0x46, 0xf7, 0xfa, 0x9f, 0x98, 0xd9, 0x83, 0xe9, 0x47, 0xcc, 0xbc, 0xd1, 0x23, 0x51, 0xdf,
	0x08, 0x23, 0xc6, 0x19, 0xaa, 0xe5, 0xe3, 0x8c, 0xec, 0xc1, 0xf0, 0x23, 0x56, 0x9b, 0xf5, 0x98,
	0xc7, 0x44, 0x98, 0x99, 0xfc, 0x92, 0x88, 0xda, 0xbc, 0xc3, 0xe2, 0x2e, 0x8b, 0x6d, 0xb9, 0x21,
	0x1f, 0xd4, 0xd6, 0x33, 0x1e, 0x63, 0x5e, 0x40, 0x4c, 0x1c, 0xfa, 0x26, 0xa6, 0x94, 0x71, 0xcc,
	0x7d, 0x46, 0xd3, 0xdd, 0xb3, 0x05, 0x92, 0xfc, 0x28, 0xa5, 0xaf, 0x4b, 0x46, 0xb3, 0x83, 0x63,
	0x62, 0xee, 0xae, 0x75, 0x08, 0xc7, 0x6b, 0xa6, 0xc3, 0x7c, 0xaa, 0xf6, 0x17, 0x0a, 0x58, 0x42,
	0x1c, 0xe1, 0x6e, 0x9a, 0x6e, 0x29, 0x4f, 0x24, 0x4a, 0xce, 0xe8, 0x42, 0xec, 0xf9, 0x54, 0x68,
	0x93, 0xb1, 0xba, 0x01, 0x4f, 0xbe, 0x93, 0x44, 0x5c, 0x23, 0x31, 0xf7, 0xa9, 0x67, 0x91, 0x1b,
	0x3d, 0x12, 0x73, 0xf4, 0x34, 0x3c, 0x12, 0x06, 0x98, 0xda, 0xbe, 0x3b, 0xa7, 0x9d, 0xd6, 0x16,
	0x8f, 0x59, 0x93, 0xc9, 0x63, 0xdb, 0xd5, 0xbf, 0x19, 0x85, 0xd9, 0x41, 0x40, 0x1c, 0x32, 0x1a,
	0x13, 0x34, 0x0b, 0x13, 0xec, 0x63, 0x4a, 0x22, 0x15, 0x2f, 0x1f, 0xd0, 0x06, 0x4c, 0x70, 0xc6,
	0x71, 0x30, 0x37, 0x9a, 0xac, 0xb6, 0x96, 0x6f, 0xdf, 0x3d, 0x35, 0xf2, 0xc7, 0xdd, 0x53, 0x27,
	0xa4, 0xc2, 0xd8, 0xbd, 0x6e, 0xf8, 0xcc, 0xec, 0x62, 0xbe, 0x63, 0xb4, 0x29, 0xff, 0xf5, 0xe7,
	0x06, 0xa8, 0xae, 0xb6, 0x29, 0xb7, 0x24, 0x12, 0x6d, 0xc3, 0x63, 0xbb, 0x24, 0xe6, 0xc4, 0xb5,
	0x71, 0x97, 0xf5, 0x28, 0x9f, 0x1b, 0x1b, 0x9e, 0x6a, 0x5a, 0x32, 0x6c, 0x08, 0x02, 0x74, 0x0d,
	0x66, 0x9c, 0x00, 0xfb, 0x5d, 0xdc, 0x09, 0x48, 0x4a, 0x3a, 0x3e, 0x3c, 0xe9, 0xe3, 0x19, 0x89,
	0xe4, 0xd5, 0x67, 0x01, 0x89, 0xd6, 0x6c, 0x8b, 0xc3, 0x50, 0xad, 0xd4, 0xdf, 0x53, 0x1d, 0x4e,
	0x57, 0x55, 0xbf, 0x2e, 0xc0, 0xa4, 0x3c, 0x34, 0xd1, 0xb0, 0xa9, 0xa6, 0x6e, 0x3c, 0x78, 0x1e,
	0x0d, 0x89, 0x6d, 0x8d, 0x27, 0xf2, 0x2c, 0x85, 0xd3, 0xff, 0xd6, 0xe0, 0x09, 0xc9, 0x1c, 0x60,
	0x9a, 0xa6, 0x43, 0x8b, 0x30, 0x43, 0x19, 0xb5, 0x63, 0xc2, 0x79, 0x40, 0x5c, 0x9b, 0xd1, 0xa0,
	0x2f, 0x32, 0x3c, 0x6a, 0x1d, 0xa7, 0x8c, 0x5e, 0x95, 0xcb, 0x6f, 0xd3, 0xa0, 0x8f, 0x56, 0x00,
	0x25, 0x91, 0x5e, 0x84, 0xdd, 0x1e, 0xe6, 0x69, 0xec, 0xa8, 0x88, 0x4d, 0x38, 0xb6, 0xd2, 0x0d,
	0x11, 0xbd, 0x0a, 0xb3, 0x31, 0xc7, 0xd4, 0xc5, 0x91, 0x6b, 0x07, 0xb8, 0x47, 0x9d, 0x1d, 0x19,
	0x3f, 0x26, 0xe2, 0x51, 0xba, 0x77, 0x45, 0x6c, 0x09, 0xc4, 0x25, 0x80, 0xc3, 0x71, 0x13, 0x0d,
	0x9e, 0x6a, 0x9e, 0x33, 0x54, 0x03, 0x93, 0xd9, 0x34, 0xe4, 0x75, 0x54, 0xb3, 0x69, 0x6c, 0x63,
	0x8f, 0xa8, 0x2a, 0xac, 0x1c, 0x52, 0xff, 0x56, 0x4b, 0xfb, 0x2a, 0xeb, 0x54, 0x0d, 0x7c, 0x15,
	0x26, 0x92, 0x99, 0x4c, 0xfa, 0x37, 0xb6, 0x38, 0xd5, 0x3c, 0x5d, 0xd8, 0xbf, 0x00, 0x53, 0xd5,
	0x3d, 0x09, 0x42, 0x5b, 0x03, 0xe2, 0x46, 0x85, 0xb8, 0x85, 0x52, 0x71, 0x32, 0xf5, 0x80, 0xba,
	0x65, 0x98, 0xc9, 0xc4, 0x95, 0xde, 0x9e, 0x76, 0xee, 0xc4, 0xb2, 0x42, 0x5e, 0x80, 0xf1, 0x64,
	0x5b, 0xcd, 0x41, 0x69, 0x1d, 0x96, 0x88, 0xd6, 0x5f, 0x86, 0xf9, 0x8c, 0xaa, 0xd5, 0xb7, 0x58,
	0x10, 0xe0, 0x30, 0x4c, 0x05, 0x3c, 0x0b, 0x10, 0xc9, 0x95, 0x43, 0x0d, 0xc7, 0xd4, 0x4a, 0xdb,
	0xd5, 0x2d, 0xa8, 0xdd, 0x0f, 0xfb, 0x9f, 0xf4, 0xac, 0xc2, 0x09, 0xc1, 0x79, 0x35, 0x64, 0x7c,
	0x3b, 0xf2, 0x1d, 0x52, 0xda, 0x0c, 0x0c, 0x4f, 0x1d, 0x45, 0x28, 0x05, 0x5b, 0x30, 0x11, 0x26,
	0x0b, 0x12, 0xd0, 0x5a, 0x53, 0xb7, 0xf2, 0xe4, 0xbd, 0xb7, 0xf2, 0x0a, 0xf1, 0xb0, 0xd3, 0xbf,
	0x48, 0x9c, 0xdc, 0xdd, 0xbc, 0x48, 0x1c, 0x4b, 0xe2, 0xf5, 0xcf, 0xd4, 0xe1, 0x6c, 0xb2, 0x98,
	0x97, 0xe9, 0x41, 0xaf, 0xc1, 0x18, 0xee, 0xf2, 0x87, 0x71, 0xaa, 0x04, 0x87, 0x10, 0x8c, 0xc7,
	0x24, 0x08, 0xd4, 0x85, 0x10, 0xbf, 0xf5, 0x96, 0x3a, 0x6f, 0x99, 0x5f, 0x55, 0xd7, 0x80, 0x71,
	0x87, 0xc5, 0x5c, 0xf5, 0x77, 0x7e, 0x60, 0xe8, 0xd2, 0x71, 0xdb, 0x64, 0x3e, 0xb5, 0x44, 0x98,
	0xfe, 0x29, 0xe8, 0x82, 0xe3, 0x5d, 0x76, 0x9d, 0xd0, 0xf8, 0x12, 0x8b, 0xde, 0xdc, 0xc3, 0x0e,
	0x6f, 0x53, 0x69, 0x3a, 0xff, 0x73, 0x55, 0xfa, 0xfb, 0x70, 0xa6, 0x30, 0xbb, 0xaa, 0x69, 0x0d,
	0x26, 0xb9, 0x88, 0x28, 0xaf, 0x4a, 0x05, 0x66, 0x6f, 0x9e, 0xcd, 0xc4, 0x45, 0x89, 0x5b, 0x3a,
	0x2e, 0x1f, 0xaa, 0x17, 0x4f, 0x16, 0xaf, 0x52, 0x5f, 0x86, 0x29, 0x47, 0x2e, 0xd9, 0x49, 0xa1,
	0x72, 0x64, 0x16, 0xaa, 0x16, 0x09, 0x0a, 0xbb, 0xd1, 0xe5, 0xcd, 0x9f, 0xa6, 0x61, 0x42, 0xa4,
	0x40, 0x5f, 0x69, 0x30, 0x29, 0x3d, 0x17, 0x19, 0x45, 0xf3, 0x7f, 0xaf, 0xdd, 0xd7, 0xcc, 0xca,
	0xf1, 0x52, 0xbf, 0xbe, 0xf4, 0xf9, 0x6f, 0x7f, 0x7d, 0x39, 0x7a, 0x16, 0xe9, 0x66, 0xe9, 0xfb,
	0x1d, 0x7d, 0xad, 0x01, 0x1c, 0x5a, 0x21, 0x6a, 0x94, 0xe7, 0xca, 0xbd, 0x1a, 0x6a, 0x46, 0xd5,
	0x70, 0xa5, 0xec, 0x79, 0xa1, 0xec, 0x0c, 0x7a, 0xae, 0x50, 0x99, 0x50, 0xf2, 0xbd, 0x06, 0xc7,
	0x32, 0x06, 0xb4, 0x52, 0x29, 0x51, 0x2a, 0xab, 0x51, 0x31, 0x5a, 0xa9, 0x5a, 0x17, 0xaa, 0x1a,
	0x68, 0xb9, 0x54, 0x95, 0x79, 0x53, 0x4d, 0xd2, 0x2d, 0xf4, 0x4b, 0xfe, 0x1d, 0x92, 0x59, 0x1e,
	0x3a, 0x5f, 0x29, 0xf5, 0x51, 0x7b, 0xad, 0xbd, 0x38, 0x2c, 0x4c, 0x49, 0xdf, 0x10, 0xd2, 0x5f,
	0x41, 0x2f, 0x95, 0x4a, 0xb7, 0x3b, 0x7d, 0x5b, 0xf9, 0xb5, 0x79, 0xf3, 0xd0, 0xca, 0x6f, 0xa1,
	0x1f, 0x35, 0x38, 0x3e, 0xe8, 0x9a, 0x68, 0xad, 0x54, 0xcd, 0x51, 0x4f, 0xae, 0x35, 0x87, 0x81,
	0x0c, 0xd5, 0xf7, 0x04, 0x92, 0xeb, 0xfb, 0x77, 0xe9, 0x5c, 0x24, 0x0e, 0x58, 0x61, 0x2e, 0x72,
	0x46, 0x5d, 0x61, 0x2e, 0xf2, 0xb6, 0xaa, 0x37, 0x85, 0xbe, 0x15, 0xb4, 0x54, 0xa4, 0x2f, 0x71,
	0xd4, 0x9c, 0xbc, 0x7f, 0x34, 0x38, 0x59, 0x60, 0x6f, 0xe8, 0xf5, 0x52, 0x09, 0x85, 0xae, 0x5c,
	0x7b, 0xe3, 0xa1, 0xf1, 0xaa, 0xa8, 0xcb, 0xa2, 0xa8, 0x16, 0xba, 0x50, 0x54, 0x94, 0x34, 0x54,
	0xfb, 0x23, 0x16, 0xd9, 0x24, 0x61, 0xb1, 0x7d, 0xaa, 0xfe, 0xd6, 0xe6, 0x4a, 0xfd, 0x41, 0x83,
	0xe9, 0xbc, 0x7f, 0xa2, 0x72, 0xa3, 0x1a, 0x74, 0xe6, 0xda, 0x6a, 0x75, 0x80, 0x52, 0x7f, 0x5e,
	0xa8, 0x37, 0x51, 0xa3, 0xf0, 0x48, 0x24, 0xe8, 0x7e, 0x52, 0xd5, 0x37, 0x46, 0x05, 0xa9, 0x83,
	0x9f, 0x2f, 0x15, 0xa4, 0x1e, 0xf9, 0x7c, 0xa9, 0x26, 0x75, 0x57, 0x82, 0x0e, 0xa5, 0xb6, 0xde,
	0xba, 0xbd, 0x5f, 0xd7, 0xee, 0xec, 0xd7, 0xb5, 0x3f, 0xf7, 0xeb, 0xda, 0x17, 0x07, 0xf5, 0x91,
	0x3b, 0x07, 0xf5, 0x91, 0xdf, 0x0f, 0xea, 0x23, 0x1f, 0xac, 0x7a, 0x3e, 0xdf, 0xe9, 0x75, 0x0c,
	0x87, 0x75, 0x1f, 0x44, 0xb9, 0xbb, 0x6e, 0xee, 0xc9, 0x03, 0xec, 0x87, 0x24, 0xee, 0x4c, 0x8a,
	0x2f, 0xb2, 0xf5, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x31, 0xc5, 0xf5, 0x46, 0xc1, 0x0e, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the IRO module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// QueryPlans retrieves all available plans.
	QueryPlans(ctx context.Context, in *QueryPlansRequest, opts ...grpc.CallOption) (*QueryPlansResponse, error)
	// QueryPlan retrieves the plan for the specified plan ID.
	QueryPlan(ctx context.Context, in *QueryPlanRequest, opts ...grpc.CallOption) (*QueryPlanResponse, error)
	// QueryPlanByRollapp retrieves the plans for the specified rollapp ID.
	QueryPlanByRollapp(ctx context.Context, in *QueryPlanByRollappRequest, opts ...grpc.CallOption) (*QueryPlanByRollappResponse, error)
	// QuerySpotPrice retrieves the current spot price for the specified plan ID.
	// The result is the price of 1 IRO token (not iro's base denom)
	QuerySpotPrice(ctx context.Context, in *QuerySpotPriceRequest, opts ...grpc.CallOption) (*QuerySpotPriceResponse, error)
	// QueryCost retrieves the expected cost for buying or selling the specified
	// amount of shares.
	QueryCost(ctx context.Context, in *QueryCostRequest, opts ...grpc.CallOption) (*QueryCostResponse, error)
	QueryTokensForExactInAmount(ctx context.Context, in *QueryTokensForExactInAmountRequest, opts ...grpc.CallOption) (*QueryTokensForExactInAmountResponse, error)
	// QueryClaimed retrieves the claimed amount thus far for the specified plan
	// ID.
	QueryClaimed(ctx context.Context, in *QueryClaimedRequest, opts ...grpc.CallOption) (*QueryClaimedResponse, error)
	// QueryVesting queries the claimable and vested amount for
	// the specified plan ID.
	QueryVesting(ctx context.Context, in *QueryVestingRequest, opts ...grpc.CallOption) (*QueryVestingResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.iro.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPlans(ctx context.Context, in *QueryPlansRequest, opts ...grpc.CallOption) (*QueryPlansResponse, error) {
	out := new(QueryPlansResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.iro.Query/QueryPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPlan(ctx context.Context, in *QueryPlanRequest, opts ...grpc.CallOption) (*QueryPlanResponse, error) {
	out := new(QueryPlanResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.iro.Query/QueryPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPlanByRollapp(ctx context.Context, in *QueryPlanByRollappRequest, opts ...grpc.CallOption) (*QueryPlanByRollappResponse, error) {
	out := new(QueryPlanByRollappResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.iro.Query/QueryPlanByRollapp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySpotPrice(ctx context.Context, in *QuerySpotPriceRequest, opts ...grpc.CallOption) (*QuerySpotPriceResponse, error) {
	out := new(QuerySpotPriceResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.iro.Query/QuerySpotPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCost(ctx context.Context, in *QueryCostRequest, opts ...grpc.CallOption) (*QueryCostResponse, error) {
	out := new(QueryCostResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.iro.Query/QueryCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTokensForExactInAmount(ctx context.Context, in *QueryTokensForExactInAmountRequest, opts ...grpc.CallOption) (*QueryTokensForExactInAmountResponse, error) {
	out := new(QueryTokensForExactInAmountResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.iro.Query/QueryTokensForExactInAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryClaimed(ctx context.Context, in *QueryClaimedRequest, opts ...grpc.CallOption) (*QueryClaimedResponse, error) {
	out := new(QueryClaimedResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.iro.Query/QueryClaimed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVesting(ctx context.Context, in *QueryVestingRequest, opts ...grpc.CallOption) (*QueryVestingResponse, error) {
	out := new(QueryVestingResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.iro.Query/QueryVesting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the IRO module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// QueryPlans retrieves all available plans.
	QueryPlans(context.Context, *QueryPlansRequest) (*QueryPlansResponse, error)
	// QueryPlan retrieves the plan for the specified plan ID.
	QueryPlan(context.Context, *QueryPlanRequest) (*QueryPlanResponse, error)
	// QueryPlanByRollapp retrieves the plans for the specified rollapp ID.
	QueryPlanByRollapp(context.Context, *QueryPlanByRollappRequest) (*QueryPlanByRollappResponse, error)
	// QuerySpotPrice retrieves the current spot price for the specified plan ID.
	// The result is the price of 1 IRO token (not iro's base denom)
	QuerySpotPrice(context.Context, *QuerySpotPriceRequest) (*QuerySpotPriceResponse, error)
	// QueryCost retrieves the expected cost for buying or selling the specified
	// amount of shares.
	QueryCost(context.Context, *QueryCostRequest) (*QueryCostResponse, error)
	QueryTokensForExactInAmount(context.Context, *QueryTokensForExactInAmountRequest) (*QueryTokensForExactInAmountResponse, error)
	// QueryClaimed retrieves the claimed amount thus far for the specified plan
	// ID.
	QueryClaimed(context.Context, *QueryClaimedRequest) (*QueryClaimedResponse, error)
	// QueryVesting queries the claimable and vested amount for
	// the specified plan ID.
	QueryVesting(context.Context, *QueryVestingRequest) (*QueryVestingResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryPlans(ctx context.Context, req *QueryPlansRequest) (*QueryPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPlans not implemented")
}
func (*UnimplementedQueryServer) QueryPlan(ctx context.Context, req *QueryPlanRequest) (*QueryPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPlan not implemented")
}
func (*UnimplementedQueryServer) QueryPlanByRollapp(ctx context.Context, req *QueryPlanByRollappRequest) (*QueryPlanByRollappResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPlanByRollapp not implemented")
}
func (*UnimplementedQueryServer) QuerySpotPrice(ctx context.Context, req *QuerySpotPriceRequest) (*QuerySpotPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySpotPrice not implemented")
}
func (*UnimplementedQueryServer) QueryCost(ctx context.Context, req *QueryCostRequest) (*QueryCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCost not implemented")
}
func (*UnimplementedQueryServer) QueryTokensForExactInAmount(ctx context.Context, req *QueryTokensForExactInAmountRequest) (*QueryTokensForExactInAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokensForExactInAmount not implemented")
}
func (*UnimplementedQueryServer) QueryClaimed(ctx context.Context, req *QueryClaimedRequest) (*QueryClaimedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryClaimed not implemented")
}
func (*UnimplementedQueryServer) QueryVesting(ctx context.Context, req *QueryVestingRequest) (*QueryVestingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVesting not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.iro.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.iro.Query/QueryPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPlans(ctx, req.(*QueryPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.iro.Query/QueryPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPlan(ctx, req.(*QueryPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPlanByRollapp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlanByRollappRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPlanByRollapp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.iro.Query/QueryPlanByRollapp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPlanByRollapp(ctx, req.(*QueryPlanByRollappRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySpotPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySpotPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.iro.Query/QuerySpotPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySpotPrice(ctx, req.(*QuerySpotPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.iro.Query/QueryCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCost(ctx, req.(*QueryCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTokensForExactInAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokensForExactInAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTokensForExactInAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.iro.Query/QueryTokensForExactInAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTokensForExactInAmount(ctx, req.(*QueryTokensForExactInAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryClaimed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClaimedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryClaimed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.iro.Query/QueryClaimed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryClaimed(ctx, req.(*QueryClaimedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVesting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVestingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVesting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.iro.Query/QueryVesting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVesting(ctx, req.(*QueryVestingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.iro.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryPlans",
			Handler:    _Query_QueryPlans_Handler,
		},
		{
			MethodName: "QueryPlan",
			Handler:    _Query_QueryPlan_Handler,
		},
		{
			MethodName: "QueryPlanByRollapp",
			Handler:    _Query_QueryPlanByRollapp_Handler,
		},
		{
			MethodName: "QuerySpotPrice",
			Handler:    _Query_QuerySpotPrice_Handler,
		},
		{
			MethodName: "QueryCost",
			Handler:    _Query_QueryCost_Handler,
		},
		{
			MethodName: "QueryTokensForExactInAmount",
			Handler:    _Query_QueryTokensForExactInAmount_Handler,
		},
		{
			MethodName: "QueryClaimed",
			Handler:    _Query_QueryClaimed_Handler,
		},
		{
			MethodName: "QueryVesting",
			Handler:    _Query_QueryVesting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/iro/query.proto",
}

func (m *QueryVestingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlanId) > 0 {
		i -= len(m.PlanId)
		copy(dAtA[i:], m.PlanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVestingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ClaimableAmount.Size()
		i -= size
		if _, err := m.ClaimableAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.VestedAmount.Size()
		i -= size
		if _, err := m.VestedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPlansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlansRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlansRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StandardLaunchOnly {
		i--
		if m.StandardLaunchOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NonGraduatedOnly {
		i--
		if m.NonGraduatedOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.NonSettledOnly {
		i--
		if m.NonSettledOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPlansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Plans) > 0 {
		for iNdEx := len(m.Plans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Plans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPlanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlanId) > 0 {
		i -= len(m.PlanId)
		copy(dAtA[i:], m.PlanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Plan != nil {
		{
			size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPlanByRollappRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlanByRollappRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlanByRollappRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPlanByRollappResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlanByRollappResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlanByRollappResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Plan != nil {
		{
			size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlanId) > 0 {
		i -= len(m.PlanId)
		copy(dAtA[i:], m.PlanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sell {
		i--
		if m.Sell {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amt.Size()
		i -= size
		if _, err := m.Amt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PlanId) > 0 {
		i -= len(m.PlanId)
		copy(dAtA[i:], m.PlanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCostResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCostResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cost != nil {
		{
			size, err := m.Cost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokensForExactInAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokensForExactInAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokensForExactInAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amt.Size()
		i -= size
		if _, err := m.Amt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PlanId) > 0 {
		i -= len(m.PlanId)
		copy(dAtA[i:], m.PlanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokensForExactInAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokensForExactInAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokensForExactInAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tokens != nil {
		{
			size, err := m.Tokens.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlanId) > 0 {
		i -= len(m.PlanId)
		copy(dAtA[i:], m.PlanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimedAmt != nil {
		{
			size := m.ClaimedAmt.Size()
			i -= size
			if _, err := m.ClaimedAmt.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryVestingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVestingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Total.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.VestedAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ClaimableAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPlansRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonSettledOnly {
		n += 2
	}
	if m.NonGraduatedOnly {
		n += 2
	}
	if m.StandardLaunchOnly {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPlansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Plans) > 0 {
		for _, e := range m.Plans {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPlanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plan != nil {
		l = m.Plan.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPlanByRollappRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPlanByRollappResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plan != nil {
		l = m.Plan.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Amt.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Sell {
		n += 2
	}
	return n
}

func (m *QueryCostResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cost != nil {
		l = m.Cost.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokensForExactInAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Amt.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokensForExactInAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tokens != nil {
		l = m.Tokens.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClaimedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClaimedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimedAmt != nil {
		l = m.ClaimedAmt.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryVestingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVestingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimableAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimableAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonSettledOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NonSettledOnly = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonGraduatedOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NonGraduatedOnly = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StandardLaunchOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StandardLaunchOnly = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plans = append(m.Plans, Plan{})
			if err := m.Plans[len(m.Plans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plan == nil {
				m.Plan = &Plan{}
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlanByRollappRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlanByRollappRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlanByRollappRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlanByRollappResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlanByRollappResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlanByRollappResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plan == nil {
				m.Plan = &Plan{}
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sell", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sell = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cost == nil {
				m.Cost = &types.Coin{}
			}
			if err := m.Cost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokensForExactInAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokensForExactInAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokensForExactInAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokensForExactInAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokensForExactInAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokensForExactInAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tokens == nil {
				m.Tokens = &types.Coin{}
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.ClaimedAmt = &v
			if err := m.ClaimedAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
