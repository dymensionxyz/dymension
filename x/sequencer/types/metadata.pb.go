// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymension/sequencer/metadata.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Metadata defines rollapp/sequencer extra information.
type SequencerMetadata struct {
	// moniker defines a human-readable name for the sequencer.
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// identity defines an optional identity signature (ex. UPort or Keybase).
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// securityContact defines an optional email for security contact.
	SecurityContact string `protobuf:"bytes,3,opt,name=securityContact,proto3" json:"securityContact,omitempty"`
	// details define other optional details.
	Details string `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	// bootstrap nodes list
	P2PSeed string `protobuf:"bytes,5,opt,name=p2p_seed,json=p2pSeed,proto3" json:"p2p_seed,omitempty"`
	// RPCs list
	Rpcs []string `protobuf:"bytes,6,rep,name=rpcs,proto3" json:"rpcs,omitempty"`
	// evm RPCs list
	EvmRpcs []string `protobuf:"bytes,7,rep,name=evm_rpcs,json=evmRpcs,proto3" json:"evm_rpcs,omitempty"`
	// REST API URLs
	RestApiUrls []string `protobuf:"bytes,8,rep,name=rest_api_urls,json=restApiUrls,proto3" json:"rest_api_urls,omitempty"`
	// block explorer URL
	ExplorerUrl string `protobuf:"bytes,9,opt,name=explorer_url,json=explorerUrl,proto3" json:"explorer_url,omitempty"`
	// website URL
	Website string `protobuf:"bytes,10,opt,name=website,proto3" json:"website,omitempty"`
	// json dump the sequencer can add (limited by size)
	ExtraData []byte `protobuf:"bytes,11,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (m *SequencerMetadata) Reset()         { *m = SequencerMetadata{} }
func (m *SequencerMetadata) String() string { return proto.CompactTextString(m) }
func (*SequencerMetadata) ProtoMessage()    {}
func (*SequencerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b236c92093bea103, []int{0}
}
func (m *SequencerMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SequencerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SequencerMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SequencerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequencerMetadata.Merge(m, src)
}
func (m *SequencerMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SequencerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SequencerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SequencerMetadata proto.InternalMessageInfo

func (m *SequencerMetadata) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *SequencerMetadata) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *SequencerMetadata) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *SequencerMetadata) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *SequencerMetadata) GetP2PSeed() string {
	if m != nil {
		return m.P2PSeed
	}
	return ""
}

func (m *SequencerMetadata) GetRpcs() []string {
	if m != nil {
		return m.Rpcs
	}
	return nil
}

func (m *SequencerMetadata) GetEvmRpcs() []string {
	if m != nil {
		return m.EvmRpcs
	}
	return nil
}

func (m *SequencerMetadata) GetRestApiUrls() []string {
	if m != nil {
		return m.RestApiUrls
	}
	return nil
}

func (m *SequencerMetadata) GetExplorerUrl() string {
	if m != nil {
		return m.ExplorerUrl
	}
	return ""
}

func (m *SequencerMetadata) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *SequencerMetadata) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func init() {
	proto.RegisterType((*SequencerMetadata)(nil), "dymensionxyz.dymension.sequencer.SequencerMetadata")
}

func init() {
	proto.RegisterFile("dymension/sequencer/metadata.proto", fileDescriptor_b236c92093bea103)
}

var fileDescriptor_b236c92093bea103 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbd, 0x6e, 0xe2, 0x40,
	0x14, 0x85, 0x31, 0xb0, 0x80, 0x07, 0x56, 0xab, 0x9d, 0x6a, 0x76, 0xa5, 0xb5, 0xbc, 0x54, 0xae,
	0x6c, 0x09, 0xa4, 0xf4, 0xf9, 0x69, 0x23, 0x45, 0x46, 0x34, 0x69, 0xac, 0xc1, 0xbe, 0x4a, 0x46,
	0xf1, 0xcf, 0x64, 0xe6, 0x9a, 0xd8, 0x79, 0x8a, 0x3c, 0x56, 0x4a, 0xba, 0xa4, 0x8c, 0xe0, 0x45,
	0x22, 0x0f, 0xe0, 0xa0, 0x74, 0xfe, 0xce, 0x39, 0xf7, 0xfa, 0x6a, 0x0e, 0x99, 0x26, 0x75, 0x06,
	0xb9, 0x16, 0x45, 0x1e, 0x68, 0x78, 0x2c, 0x21, 0x8f, 0x41, 0x05, 0x19, 0x20, 0x4f, 0x38, 0x72,
	0x5f, 0xaa, 0x02, 0x0b, 0xea, 0xb6, 0x99, 0xaa, 0x7e, 0xf6, 0x5b, 0xf0, 0xdb, 0x81, 0xe9, 0x5b,
	0x97, 0xfc, 0x5e, 0x1c, 0xe9, 0xfa, 0x30, 0x4d, 0x19, 0x19, 0x66, 0x45, 0x2e, 0x1e, 0x40, 0x31,
	0xcb, 0xb5, 0x3c, 0x3b, 0x3c, 0x22, 0xfd, 0x4b, 0x46, 0x22, 0x81, 0x1c, 0x05, 0xd6, 0xac, 0x6b,
	0xac, 0x96, 0xa9, 0x47, 0x7e, 0x69, 0x88, 0x4b, 0x25, 0xb0, 0xbe, 0x2c, 0x72, 0xe4, 0x31, 0xb2,
	0x9e, 0x89, 0x7c, 0x97, 0x9b, 0xfd, 0x09, 0x20, 0x17, 0xa9, 0x66, 0xfd, 0xfd, 0xfe, 0x03, 0xd2,
	0x3f, 0x64, 0x24, 0x67, 0x32, 0xd2, 0x00, 0x09, 0xfb, 0xb1, 0xb7, 0xe4, 0x4c, 0x2e, 0x00, 0x12,
	0x4a, 0x49, 0x5f, 0xc9, 0x58, 0xb3, 0x81, 0xdb, 0xf3, 0xec, 0xd0, 0x7c, 0x37, 0x71, 0x58, 0x67,
	0x91, 0xd1, 0x87, 0x46, 0x1f, 0xc2, 0x3a, 0x0b, 0x1b, 0x6b, 0x4a, 0x7e, 0x2a, 0xd0, 0x18, 0x71,
	0x29, 0xa2, 0x52, 0xa5, 0x9a, 0x8d, 0x8c, 0x3f, 0x6e, 0xc4, 0x73, 0x29, 0x96, 0x2a, 0xd5, 0xf4,
	0x3f, 0x99, 0x40, 0x25, 0xd3, 0x42, 0x81, 0x6a, 0x32, 0xcc, 0x36, 0x7f, 0x1c, 0x1f, 0xb5, 0xa5,
	0x4a, 0x9b, 0x53, 0x9f, 0x60, 0xa5, 0x05, 0x02, 0x23, 0xfb, 0x7b, 0x0e, 0x48, 0xff, 0x11, 0x02,
	0x15, 0x2a, 0x1e, 0x35, 0x4f, 0xc6, 0xc6, 0xae, 0xe5, 0x4d, 0x42, 0xdb, 0x28, 0x57, 0x1c, 0xf9,
	0xc5, 0xcd, 0xeb, 0xd6, 0xb1, 0x36, 0x5b, 0xc7, 0xfa, 0xd8, 0x3a, 0xd6, 0xcb, 0xce, 0xe9, 0x6c,
	0x76, 0x4e, 0xe7, 0x7d, 0xe7, 0x74, 0x6e, 0xcf, 0xee, 0x04, 0xde, 0x97, 0x2b, 0x3f, 0x2e, 0xb2,
	0xe0, 0xb4, 0xa0, 0x2f, 0x08, 0xd6, 0xf3, 0xa0, 0x3a, 0xa9, 0x15, 0x6b, 0x09, 0x7a, 0x35, 0x30,
	0xa5, 0xce, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x76, 0x4d, 0xe0, 0x9f, 0xfa, 0x01, 0x00, 0x00,
}

func (m *SequencerMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SequencerMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequencerMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ExplorerUrl) > 0 {
		i -= len(m.ExplorerUrl)
		copy(dAtA[i:], m.ExplorerUrl)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ExplorerUrl)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RestApiUrls) > 0 {
		for iNdEx := len(m.RestApiUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RestApiUrls[iNdEx])
			copy(dAtA[i:], m.RestApiUrls[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.RestApiUrls[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.EvmRpcs) > 0 {
		for iNdEx := len(m.EvmRpcs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EvmRpcs[iNdEx])
			copy(dAtA[i:], m.EvmRpcs[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.EvmRpcs[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Rpcs) > 0 {
		for iNdEx := len(m.Rpcs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Rpcs[iNdEx])
			copy(dAtA[i:], m.Rpcs[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.Rpcs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.P2PSeed) > 0 {
		i -= len(m.P2PSeed)
		copy(dAtA[i:], m.P2PSeed)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.P2PSeed)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SequencerMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.P2PSeed)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if len(m.Rpcs) > 0 {
		for _, s := range m.Rpcs {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if len(m.EvmRpcs) > 0 {
		for _, s := range m.EvmRpcs {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if len(m.RestApiUrls) > 0 {
		for _, s := range m.RestApiUrls {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	l = len(m.ExplorerUrl)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SequencerMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SequencerMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SequencerMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2PSeed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P2PSeed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rpcs = append(m.Rpcs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmRpcs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmRpcs = append(m.EvmRpcs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestApiUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestApiUrls = append(m.RestApiUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplorerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplorerUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
