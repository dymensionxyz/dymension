// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/sequencer/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventIncreasedBond is an event emitted when a sequencer's bond is increased.
type EventIncreasedBond struct {
	// sequencer is the bech32-encoded address of the sequencer which increased its bond
	Sequencer string `protobuf:"bytes,1,opt,name=sequencer,proto3" json:"sequencer,omitempty"`
	// added_amount is the amount of coins added to the sequencer's bond
	AddedAmount types.Coin `protobuf:"bytes,2,opt,name=added_amount,json=addedAmount,proto3" json:"added_amount"`
	// bond is the new active bond amount of the sequencer
	Bond github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=bond,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"bond"`
}

func (m *EventIncreasedBond) Reset()         { *m = EventIncreasedBond{} }
func (m *EventIncreasedBond) String() string { return proto.CompactTextString(m) }
func (*EventIncreasedBond) ProtoMessage()    {}
func (*EventIncreasedBond) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f8a63d7e7167eb3, []int{0}
}
func (m *EventIncreasedBond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventIncreasedBond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventIncreasedBond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventIncreasedBond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventIncreasedBond.Merge(m, src)
}
func (m *EventIncreasedBond) XXX_Size() int {
	return m.Size()
}
func (m *EventIncreasedBond) XXX_DiscardUnknown() {
	xxx_messageInfo_EventIncreasedBond.DiscardUnknown(m)
}

var xxx_messageInfo_EventIncreasedBond proto.InternalMessageInfo

func (m *EventIncreasedBond) GetSequencer() string {
	if m != nil {
		return m.Sequencer
	}
	return ""
}

func (m *EventIncreasedBond) GetAddedAmount() types.Coin {
	if m != nil {
		return m.AddedAmount
	}
	return types.Coin{}
}

func (m *EventIncreasedBond) GetBond() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Bond
	}
	return nil
}

func init() {
	proto.RegisterType((*EventIncreasedBond)(nil), "dymensionxyz.dymension.sequencer.EventIncreasedBond")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/sequencer/events.proto", fileDescriptor_1f8a63d7e7167eb3)
}

var fileDescriptor_1f8a63d7e7167eb3 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x13, 0x5a, 0x21, 0x35, 0x65, 0x8a, 0x2a, 0x91, 0x76, 0x70, 0x23, 0xa6, 0x2e, 0xb5,
	0x29, 0x95, 0xba, 0x37, 0x88, 0x81, 0x0d, 0x95, 0x8d, 0xa5, 0x4a, 0x62, 0x2b, 0x44, 0x28, 0xbe,
	0x92, 0x73, 0xa3, 0x96, 0xa7, 0xe0, 0x39, 0x98, 0x79, 0x88, 0x8e, 0x15, 0x13, 0x13, 0xa0, 0xf6,
	0x09, 0x78, 0x03, 0x14, 0xc7, 0x0a, 0x5d, 0x60, 0xb2, 0xef, 0xee, 0xff, 0x7e, 0xfd, 0xba, 0x73,
	0x86, 0x7c, 0x9d, 0x09, 0x89, 0x29, 0xc8, 0xd5, 0xfa, 0x89, 0xd5, 0x05, 0x43, 0xf1, 0xb8, 0x14,
	0x32, 0x16, 0x39, 0x13, 0x85, 0x90, 0x0a, 0xe9, 0x22, 0x07, 0x05, 0xae, 0x7f, 0x28, 0xa7, 0x75,
	0x41, 0x6b, 0x79, 0xaf, 0x1b, 0x03, 0x66, 0x80, 0x73, 0xad, 0x67, 0x55, 0x51, 0xc1, 0xbd, 0x4e,
	0x02, 0x09, 0x54, 0xfd, 0xf2, 0x67, 0xba, 0xa4, 0xd2, 0xb0, 0x28, 0x44, 0xc1, 0x8a, 0x51, 0x24,
	0x54, 0x38, 0x62, 0x31, 0xa4, 0xd2, 0xcc, 0x4f, 0xcd, 0x3c, 0xc3, 0x84, 0x15, 0xa3, 0xf2, 0xa9,
	0x06, 0x67, 0xdf, 0xb6, 0xe3, 0x5e, 0x95, 0xe1, 0xae, 0x65, 0x9c, 0x8b, 0x10, 0x05, 0x0f, 0x40,
	0x72, 0x77, 0xe2, 0xb4, 0xea, 0x34, 0x9e, 0xed, 0xdb, 0x83, 0x56, 0xe0, 0xbd, 0xbd, 0x0e, 0x3b,
	0x26, 0xca, 0x94, 0xf3, 0x5c, 0x20, 0xde, 0xaa, 0x3c, 0x95, 0xc9, 0xec, 0x57, 0xea, 0x06, 0xce,
	0x49, 0xc8, 0xb9, 0xe0, 0xf3, 0x30, 0x83, 0xa5, 0x54, 0xde, 0x91, 0x6f, 0x0f, 0xda, 0x17, 0x5d,
	0x6a, 0xb8, 0x32, 0x1e, 0x35, 0xf1, 0xe8, 0x25, 0xa4, 0x32, 0x68, 0x6e, 0x3e, 0xfa, 0xd6, 0xac,
	0xad, 0xa1, 0xa9, 0x66, 0xdc, 0xb9, 0xd3, 0x8c, 0x40, 0x72, 0xaf, 0xe1, 0x37, 0xfe, 0x67, 0xcf,
	0x4b, 0xf6, 0xe5, 0xb3, 0x3f, 0x48, 0x52, 0x75, 0xbf, 0x8c, 0x68, 0x0c, 0x99, 0xd9, 0x95, 0x79,
	0x86, 0xc8, 0x1f, 0x98, 0x5a, 0x2f, 0x04, 0x6a, 0x00, 0x67, 0xda, 0x38, 0xb8, 0xd9, 0xec, 0x88,
	0xbd, 0xdd, 0x11, 0xfb, 0x6b, 0x47, 0xec, 0xe7, 0x3d, 0xb1, 0xb6, 0x7b, 0x62, 0xbd, 0xef, 0x89,
	0x75, 0x37, 0x39, 0x70, 0xfa, 0xe3, 0xa6, 0xc5, 0x98, 0xad, 0x0e, 0x0e, 0xab, 0xdd, 0xa3, 0x63,
	0xbd, 0xcc, 0xf1, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0xb7, 0x3b, 0x80, 0x09, 0x02, 0x00,
	0x00,
}

func (m *EventIncreasedBond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventIncreasedBond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventIncreasedBond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bond) > 0 {
		for iNdEx := len(m.Bond) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bond[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.AddedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sequencer) > 0 {
		i -= len(m.Sequencer)
		copy(dAtA[i:], m.Sequencer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sequencer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventIncreasedBond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sequencer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.AddedAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	if len(m.Bond) > 0 {
		for _, e := range m.Bond {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventIncreasedBond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventIncreasedBond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventIncreasedBond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequencer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sequencer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bond = append(m.Bond, types.Coin{})
			if err := m.Bond[len(m.Bond)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
