// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/sequencer/slash_proposal.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSlashSequencerProposal struct {
	// Authority is the authority address.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Sequencer string `protobuf:"bytes,2,opt,name=sequencer,proto3" json:"sequencer,omitempty"`
	// rewardAddr is bech32 for sdk acc addr
	Rewardee string `protobuf:"bytes,3,opt,name=rewardee,proto3" json:"rewardee,omitempty"`
}

func (m *MsgSlashSequencerProposal) Reset()         { *m = MsgSlashSequencerProposal{} }
func (m *MsgSlashSequencerProposal) String() string { return proto.CompactTextString(m) }
func (*MsgSlashSequencerProposal) ProtoMessage()    {}
func (*MsgSlashSequencerProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7071ad24e645d56, []int{0}
}
func (m *MsgSlashSequencerProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSlashSequencerProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSlashSequencerProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSlashSequencerProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSlashSequencerProposal.Merge(m, src)
}
func (m *MsgSlashSequencerProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgSlashSequencerProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSlashSequencerProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSlashSequencerProposal proto.InternalMessageInfo

func (m *MsgSlashSequencerProposal) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSlashSequencerProposal) GetSequencer() string {
	if m != nil {
		return m.Sequencer
	}
	return ""
}

func (m *MsgSlashSequencerProposal) GetRewardee() string {
	if m != nil {
		return m.Rewardee
	}
	return ""
}

type MsgSlashSequencerResponse struct {
}

func (m *MsgSlashSequencerResponse) Reset()         { *m = MsgSlashSequencerResponse{} }
func (m *MsgSlashSequencerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSlashSequencerResponse) ProtoMessage()    {}
func (*MsgSlashSequencerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7071ad24e645d56, []int{1}
}
func (m *MsgSlashSequencerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSlashSequencerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSlashSequencerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSlashSequencerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSlashSequencerResponse.Merge(m, src)
}
func (m *MsgSlashSequencerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSlashSequencerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSlashSequencerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSlashSequencerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSlashSequencerProposal)(nil), "dymensionxyz.dymension.sequencer.MsgSlashSequencerProposal")
	proto.RegisterType((*MsgSlashSequencerResponse)(nil), "dymensionxyz.dymension.sequencer.MsgSlashSequencerResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/sequencer/slash_proposal.proto", fileDescriptor_d7071ad24e645d56)
}

var fileDescriptor_d7071ad24e645d56 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0xbd, 0x4e, 0xe3, 0x40,
	0x18, 0xcc, 0xde, 0x49, 0xa7, 0x8b, 0x4f, 0xba, 0xc2, 0x77, 0xd2, 0x25, 0xbe, 0x93, 0x2f, 0x4a,
	0x85, 0x90, 0xf0, 0x2a, 0x44, 0x50, 0x40, 0x47, 0x1f, 0x29, 0x4a, 0x3a, 0x9a, 0x68, 0xed, 0x7c,
	0x6c, 0x2c, 0x65, 0xfd, 0x19, 0x7f, 0xeb, 0x10, 0x53, 0xc2, 0x03, 0xc0, 0x1b, 0xf0, 0x0a, 0x3c,
	0x06, 0x65, 0x4a, 0x4a, 0x94, 0x14, 0xbc, 0x06, 0xf2, 0x6f, 0x22, 0x44, 0x14, 0x89, 0xca, 0x9e,
	0x6f, 0x66, 0xbe, 0x9d, 0xdd, 0x31, 0x8e, 0xc6, 0x89, 0x82, 0x80, 0x7c, 0x0c, 0xe6, 0xc9, 0x35,
	0xaf, 0x00, 0x27, 0xb8, 0x8c, 0x21, 0xf0, 0x20, 0xe2, 0x34, 0x15, 0x34, 0x19, 0x85, 0x11, 0x86,
	0x48, 0x62, 0xea, 0x84, 0x11, 0x6a, 0x34, 0x5b, 0x9b, 0x36, 0xa7, 0x02, 0x4e, 0x65, 0xb3, 0x9a,
	0x12, 0x51, 0x4e, 0x81, 0x67, 0x7a, 0x37, 0xbe, 0xe0, 0x22, 0x48, 0x72, 0xb3, 0xd5, 0xf4, 0x90,
	0x14, 0xd2, 0x28, 0x43, 0x3c, 0x07, 0x05, 0xf5, 0x5b, 0xa2, 0xc4, 0x7c, 0x9e, 0xfe, 0x15, 0x53,
	0x3b, 0xd7, 0x70, 0x57, 0x10, 0xf0, 0x59, 0xc7, 0x05, 0x2d, 0x3a, 0xdc, 0x43, 0x3f, 0x28, 0xf8,
	0xff, 0xef, 0xcf, 0xd2, 0xbe, 0x02, 0xd2, 0x42, 0x85, 0x85, 0xe0, 0x4f, 0xb1, 0x40, 0x91, 0xe4,
	0xb3, 0x4e, 0xfa, 0x29, 0x88, 0x83, 0x9d, 0xd7, 0x0f, 0x45, 0x24, 0x54, 0x19, 0x8f, 0xef, 0x94,
	0x2b, 0xd0, 0x62, 0x2c, 0xb4, 0xc8, 0x0d, 0xed, 0x5b, 0x66, 0x34, 0x7b, 0x24, 0x87, 0xe9, 0x1b,
	0x0e, 0x4b, 0x51, 0xbf, 0x78, 0x4b, 0xf3, 0x9f, 0x51, 0x17, 0xb1, 0x9e, 0x60, 0xe4, 0xeb, 0xa4,
	0xc1, 0x5a, 0x6c, 0xaf, 0x3e, 0x58, 0x0f, 0x52, 0xb6, 0xda, 0xdb, 0xf8, 0x92, 0xb3, 0xd5, 0xc0,
	0xb4, 0x8c, 0xef, 0x11, 0x5c, 0x89, 0x68, 0x0c, 0xd0, 0xf8, 0x9a, 0x91, 0x15, 0x3e, 0xf9, 0x79,
	0xf3, 0xfa, 0xb8, 0xbf, 0xde, 0xd4, 0xfe, 0xfb, 0x41, 0x88, 0x01, 0x50, 0x88, 0x01, 0xc1, 0xe1,
	0x03, 0x33, 0x7e, 0x94, 0x89, 0x7a, 0x24, 0xcd, 0x3b, 0x66, 0xfc, 0x1a, 0xc6, 0xae, 0xf2, 0x75,
	0x66, 0xa8, 0xc2, 0x9e, 0x3a, 0xbb, 0x3a, 0x77, 0xb6, 0xde, 0xd4, 0xfa, 0x8c, 0xb9, 0x4c, 0x78,
	0xd6, 0x7f, 0x5a, 0xda, 0x6c, 0xb1, 0xb4, 0xd9, 0xcb, 0xd2, 0x66, 0xf7, 0x2b, 0xbb, 0xb6, 0x58,
	0xd9, 0xb5, 0xe7, 0x95, 0x5d, 0x3b, 0x3f, 0x96, 0xbe, 0x9e, 0xc4, 0xae, 0xe3, 0xa1, 0xda, 0x56,
	0xcd, 0xac, 0xcb, 0xe7, 0x1b, 0xfd, 0xe8, 0x24, 0x04, 0x72, 0xbf, 0x65, 0xed, 0x74, 0xdf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xfa, 0x05, 0xf8, 0x79, 0xfe, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProposalMsgClient is the client API for ProposalMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProposalMsgClient interface {
	SubmitSlashProposal(ctx context.Context, in *MsgSlashSequencerProposal, opts ...grpc.CallOption) (*MsgSlashSequencerResponse, error)
}

type proposalMsgClient struct {
	cc grpc1.ClientConn
}

func NewProposalMsgClient(cc grpc1.ClientConn) ProposalMsgClient {
	return &proposalMsgClient{cc}
}

func (c *proposalMsgClient) SubmitSlashProposal(ctx context.Context, in *MsgSlashSequencerProposal, opts ...grpc.CallOption) (*MsgSlashSequencerResponse, error) {
	out := new(MsgSlashSequencerResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.sequencer.ProposalMsg/SubmitSlashProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProposalMsgServer is the server API for ProposalMsg service.
type ProposalMsgServer interface {
	SubmitSlashProposal(context.Context, *MsgSlashSequencerProposal) (*MsgSlashSequencerResponse, error)
}

// UnimplementedProposalMsgServer can be embedded to have forward compatible implementations.
type UnimplementedProposalMsgServer struct {
}

func (*UnimplementedProposalMsgServer) SubmitSlashProposal(ctx context.Context, req *MsgSlashSequencerProposal) (*MsgSlashSequencerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSlashProposal not implemented")
}

func RegisterProposalMsgServer(s grpc1.Server, srv ProposalMsgServer) {
	s.RegisterService(&_ProposalMsg_serviceDesc, srv)
}

func _ProposalMsg_SubmitSlashProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSlashSequencerProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalMsgServer).SubmitSlashProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.sequencer.ProposalMsg/SubmitSlashProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalMsgServer).SubmitSlashProposal(ctx, req.(*MsgSlashSequencerProposal))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProposalMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.sequencer.ProposalMsg",
	HandlerType: (*ProposalMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitSlashProposal",
			Handler:    _ProposalMsg_SubmitSlashProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/sequencer/slash_proposal.proto",
}

func (m *MsgSlashSequencerProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSlashSequencerProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSlashSequencerProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewardee) > 0 {
		i -= len(m.Rewardee)
		copy(dAtA[i:], m.Rewardee)
		i = encodeVarintSlashProposal(dAtA, i, uint64(len(m.Rewardee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sequencer) > 0 {
		i -= len(m.Sequencer)
		copy(dAtA[i:], m.Sequencer)
		i = encodeVarintSlashProposal(dAtA, i, uint64(len(m.Sequencer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintSlashProposal(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSlashSequencerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSlashSequencerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSlashSequencerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintSlashProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovSlashProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSlashSequencerProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovSlashProposal(uint64(l))
	}
	l = len(m.Sequencer)
	if l > 0 {
		n += 1 + l + sovSlashProposal(uint64(l))
	}
	l = len(m.Rewardee)
	if l > 0 {
		n += 1 + l + sovSlashProposal(uint64(l))
	}
	return n
}

func (m *MsgSlashSequencerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovSlashProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSlashProposal(x uint64) (n int) {
	return sovSlashProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSlashSequencerProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlashProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSlashSequencerProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSlashSequencerProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlashProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlashProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequencer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlashProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlashProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sequencer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewardee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlashProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlashProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewardee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSlashProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlashProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSlashSequencerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlashProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSlashSequencerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSlashSequencerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSlashProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlashProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSlashProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSlashProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlashProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlashProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSlashProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSlashProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSlashProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSlashProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSlashProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSlashProposal = fmt.Errorf("proto: unexpected end of group")
)
