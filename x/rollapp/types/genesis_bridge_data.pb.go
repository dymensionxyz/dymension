// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/rollapp/genesis_bridge_data.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/cosmos/ibc-go/v7/modules/apps/transfer/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisBridgeData is the data struct that is passed to the hub for the
// genesis bridge flow
type GenesisBridgeData struct {
	// genesis_info is the genesis info of the rollapp. used for hub validation
	GenesisInfo GenesisBridgeInfo `protobuf:"bytes,1,opt,name=genesis_info,json=genesisInfo,proto3" json:"genesis_info"`
	// native_denom is the native denom of the rollapp. registered on the hub
	NativeDenom types.Metadata `protobuf:"bytes,2,opt,name=native_denom,json=nativeDenom,proto3" json:"native_denom"`
	// optional genesis transfer packet data
	GenesisTransfer *types1.FungibleTokenPacketData `protobuf:"bytes,3,opt,name=genesis_transfer,json=genesisTransfer,proto3" json:"genesis_transfer,omitempty"`
}

func (m *GenesisBridgeData) Reset()         { *m = GenesisBridgeData{} }
func (m *GenesisBridgeData) String() string { return proto.CompactTextString(m) }
func (*GenesisBridgeData) ProtoMessage()    {}
func (*GenesisBridgeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b325fcde35853ba, []int{0}
}
func (m *GenesisBridgeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisBridgeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisBridgeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisBridgeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisBridgeData.Merge(m, src)
}
func (m *GenesisBridgeData) XXX_Size() int {
	return m.Size()
}
func (m *GenesisBridgeData) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisBridgeData.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisBridgeData proto.InternalMessageInfo

func (m *GenesisBridgeData) GetGenesisInfo() GenesisBridgeInfo {
	if m != nil {
		return m.GenesisInfo
	}
	return GenesisBridgeInfo{}
}

func (m *GenesisBridgeData) GetNativeDenom() types.Metadata {
	if m != nil {
		return m.NativeDenom
	}
	return types.Metadata{}
}

func (m *GenesisBridgeData) GetGenesisTransfer() *types1.FungibleTokenPacketData {
	if m != nil {
		return m.GenesisTransfer
	}
	return nil
}

// The genesis info of the rollapp, that is passed to the hub for validation.
// it's populated on the InitGenesis of the rollapp
type GenesisBridgeInfo struct {
	// checksum used to verify integrity of the genesis file. currently unused
	GenesisChecksum string `protobuf:"bytes,1,opt,name=genesis_checksum,json=genesisChecksum,proto3" json:"genesis_checksum,omitempty"`
	// unique bech32 prefix
	Bech32Prefix string `protobuf:"bytes,2,opt,name=bech32_prefix,json=bech32Prefix,proto3" json:"bech32_prefix,omitempty"`
	// native_denom is the base denom for the native token
	NativeDenom *DenomMetadata `protobuf:"bytes,3,opt,name=native_denom,json=nativeDenom,proto3" json:"native_denom,omitempty"`
	// initial_supply is the initial supply of the native token
	InitialSupply github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=initial_supply,json=initialSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_supply"`
}

func (m *GenesisBridgeInfo) Reset()         { *m = GenesisBridgeInfo{} }
func (m *GenesisBridgeInfo) String() string { return proto.CompactTextString(m) }
func (*GenesisBridgeInfo) ProtoMessage()    {}
func (*GenesisBridgeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b325fcde35853ba, []int{1}
}
func (m *GenesisBridgeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisBridgeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisBridgeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisBridgeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisBridgeInfo.Merge(m, src)
}
func (m *GenesisBridgeInfo) XXX_Size() int {
	return m.Size()
}
func (m *GenesisBridgeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisBridgeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisBridgeInfo proto.InternalMessageInfo

func (m *GenesisBridgeInfo) GetGenesisChecksum() string {
	if m != nil {
		return m.GenesisChecksum
	}
	return ""
}

func (m *GenesisBridgeInfo) GetBech32Prefix() string {
	if m != nil {
		return m.Bech32Prefix
	}
	return ""
}

func (m *GenesisBridgeInfo) GetNativeDenom() *DenomMetadata {
	if m != nil {
		return m.NativeDenom
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisBridgeData)(nil), "dymensionxyz.dymension.rollapp.GenesisBridgeData")
	proto.RegisterType((*GenesisBridgeInfo)(nil), "dymensionxyz.dymension.rollapp.GenesisBridgeInfo")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/rollapp/genesis_bridge_data.proto", fileDescriptor_3b325fcde35853ba)
}

var fileDescriptor_3b325fcde35853ba = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0x52, 0x21, 0xd5, 0x4d, 0xf9, 0x63, 0x71, 0x88, 0x2a, 0xe1, 0xa2, 0x22, 0x21,
	0x7a, 0xc8, 0xae, 0x92, 0x80, 0xc4, 0x39, 0x54, 0x45, 0x3d, 0x80, 0xa2, 0x50, 0x2e, 0xbd, 0x98,
	0xdd, 0xf5, 0xc4, 0x59, 0xd9, 0xde, 0x5d, 0x79, 0x37, 0x56, 0xc2, 0x33, 0x70, 0xe0, 0xca, 0x1b,
	0xf5, 0xd8, 0x23, 0xe2, 0x50, 0xa1, 0xe4, 0x45, 0x90, 0xd7, 0xeb, 0x34, 0xad, 0x04, 0x39, 0xd9,
	0x33, 0x3b, 0xf3, 0xcd, 0x7c, 0x3f, 0x8d, 0xff, 0x2e, 0x5e, 0xe4, 0x20, 0x34, 0x97, 0x62, 0xbe,
	0xf8, 0x86, 0xd7, 0x01, 0x2e, 0x64, 0x96, 0x11, 0xa5, 0x70, 0x02, 0x02, 0x34, 0xd7, 0x11, 0x2d,
	0x78, 0x9c, 0x40, 0x14, 0x13, 0x43, 0x90, 0x2a, 0xa4, 0x91, 0x41, 0xb8, 0xd9, 0x89, 0xd6, 0x01,
	0x72, 0x9d, 0x87, 0xcf, 0x12, 0x99, 0x48, 0x5b, 0x8a, 0xab, 0xbf, 0xba, 0xeb, 0x30, 0x64, 0x52,
	0xe7, 0x52, 0x63, 0x4a, 0x44, 0x8a, 0xcb, 0x1e, 0x05, 0x43, 0x7a, 0x36, 0x70, 0xef, 0x27, 0x9c,
	0x32, 0x4c, 0x94, 0xca, 0x38, 0x23, 0x86, 0x4b, 0xa1, 0xb1, 0x29, 0x88, 0xd0, 0x13, 0x28, 0x70,
	0xd9, 0xc7, 0x8a, 0xb0, 0x14, 0x8c, 0x2b, 0xed, 0x6e, 0x59, 0x3d, 0x07, 0x43, 0x6e, 0xf7, 0x3d,
	0xfe, 0xb9, 0xe3, 0x3f, 0xfd, 0x50, 0xbb, 0x19, 0x5a, 0x33, 0xa7, 0xc4, 0x90, 0xe0, 0xd2, 0x6f,
	0x37, 0x16, 0xb9, 0x98, 0xc8, 0x8e, 0xf7, 0xc2, 0x7b, 0xbd, 0xdf, 0xef, 0xa1, 0xff, 0x9b, 0x43,
	0x77, 0x84, 0xce, 0xc5, 0x44, 0x0e, 0x77, 0xaf, 0x6e, 0x8e, 0x5a, 0xe3, 0x7d, 0x27, 0x56, 0xa5,
	0x82, 0x33, 0xbf, 0x2d, 0x88, 0xe1, 0x25, 0x44, 0x31, 0x08, 0x99, 0x77, 0x76, 0xac, 0xf6, 0x73,
	0x54, 0x23, 0x40, 0xd6, 0xb5, 0x43, 0x80, 0x3e, 0xba, 0x65, 0x1b, 0x9d, 0xba, 0xf1, 0xb4, 0xea,
	0x0b, 0xbe, 0xfa, 0x4f, 0x9a, 0x1d, 0x1b, 0x18, 0x9d, 0x07, 0x56, 0xeb, 0x2d, 0xe2, 0x94, 0xa1,
	0x4d, 0x5c, 0xa8, 0xa9, 0x40, 0x65, 0x1f, 0x9d, 0xcd, 0x44, 0xc2, 0x69, 0x06, 0x17, 0x32, 0x05,
	0x31, 0xb2, 0xec, 0x2a, 0xd3, 0xe3, 0xc7, 0x4e, 0xee, 0xc2, 0xd5, 0x1e, 0x7f, 0xbf, 0xcf, 0xc6,
	0xee, 0x7f, 0x72, 0x3b, 0x97, 0x4d, 0x81, 0xa5, 0x7a, 0x96, 0x5b, 0x3e, 0x7b, 0x6b, 0x81, 0xf7,
	0x2e, 0x1d, 0xbc, 0xf4, 0x0f, 0x28, 0xb0, 0xe9, 0xa0, 0x1f, 0xa9, 0x02, 0x26, 0x7c, 0x6e, 0xbd,
	0xee, 0x8d, 0xdb, 0x75, 0x72, 0x64, 0x73, 0xc1, 0xe8, 0x1e, 0x8f, 0xda, 0x43, 0x77, 0x1b, 0x6b,
	0x0b, 0xa1, 0xe1, 0x73, 0x97, 0xcc, 0x17, 0xff, 0x11, 0x17, 0xdc, 0x70, 0x92, 0x45, 0x7a, 0xa6,
	0x54, 0xb6, 0xe8, 0xec, 0x56, 0x73, 0x87, 0xa8, 0x82, 0xf8, 0xfb, 0xe6, 0xe8, 0x55, 0xc2, 0xcd,
	0x74, 0x46, 0x11, 0x93, 0x39, 0x76, 0x87, 0x57, 0x7f, 0xba, 0x3a, 0x4e, 0xb1, 0x59, 0x28, 0xd0,
	0xe8, 0x5c, 0x98, 0xf1, 0x81, 0x53, 0xf9, 0x6c, 0x45, 0x86, 0x9f, 0xae, 0x96, 0xa1, 0x77, 0xbd,
	0x0c, 0xbd, 0x3f, 0xcb, 0xd0, 0xfb, 0xb1, 0x0a, 0x5b, 0xd7, 0xab, 0xb0, 0xf5, 0x6b, 0x15, 0xb6,
	0x2e, 0xdf, 0x6c, 0x08, 0xfe, 0xe3, 0xfc, 0xca, 0x01, 0x9e, 0xaf, 0x6f, 0xd0, 0x8e, 0xa0, 0x0f,
	0xed, 0x05, 0x0e, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x24, 0x51, 0x91, 0x7d, 0x6d, 0x03, 0x00,
	0x00,
}

func (m *GenesisBridgeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisBridgeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisBridgeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GenesisTransfer != nil {
		{
			size, err := m.GenesisTransfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesisBridgeData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.NativeDenom.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesisBridgeData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.GenesisInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesisBridgeData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisBridgeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisBridgeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisBridgeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InitialSupply.Size()
		i -= size
		if _, err := m.InitialSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesisBridgeData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.NativeDenom != nil {
		{
			size, err := m.NativeDenom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesisBridgeData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bech32Prefix) > 0 {
		i -= len(m.Bech32Prefix)
		copy(dAtA[i:], m.Bech32Prefix)
		i = encodeVarintGenesisBridgeData(dAtA, i, uint64(len(m.Bech32Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GenesisChecksum) > 0 {
		i -= len(m.GenesisChecksum)
		copy(dAtA[i:], m.GenesisChecksum)
		i = encodeVarintGenesisBridgeData(dAtA, i, uint64(len(m.GenesisChecksum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesisBridgeData(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesisBridgeData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisBridgeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GenesisInfo.Size()
	n += 1 + l + sovGenesisBridgeData(uint64(l))
	l = m.NativeDenom.Size()
	n += 1 + l + sovGenesisBridgeData(uint64(l))
	if m.GenesisTransfer != nil {
		l = m.GenesisTransfer.Size()
		n += 1 + l + sovGenesisBridgeData(uint64(l))
	}
	return n
}

func (m *GenesisBridgeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GenesisChecksum)
	if l > 0 {
		n += 1 + l + sovGenesisBridgeData(uint64(l))
	}
	l = len(m.Bech32Prefix)
	if l > 0 {
		n += 1 + l + sovGenesisBridgeData(uint64(l))
	}
	if m.NativeDenom != nil {
		l = m.NativeDenom.Size()
		n += 1 + l + sovGenesisBridgeData(uint64(l))
	}
	l = m.InitialSupply.Size()
	n += 1 + l + sovGenesisBridgeData(uint64(l))
	return n
}

func sovGenesisBridgeData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesisBridgeData(x uint64) (n int) {
	return sovGenesisBridgeData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisBridgeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesisBridgeData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisBridgeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisBridgeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenesisInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeDenom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GenesisTransfer == nil {
				m.GenesisTransfer = &types1.FungibleTokenPacketData{}
			}
			if err := m.GenesisTransfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesisBridgeData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisBridgeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesisBridgeData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisBridgeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisBridgeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeDenom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NativeDenom == nil {
				m.NativeDenom = &DenomMetadata{}
			}
			if err := m.NativeDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesisBridgeData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesisBridgeData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesisBridgeData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesisBridgeData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesisBridgeData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesisBridgeData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesisBridgeData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesisBridgeData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesisBridgeData = fmt.Errorf("proto: unexpected end of group")
)
