// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/rollapp/fraud_proposal.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRollappFraudProposal struct {
	// Authority is the authority address.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// RollappID is the rollapp id.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// The height of the fraudulent block
	FraudHeight uint64 `protobuf:"varint,4,opt,name=fraud_height,json=fraudHeight,proto3" json:"fraud_height,omitempty"`
	// Revision of fraudulent block
	FraudRevision uint64 `protobuf:"varint,3,opt,name=fraud_revision,json=fraudRevision,proto3" json:"fraud_revision,omitempty"`
	// sequencer address to punish. optional
	PunishSequencerAddress string `protobuf:"bytes,6,opt,name=punish_sequencer_address,json=punishSequencerAddress,proto3" json:"punish_sequencer_address,omitempty"`
	// rewardAddr is bech32 for sdk acc addr
	Rewardee string `protobuf:"bytes,7,opt,name=rewardee,proto3" json:"rewardee,omitempty"`
}

func (m *MsgRollappFraudProposal) Reset()         { *m = MsgRollappFraudProposal{} }
func (m *MsgRollappFraudProposal) String() string { return proto.CompactTextString(m) }
func (*MsgRollappFraudProposal) ProtoMessage()    {}
func (*MsgRollappFraudProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_120f0332aea0a45b, []int{0}
}
func (m *MsgRollappFraudProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRollappFraudProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRollappFraudProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRollappFraudProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRollappFraudProposal.Merge(m, src)
}
func (m *MsgRollappFraudProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgRollappFraudProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRollappFraudProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRollappFraudProposal proto.InternalMessageInfo

func (m *MsgRollappFraudProposal) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRollappFraudProposal) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *MsgRollappFraudProposal) GetFraudHeight() uint64 {
	if m != nil {
		return m.FraudHeight
	}
	return 0
}

func (m *MsgRollappFraudProposal) GetFraudRevision() uint64 {
	if m != nil {
		return m.FraudRevision
	}
	return 0
}

func (m *MsgRollappFraudProposal) GetPunishSequencerAddress() string {
	if m != nil {
		return m.PunishSequencerAddress
	}
	return ""
}

func (m *MsgRollappFraudProposal) GetRewardee() string {
	if m != nil {
		return m.Rewardee
	}
	return ""
}

type MsgRollappFraudProposalResponse struct {
}

func (m *MsgRollappFraudProposalResponse) Reset()         { *m = MsgRollappFraudProposalResponse{} }
func (m *MsgRollappFraudProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRollappFraudProposalResponse) ProtoMessage()    {}
func (*MsgRollappFraudProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_120f0332aea0a45b, []int{1}
}
func (m *MsgRollappFraudProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRollappFraudProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRollappFraudProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRollappFraudProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRollappFraudProposalResponse.Merge(m, src)
}
func (m *MsgRollappFraudProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRollappFraudProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRollappFraudProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRollappFraudProposalResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRollappFraudProposal)(nil), "dymensionxyz.dymension.rollapp.MsgRollappFraudProposal")
	proto.RegisterType((*MsgRollappFraudProposalResponse)(nil), "dymensionxyz.dymension.rollapp.MsgRollappFraudProposalResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/rollapp/fraud_proposal.proto", fileDescriptor_120f0332aea0a45b)
}

var fileDescriptor_120f0332aea0a45b = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xbf, 0x6e, 0xda, 0x40,
	0x18, 0xe7, 0x28, 0xa2, 0xe5, 0x68, 0x19, 0x4e, 0x55, 0xb1, 0xac, 0xd6, 0x05, 0xa4, 0x4a, 0xa8,
	0x83, 0x4f, 0x2d, 0x95, 0x5a, 0x75, 0xa9, 0x9a, 0x21, 0x4a, 0x06, 0xa2, 0xc8, 0x6c, 0x59, 0x2c,
	0x83, 0x2f, 0xf6, 0x49, 0xd8, 0x77, 0xb9, 0xb3, 0x09, 0xce, 0x98, 0x21, 0x63, 0x94, 0x27, 0xc8,
	0x33, 0xe4, 0x31, 0x32, 0x32, 0x66, 0x8c, 0x60, 0xc8, 0x6b, 0x44, 0xbe, 0x33, 0x86, 0x85, 0x0c,
	0x99, 0xee, 0xbe, 0xdf, 0x1f, 0xfd, 0xbe, 0xef, 0xee, 0x83, 0x03, 0x3f, 0x8b, 0x48, 0x2c, 0x29,
	0x8b, 0xe7, 0xd9, 0x05, 0x2e, 0x0b, 0x2c, 0xd8, 0x74, 0xea, 0x71, 0x8e, 0x4f, 0x85, 0x97, 0xfa,
	0x2e, 0x17, 0x8c, 0x33, 0xe9, 0x4d, 0x6d, 0x2e, 0x58, 0xc2, 0x90, 0xb5, 0x6d, 0xb2, 0xcb, 0xc2,
	0x2e, 0x4c, 0xe6, 0xc7, 0x80, 0x05, 0x4c, 0x49, 0x71, 0x7e, 0xd3, 0x2e, 0xb3, 0x3d, 0x61, 0x32,
	0x62, 0x12, 0x47, 0x32, 0xc0, 0xb3, 0x1f, 0xf9, 0xa1, 0x89, 0xde, 0x55, 0x15, 0xb6, 0x87, 0x32,
	0x70, 0xb4, 0x7b, 0x3f, 0x4f, 0x3c, 0x2e, 0x02, 0xd1, 0x67, 0xd8, 0xf0, 0xd2, 0x24, 0x64, 0x82,
	0x26, 0x99, 0x01, 0x3a, 0xa0, 0xdf, 0x70, 0x36, 0x00, 0xfa, 0x02, 0x61, 0x91, 0xe9, 0x52, 0xdf,
	0xa8, 0x6a, 0xba, 0x40, 0x0e, 0x7d, 0xd4, 0x85, 0xef, 0x75, 0xff, 0x21, 0xa1, 0x41, 0x98, 0x18,
	0xb5, 0x0e, 0xe8, 0xd7, 0x9c, 0xa6, 0xc2, 0x0e, 0x14, 0x84, 0xbe, 0xc1, 0x96, 0x96, 0x08, 0x32,
	0xa3, 0xf9, 0x10, 0xc6, 0x1b, 0x25, 0xfa, 0xa0, 0x50, 0xa7, 0x00, 0xd1, 0x1f, 0x68, 0xf0, 0x34,
	0xa6, 0x32, 0x74, 0x25, 0x39, 0x4b, 0x49, 0x3c, 0x21, 0xc2, 0xf5, 0x7c, 0x5f, 0x10, 0x29, 0x8d,
	0xba, 0x8a, 0xfd, 0xa4, 0xf9, 0xd1, 0x9a, 0xfe, 0xaf, 0x59, 0x64, 0xc2, 0x77, 0x82, 0x9c, 0x7b,
	0xc2, 0x27, 0xc4, 0x78, 0xab, 0x94, 0x65, 0xfd, 0xb7, 0x75, 0xf9, 0x74, 0xf7, 0x7d, 0x33, 0x4e,
	0xaf, 0x0b, 0xbf, 0xee, 0x78, 0x07, 0x87, 0x48, 0xce, 0x62, 0x49, 0x7e, 0xde, 0x02, 0xd8, 0x5c,
	0x83, 0x43, 0x19, 0xa0, 0x6b, 0x00, 0xd1, 0x28, 0x1d, 0x47, 0x34, 0xd9, 0xb6, 0xa1, 0xdf, 0xf6,
	0xcb, 0x5f, 0x64, 0xef, 0xc8, 0x31, 0xff, 0xbd, 0xd2, 0xb8, 0x6e, 0x70, 0xef, 0xe8, 0x7e, 0x69,
	0x81, 0xc5, 0xd2, 0x02, 0x8f, 0x4b, 0x0b, 0xdc, 0xac, 0xac, 0xca, 0x62, 0x65, 0x55, 0x1e, 0x56,
	0x56, 0xe5, 0xe4, 0x57, 0x40, 0x93, 0x30, 0x1d, 0xdb, 0x13, 0x16, 0xe1, 0x1d, 0x5b, 0x37, 0x1b,
	0xe0, 0x79, 0xb9, 0x7a, 0x49, 0xc6, 0x89, 0x1c, 0xd7, 0xd5, 0x8e, 0x0c, 0x9e, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x07, 0xa4, 0x45, 0x37, 0xa9, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProposalMsgClient is the client API for ProposalMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProposalMsgClient interface {
	SubmitRollappFraud(ctx context.Context, in *MsgRollappFraudProposal, opts ...grpc.CallOption) (*MsgRollappFraudProposalResponse, error)
}

type proposalMsgClient struct {
	cc grpc1.ClientConn
}

func NewProposalMsgClient(cc grpc1.ClientConn) ProposalMsgClient {
	return &proposalMsgClient{cc}
}

func (c *proposalMsgClient) SubmitRollappFraud(ctx context.Context, in *MsgRollappFraudProposal, opts ...grpc.CallOption) (*MsgRollappFraudProposalResponse, error) {
	out := new(MsgRollappFraudProposalResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.rollapp.ProposalMsg/SubmitRollappFraud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProposalMsgServer is the server API for ProposalMsg service.
type ProposalMsgServer interface {
	SubmitRollappFraud(context.Context, *MsgRollappFraudProposal) (*MsgRollappFraudProposalResponse, error)
}

// UnimplementedProposalMsgServer can be embedded to have forward compatible implementations.
type UnimplementedProposalMsgServer struct {
}

func (*UnimplementedProposalMsgServer) SubmitRollappFraud(ctx context.Context, req *MsgRollappFraudProposal) (*MsgRollappFraudProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRollappFraud not implemented")
}

func RegisterProposalMsgServer(s grpc1.Server, srv ProposalMsgServer) {
	s.RegisterService(&_ProposalMsg_serviceDesc, srv)
}

func _ProposalMsg_SubmitRollappFraud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRollappFraudProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalMsgServer).SubmitRollappFraud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.rollapp.ProposalMsg/SubmitRollappFraud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalMsgServer).SubmitRollappFraud(ctx, req.(*MsgRollappFraudProposal))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProposalMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.rollapp.ProposalMsg",
	HandlerType: (*ProposalMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitRollappFraud",
			Handler:    _ProposalMsg_SubmitRollappFraud_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/rollapp/fraud_proposal.proto",
}

func (m *MsgRollappFraudProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRollappFraudProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRollappFraudProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewardee) > 0 {
		i -= len(m.Rewardee)
		copy(dAtA[i:], m.Rewardee)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.Rewardee)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PunishSequencerAddress) > 0 {
		i -= len(m.PunishSequencerAddress)
		copy(dAtA[i:], m.PunishSequencerAddress)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.PunishSequencerAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.FraudHeight != 0 {
		i = encodeVarintFraudProposal(dAtA, i, uint64(m.FraudHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.FraudRevision != 0 {
		i = encodeVarintFraudProposal(dAtA, i, uint64(m.FraudRevision))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRollappFraudProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRollappFraudProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRollappFraudProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintFraudProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovFraudProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRollappFraudProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	if m.FraudRevision != 0 {
		n += 1 + sovFraudProposal(uint64(m.FraudRevision))
	}
	if m.FraudHeight != 0 {
		n += 1 + sovFraudProposal(uint64(m.FraudHeight))
	}
	l = len(m.PunishSequencerAddress)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	l = len(m.Rewardee)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	return n
}

func (m *MsgRollappFraudProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovFraudProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFraudProposal(x uint64) (n int) {
	return sovFraudProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRollappFraudProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFraudProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRollappFraudProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRollappFraudProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudRevision", wireType)
			}
			m.FraudRevision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FraudRevision |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudHeight", wireType)
			}
			m.FraudHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FraudHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PunishSequencerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PunishSequencerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewardee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewardee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFraudProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRollappFraudProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFraudProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRollappFraudProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRollappFraudProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFraudProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFraudProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFraudProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFraudProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFraudProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFraudProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFraudProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFraudProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFraudProposal = fmt.Errorf("proto: unexpected end of group")
)
