// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/rollapp/fraud_proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubmitFraudProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The rollapp id
	RollappId string `protobuf:"bytes,3,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// The ibc client id of the rollapp
	IbcClientId string `protobuf:"bytes,4,opt,name=ibc_client_id,json=ibcClientId,proto3" json:"ibc_client_id,omitempty"`
	// The height of the fraudelent block
	FraudelentHeight uint64 `protobuf:"varint,5,opt,name=fraudelent_height,json=fraudelentHeight,proto3" json:"fraudelent_height,omitempty"`
	// The address of the fraudelent sequencer
	FraudelentSequencerAddress string `protobuf:"bytes,6,opt,name=fraudelent_sequencer_address,json=fraudelentSequencerAddress,proto3" json:"fraudelent_sequencer_address,omitempty"`
}

func (m *SubmitFraudProposal) Reset()      { *m = SubmitFraudProposal{} }
func (*SubmitFraudProposal) ProtoMessage() {}
func (*SubmitFraudProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_120f0332aea0a45b, []int{0}
}
func (m *SubmitFraudProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitFraudProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitFraudProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitFraudProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitFraudProposal.Merge(m, src)
}
func (m *SubmitFraudProposal) XXX_Size() int {
	return m.Size()
}
func (m *SubmitFraudProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitFraudProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitFraudProposal proto.InternalMessageInfo

type MsgRollappFraudProposal struct {
	// Authority is the authority address.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// RollappID is the rollapp id.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// rollapp revision. used to verify the rollapp revision is the same as the one in the fraud proposal
	RollappRevision uint64 `protobuf:"varint,3,opt,name=rollapp_revision,json=rollappRevision,proto3" json:"rollapp_revision,omitempty"`
	// The height of the fraudelent block
	FraudHeight uint64 `protobuf:"varint,4,opt,name=fraud_height,json=fraudHeight,proto3" json:"fraud_height,omitempty"`
	// hard fork required?
	HardFork bool `protobuf:"varint,5,opt,name=hard_fork,json=hardFork,proto3" json:"hard_fork,omitempty"`
	// sequencer address to jail. optional
	SlashSequencerAddress string `protobuf:"bytes,6,opt,name=slash_sequencer_address,json=slashSequencerAddress,proto3" json:"slash_sequencer_address,omitempty"`
}

func (m *MsgRollappFraudProposal) Reset()         { *m = MsgRollappFraudProposal{} }
func (m *MsgRollappFraudProposal) String() string { return proto.CompactTextString(m) }
func (*MsgRollappFraudProposal) ProtoMessage()    {}
func (*MsgRollappFraudProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_120f0332aea0a45b, []int{1}
}
func (m *MsgRollappFraudProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRollappFraudProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRollappFraudProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRollappFraudProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRollappFraudProposal.Merge(m, src)
}
func (m *MsgRollappFraudProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgRollappFraudProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRollappFraudProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRollappFraudProposal proto.InternalMessageInfo

func (m *MsgRollappFraudProposal) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRollappFraudProposal) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *MsgRollappFraudProposal) GetRollappRevision() uint64 {
	if m != nil {
		return m.RollappRevision
	}
	return 0
}

func (m *MsgRollappFraudProposal) GetFraudHeight() uint64 {
	if m != nil {
		return m.FraudHeight
	}
	return 0
}

func (m *MsgRollappFraudProposal) GetHardFork() bool {
	if m != nil {
		return m.HardFork
	}
	return false
}

func (m *MsgRollappFraudProposal) GetSlashSequencerAddress() string {
	if m != nil {
		return m.SlashSequencerAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*SubmitFraudProposal)(nil), "dymensionxyz.dymension.rollapp.SubmitFraudProposal")
	proto.RegisterType((*MsgRollappFraudProposal)(nil), "dymensionxyz.dymension.rollapp.MsgRollappFraudProposal")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/rollapp/fraud_proposal.proto", fileDescriptor_120f0332aea0a45b)
}

var fileDescriptor_120f0332aea0a45b = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xbf, 0x6f, 0xd4, 0x30,
	0x18, 0x4d, 0x8e, 0xb4, 0x6a, 0xdc, 0x02, 0xc5, 0x14, 0x5d, 0x74, 0x94, 0xdc, 0x71, 0x53, 0x01,
	0x29, 0x16, 0x3a, 0xc4, 0xc0, 0xc4, 0x0f, 0xa9, 0xa2, 0x03, 0x08, 0xa5, 0x1b, 0x4b, 0x94, 0xc4,
	0x6e, 0x62, 0x35, 0x89, 0x83, 0xed, 0x9c, 0x1a, 0x46, 0x26, 0x18, 0x90, 0x18, 0x19, 0xef, 0x4f,
	0xe0, 0xcf, 0x60, 0xec, 0xc8, 0x88, 0xee, 0x06, 0xf8, 0x33, 0x50, 0x1c, 0xf7, 0x72, 0xb4, 0xba,
	0x29, 0xf9, 0xde, 0x7b, 0x9f, 0xed, 0xf7, 0xbe, 0x0f, 0x4c, 0x70, 0x9d, 0x93, 0x42, 0x50, 0x56,
	0x9c, 0xd5, 0x1f, 0xd1, 0xb2, 0x40, 0x9c, 0x65, 0x59, 0x58, 0x96, 0xe8, 0x84, 0x87, 0x15, 0x0e,
	0x4a, 0xce, 0x4a, 0x26, 0xc2, 0xcc, 0x2b, 0x39, 0x93, 0x0c, 0xba, 0xab, 0x4d, 0xde, 0xb2, 0xf0,
	0x74, 0xd3, 0x60, 0x2f, 0x61, 0x09, 0x53, 0x52, 0xd4, 0xfc, 0xb5, 0x5d, 0x83, 0x7e, 0xcc, 0x44,
	0xce, 0x04, 0xca, 0x45, 0x82, 0xa6, 0x8f, 0x9b, 0x4f, 0x4b, 0x8c, 0xbf, 0xf6, 0xc0, 0xed, 0xe3,
	0x2a, 0xca, 0xa9, 0x3c, 0x6c, 0x6e, 0x7b, 0xa7, 0x2f, 0x83, 0x7b, 0x60, 0x43, 0x52, 0x99, 0x11,
	0xc7, 0x1c, 0x99, 0x07, 0xb6, 0xdf, 0x16, 0x70, 0x04, 0xb6, 0x31, 0x11, 0x31, 0xa7, 0xa5, 0xa4,
	0xac, 0x70, 0x7a, 0x8a, 0x5b, 0x85, 0xe0, 0x3d, 0x00, 0xf4, 0x4b, 0x02, 0x8a, 0x9d, 0x6b, 0x4a,
	0x60, 0x6b, 0xe4, 0x08, 0xc3, 0x31, 0xb8, 0x4e, 0xa3, 0x38, 0x88, 0x33, 0x4a, 0x0a, 0xd9, 0x28,
	0xac, 0xf6, 0x08, 0x1a, 0xc5, 0xaf, 0x14, 0x76, 0x84, 0xe1, 0x23, 0x70, 0x4b, 0x39, 0x27, 0x59,
	0xa3, 0x49, 0x09, 0x4d, 0x52, 0xe9, 0x6c, 0x8c, 0xcc, 0x03, 0xcb, 0xdf, 0xed, 0x88, 0xd7, 0x0a,
	0x87, 0xcf, 0xc1, 0xfe, 0x8a, 0x58, 0x90, 0x0f, 0x15, 0x29, 0x62, 0xc2, 0x83, 0x10, 0x63, 0x4e,
	0x84, 0x70, 0x36, 0xd5, 0xf9, 0x83, 0x4e, 0x73, 0x7c, 0x21, 0x79, 0xd1, 0x2a, 0x9e, 0xed, 0x7c,
	0x9e, 0x0d, 0x8d, 0xef, 0xb3, 0xa1, 0xf1, 0x77, 0x36, 0x34, 0xc7, 0x5f, 0x7a, 0xa0, 0xff, 0x46,
	0x24, 0x7e, 0xfb, 0xe2, 0xff, 0x33, 0xd9, 0x07, 0x76, 0x58, 0xc9, 0x94, 0x71, 0x2a, 0x6b, 0x9d,
	0x4b, 0x07, 0x5c, 0x72, 0xde, 0xbb, 0xec, 0xfc, 0x01, 0xd8, 0xbd, 0xa0, 0x39, 0x99, 0xd2, 0x66,
	0x66, 0x2a, 0x1e, 0xcb, 0xbf, 0xa9, 0x71, 0x5f, 0xc3, 0xf0, 0x3e, 0xd8, 0x69, 0x47, 0xaf, 0xbd,
	0x5b, 0x4a, 0xb6, 0xad, 0x30, 0x6d, 0xfb, 0x2e, 0xb0, 0xd3, 0x90, 0xe3, 0xe0, 0x84, 0xf1, 0x53,
	0x95, 0xcd, 0x96, 0xbf, 0xd5, 0x00, 0x87, 0x8c, 0x9f, 0xc2, 0xa7, 0xa0, 0x2f, 0xb2, 0x50, 0xa4,
	0x6b, 0xe3, 0xb8, 0xa3, 0xe8, 0x2b, 0x49, 0xdc, 0xf8, 0xf4, 0xe7, 0xc7, 0xc3, 0xce, 0xd1, 0xcb,
	0xb7, 0x3f, 0xe7, 0xae, 0x79, 0x3e, 0x77, 0xcd, 0xdf, 0x73, 0xd7, 0xfc, 0xb6, 0x70, 0x8d, 0xf3,
	0x85, 0x6b, 0xfc, 0x5a, 0xb8, 0xc6, 0xfb, 0x27, 0x09, 0x95, 0x69, 0x15, 0x79, 0x31, 0xcb, 0xd1,
	0x9a, 0x25, 0x9e, 0x4e, 0xd0, 0xd9, 0x72, 0x93, 0x65, 0x5d, 0x12, 0x11, 0x6d, 0xaa, 0x95, 0x9b,
	0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x65, 0xc5, 0xed, 0xf8, 0x02, 0x00, 0x00,
}

func (this *SubmitFraudProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitFraudProposal)
	if !ok {
		that2, ok := that.(SubmitFraudProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.RollappId != that1.RollappId {
		return false
	}
	if this.IbcClientId != that1.IbcClientId {
		return false
	}
	if this.FraudelentHeight != that1.FraudelentHeight {
		return false
	}
	if this.FraudelentSequencerAddress != that1.FraudelentSequencerAddress {
		return false
	}
	return true
}
func (m *SubmitFraudProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitFraudProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitFraudProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FraudelentSequencerAddress) > 0 {
		i -= len(m.FraudelentSequencerAddress)
		copy(dAtA[i:], m.FraudelentSequencerAddress)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.FraudelentSequencerAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.FraudelentHeight != 0 {
		i = encodeVarintFraudProposal(dAtA, i, uint64(m.FraudelentHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.IbcClientId) > 0 {
		i -= len(m.IbcClientId)
		copy(dAtA[i:], m.IbcClientId)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.IbcClientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRollappFraudProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRollappFraudProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRollappFraudProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlashSequencerAddress) > 0 {
		i -= len(m.SlashSequencerAddress)
		copy(dAtA[i:], m.SlashSequencerAddress)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.SlashSequencerAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.HardFork {
		i--
		if m.HardFork {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.FraudHeight != 0 {
		i = encodeVarintFraudProposal(dAtA, i, uint64(m.FraudHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.RollappRevision != 0 {
		i = encodeVarintFraudProposal(dAtA, i, uint64(m.RollappRevision))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintFraudProposal(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFraudProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovFraudProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubmitFraudProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	l = len(m.IbcClientId)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	if m.FraudelentHeight != 0 {
		n += 1 + sovFraudProposal(uint64(m.FraudelentHeight))
	}
	l = len(m.FraudelentSequencerAddress)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	return n
}

func (m *MsgRollappFraudProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	if m.RollappRevision != 0 {
		n += 1 + sovFraudProposal(uint64(m.RollappRevision))
	}
	if m.FraudHeight != 0 {
		n += 1 + sovFraudProposal(uint64(m.FraudHeight))
	}
	if m.HardFork {
		n += 2
	}
	l = len(m.SlashSequencerAddress)
	if l > 0 {
		n += 1 + l + sovFraudProposal(uint64(l))
	}
	return n
}

func sovFraudProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFraudProposal(x uint64) (n int) {
	return sovFraudProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubmitFraudProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFraudProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitFraudProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitFraudProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudelentHeight", wireType)
			}
			m.FraudelentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FraudelentHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudelentSequencerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FraudelentSequencerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFraudProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRollappFraudProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFraudProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRollappFraudProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRollappFraudProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappRevision", wireType)
			}
			m.RollappRevision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RollappRevision |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudHeight", wireType)
			}
			m.FraudHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FraudHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardFork", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HardFork = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashSequencerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFraudProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashSequencerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFraudProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFraudProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFraudProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFraudProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFraudProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFraudProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFraudProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFraudProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFraudProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFraudProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFraudProposal = fmt.Errorf("proto: unexpected end of group")
)
