// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/rollapp/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetRollappRequest struct {
	RollappId string `protobuf:"bytes,1,opt,name=rollappId,proto3" json:"rollappId,omitempty"`
	// omit_apps is an optional flag to omit the list of apps in the response
	OmitApps bool `protobuf:"varint,2,opt,name=omit_apps,json=omitApps,proto3" json:"omit_apps,omitempty"`
}

func (m *QueryGetRollappRequest) Reset()         { *m = QueryGetRollappRequest{} }
func (m *QueryGetRollappRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRollappRequest) ProtoMessage()    {}
func (*QueryGetRollappRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{2}
}
func (m *QueryGetRollappRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRollappRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRollappRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRollappRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRollappRequest.Merge(m, src)
}
func (m *QueryGetRollappRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRollappRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRollappRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRollappRequest proto.InternalMessageInfo

func (m *QueryGetRollappRequest) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *QueryGetRollappRequest) GetOmitApps() bool {
	if m != nil {
		return m.OmitApps
	}
	return false
}

type QueryGetRollappByEIP155Request struct {
	Eip155 uint64 `protobuf:"varint,1,opt,name=eip155,proto3" json:"eip155,omitempty"`
	// omit_apps is an optional flag to omit the list of apps in the response
	OmitApps bool `protobuf:"varint,2,opt,name=omit_apps,json=omitApps,proto3" json:"omit_apps,omitempty"`
}

func (m *QueryGetRollappByEIP155Request) Reset()         { *m = QueryGetRollappByEIP155Request{} }
func (m *QueryGetRollappByEIP155Request) String() string { return proto.CompactTextString(m) }
func (*QueryGetRollappByEIP155Request) ProtoMessage()    {}
func (*QueryGetRollappByEIP155Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{3}
}
func (m *QueryGetRollappByEIP155Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRollappByEIP155Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRollappByEIP155Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRollappByEIP155Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRollappByEIP155Request.Merge(m, src)
}
func (m *QueryGetRollappByEIP155Request) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRollappByEIP155Request) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRollappByEIP155Request.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRollappByEIP155Request proto.InternalMessageInfo

func (m *QueryGetRollappByEIP155Request) GetEip155() uint64 {
	if m != nil {
		return m.Eip155
	}
	return 0
}

func (m *QueryGetRollappByEIP155Request) GetOmitApps() bool {
	if m != nil {
		return m.OmitApps
	}
	return false
}

type QueryGetLatestHeightRequest struct {
	RollappId string `protobuf:"bytes,1,opt,name=rollappId,proto3" json:"rollappId,omitempty"`
	Finalized bool   `protobuf:"varint,2,opt,name=finalized,proto3" json:"finalized,omitempty"`
}

func (m *QueryGetLatestHeightRequest) Reset()         { *m = QueryGetLatestHeightRequest{} }
func (m *QueryGetLatestHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestHeightRequest) ProtoMessage()    {}
func (*QueryGetLatestHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{4}
}
func (m *QueryGetLatestHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestHeightRequest.Merge(m, src)
}
func (m *QueryGetLatestHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestHeightRequest proto.InternalMessageInfo

func (m *QueryGetLatestHeightRequest) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *QueryGetLatestHeightRequest) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

type QueryGetLatestHeightResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryGetLatestHeightResponse) Reset()         { *m = QueryGetLatestHeightResponse{} }
func (m *QueryGetLatestHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestHeightResponse) ProtoMessage()    {}
func (*QueryGetLatestHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{5}
}
func (m *QueryGetLatestHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestHeightResponse.Merge(m, src)
}
func (m *QueryGetLatestHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestHeightResponse proto.InternalMessageInfo

func (m *QueryGetLatestHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryGetLatestStateIndexRequest struct {
	RollappId string `protobuf:"bytes,1,opt,name=rollappId,proto3" json:"rollappId,omitempty"`
	Finalized bool   `protobuf:"varint,2,opt,name=finalized,proto3" json:"finalized,omitempty"`
}

func (m *QueryGetLatestStateIndexRequest) Reset()         { *m = QueryGetLatestStateIndexRequest{} }
func (m *QueryGetLatestStateIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestStateIndexRequest) ProtoMessage()    {}
func (*QueryGetLatestStateIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{6}
}
func (m *QueryGetLatestStateIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestStateIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestStateIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestStateIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestStateIndexRequest.Merge(m, src)
}
func (m *QueryGetLatestStateIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestStateIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestStateIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestStateIndexRequest proto.InternalMessageInfo

func (m *QueryGetLatestStateIndexRequest) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *QueryGetLatestStateIndexRequest) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

type QueryGetLatestStateIndexResponse struct {
	StateIndex StateInfoIndex `protobuf:"bytes,1,opt,name=stateIndex,proto3" json:"stateIndex"`
}

func (m *QueryGetLatestStateIndexResponse) Reset()         { *m = QueryGetLatestStateIndexResponse{} }
func (m *QueryGetLatestStateIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestStateIndexResponse) ProtoMessage()    {}
func (*QueryGetLatestStateIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{7}
}
func (m *QueryGetLatestStateIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestStateIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestStateIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestStateIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestStateIndexResponse.Merge(m, src)
}
func (m *QueryGetLatestStateIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestStateIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestStateIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestStateIndexResponse proto.InternalMessageInfo

func (m *QueryGetLatestStateIndexResponse) GetStateIndex() StateInfoIndex {
	if m != nil {
		return m.StateIndex
	}
	return StateInfoIndex{}
}

type QueryGetRollappResponse struct {
	Rollapp Rollapp        `protobuf:"bytes,1,opt,name=rollapp,proto3" json:"rollapp"`
	Summary RollappSummary `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary"`
	// apps is the list of (lazy-loaded) apps in the rollapp
	Apps []*App `protobuf:"bytes,7,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (m *QueryGetRollappResponse) Reset()         { *m = QueryGetRollappResponse{} }
func (m *QueryGetRollappResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRollappResponse) ProtoMessage()    {}
func (*QueryGetRollappResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{8}
}
func (m *QueryGetRollappResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRollappResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRollappResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRollappResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRollappResponse.Merge(m, src)
}
func (m *QueryGetRollappResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRollappResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRollappResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRollappResponse proto.InternalMessageInfo

func (m *QueryGetRollappResponse) GetRollapp() Rollapp {
	if m != nil {
		return m.Rollapp
	}
	return Rollapp{}
}

func (m *QueryGetRollappResponse) GetSummary() RollappSummary {
	if m != nil {
		return m.Summary
	}
	return RollappSummary{}
}

func (m *QueryGetRollappResponse) GetApps() []*App {
	if m != nil {
		return m.Apps
	}
	return nil
}

type QueryAllRollappRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// omit_apps is an optional flag to omit the list of apps in the response
	OmitApps bool `protobuf:"varint,2,opt,name=omit_apps,json=omitApps,proto3" json:"omit_apps,omitempty"`
}

func (m *QueryAllRollappRequest) Reset()         { *m = QueryAllRollappRequest{} }
func (m *QueryAllRollappRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRollappRequest) ProtoMessage()    {}
func (*QueryAllRollappRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{9}
}
func (m *QueryAllRollappRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRollappRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRollappRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRollappRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRollappRequest.Merge(m, src)
}
func (m *QueryAllRollappRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRollappRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRollappRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRollappRequest proto.InternalMessageInfo

func (m *QueryAllRollappRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllRollappRequest) GetOmitApps() bool {
	if m != nil {
		return m.OmitApps
	}
	return false
}

type QueryAllRollappResponse struct {
	Rollapp    []QueryGetRollappResponse `protobuf:"bytes,3,rep,name=rollapp,proto3" json:"rollapp"`
	Pagination *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRollappResponse) Reset()         { *m = QueryAllRollappResponse{} }
func (m *QueryAllRollappResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRollappResponse) ProtoMessage()    {}
func (*QueryAllRollappResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{10}
}
func (m *QueryAllRollappResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRollappResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRollappResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRollappResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRollappResponse.Merge(m, src)
}
func (m *QueryAllRollappResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRollappResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRollappResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRollappResponse proto.InternalMessageInfo

func (m *QueryAllRollappResponse) GetRollapp() []QueryGetRollappResponse {
	if m != nil {
		return m.Rollapp
	}
	return nil
}

func (m *QueryAllRollappResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStateInfoRequest struct {
	RollappId string `protobuf:"bytes,1,opt,name=rollappId,proto3" json:"rollappId,omitempty"`
	Index     uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Height    uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Finalized bool   `protobuf:"varint,4,opt,name=finalized,proto3" json:"finalized,omitempty"`
}

func (m *QueryGetStateInfoRequest) Reset()         { *m = QueryGetStateInfoRequest{} }
func (m *QueryGetStateInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStateInfoRequest) ProtoMessage()    {}
func (*QueryGetStateInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{11}
}
func (m *QueryGetStateInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStateInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStateInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStateInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStateInfoRequest.Merge(m, src)
}
func (m *QueryGetStateInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStateInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStateInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStateInfoRequest proto.InternalMessageInfo

func (m *QueryGetStateInfoRequest) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *QueryGetStateInfoRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryGetStateInfoRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryGetStateInfoRequest) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

type QueryGetStateInfoResponse struct {
	StateInfo StateInfo `protobuf:"bytes,1,opt,name=stateInfo,proto3" json:"stateInfo"`
}

func (m *QueryGetStateInfoResponse) Reset()         { *m = QueryGetStateInfoResponse{} }
func (m *QueryGetStateInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStateInfoResponse) ProtoMessage()    {}
func (*QueryGetStateInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{12}
}
func (m *QueryGetStateInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStateInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStateInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStateInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStateInfoResponse.Merge(m, src)
}
func (m *QueryGetStateInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStateInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStateInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStateInfoResponse proto.InternalMessageInfo

func (m *QueryGetStateInfoResponse) GetStateInfo() StateInfo {
	if m != nil {
		return m.StateInfo
	}
	return StateInfo{}
}

type QueryRegisteredDenomsRequest struct {
	RollappId string `protobuf:"bytes,1,opt,name=rollappId,proto3" json:"rollappId,omitempty"`
}

func (m *QueryRegisteredDenomsRequest) Reset()         { *m = QueryRegisteredDenomsRequest{} }
func (m *QueryRegisteredDenomsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredDenomsRequest) ProtoMessage()    {}
func (*QueryRegisteredDenomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{13}
}
func (m *QueryRegisteredDenomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredDenomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredDenomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredDenomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredDenomsRequest.Merge(m, src)
}
func (m *QueryRegisteredDenomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredDenomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredDenomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredDenomsRequest proto.InternalMessageInfo

func (m *QueryRegisteredDenomsRequest) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

type QueryRegisteredDenomsResponse struct {
	Denoms []string `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *QueryRegisteredDenomsResponse) Reset()         { *m = QueryRegisteredDenomsResponse{} }
func (m *QueryRegisteredDenomsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredDenomsResponse) ProtoMessage()    {}
func (*QueryRegisteredDenomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{14}
}
func (m *QueryRegisteredDenomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredDenomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredDenomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredDenomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredDenomsResponse.Merge(m, src)
}
func (m *QueryRegisteredDenomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredDenomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredDenomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredDenomsResponse proto.InternalMessageInfo

func (m *QueryRegisteredDenomsResponse) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

type QueryObsoleteDRSVersionsRequest struct {
}

func (m *QueryObsoleteDRSVersionsRequest) Reset()         { *m = QueryObsoleteDRSVersionsRequest{} }
func (m *QueryObsoleteDRSVersionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryObsoleteDRSVersionsRequest) ProtoMessage()    {}
func (*QueryObsoleteDRSVersionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{15}
}
func (m *QueryObsoleteDRSVersionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObsoleteDRSVersionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObsoleteDRSVersionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObsoleteDRSVersionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObsoleteDRSVersionsRequest.Merge(m, src)
}
func (m *QueryObsoleteDRSVersionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryObsoleteDRSVersionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObsoleteDRSVersionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObsoleteDRSVersionsRequest proto.InternalMessageInfo

type QueryObsoleteDRSVersionsResponse struct {
	DrsVersions []uint32 `protobuf:"varint,1,rep,packed,name=drs_versions,json=drsVersions,proto3" json:"drs_versions,omitempty"`
}

func (m *QueryObsoleteDRSVersionsResponse) Reset()         { *m = QueryObsoleteDRSVersionsResponse{} }
func (m *QueryObsoleteDRSVersionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryObsoleteDRSVersionsResponse) ProtoMessage()    {}
func (*QueryObsoleteDRSVersionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{16}
}
func (m *QueryObsoleteDRSVersionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObsoleteDRSVersionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObsoleteDRSVersionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObsoleteDRSVersionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObsoleteDRSVersionsResponse.Merge(m, src)
}
func (m *QueryObsoleteDRSVersionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryObsoleteDRSVersionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObsoleteDRSVersionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObsoleteDRSVersionsResponse proto.InternalMessageInfo

func (m *QueryObsoleteDRSVersionsResponse) GetDrsVersions() []uint32 {
	if m != nil {
		return m.DrsVersions
	}
	return nil
}

type QueryValidateGenesisBridgeRequest struct {
	RollappId string            `protobuf:"bytes,1,opt,name=rollappId,proto3" json:"rollappId,omitempty"`
	Data      GenesisBridgeData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (m *QueryValidateGenesisBridgeRequest) Reset()         { *m = QueryValidateGenesisBridgeRequest{} }
func (m *QueryValidateGenesisBridgeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidateGenesisBridgeRequest) ProtoMessage()    {}
func (*QueryValidateGenesisBridgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{17}
}
func (m *QueryValidateGenesisBridgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateGenesisBridgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateGenesisBridgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateGenesisBridgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateGenesisBridgeRequest.Merge(m, src)
}
func (m *QueryValidateGenesisBridgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateGenesisBridgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateGenesisBridgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateGenesisBridgeRequest proto.InternalMessageInfo

func (m *QueryValidateGenesisBridgeRequest) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *QueryValidateGenesisBridgeRequest) GetData() GenesisBridgeData {
	if m != nil {
		return m.Data
	}
	return GenesisBridgeData{}
}

type QueryValidateGenesisBridgeResponse struct {
	Valid bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *QueryValidateGenesisBridgeResponse) Reset()         { *m = QueryValidateGenesisBridgeResponse{} }
func (m *QueryValidateGenesisBridgeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidateGenesisBridgeResponse) ProtoMessage()    {}
func (*QueryValidateGenesisBridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a0238fb38306fa, []int{18}
}
func (m *QueryValidateGenesisBridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateGenesisBridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateGenesisBridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateGenesisBridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateGenesisBridgeResponse.Merge(m, src)
}
func (m *QueryValidateGenesisBridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateGenesisBridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateGenesisBridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateGenesisBridgeResponse proto.InternalMessageInfo

func (m *QueryValidateGenesisBridgeResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *QueryValidateGenesisBridgeResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "dymensionxyz.dymension.rollapp.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dymensionxyz.dymension.rollapp.QueryParamsResponse")
	proto.RegisterType((*QueryGetRollappRequest)(nil), "dymensionxyz.dymension.rollapp.QueryGetRollappRequest")
	proto.RegisterType((*QueryGetRollappByEIP155Request)(nil), "dymensionxyz.dymension.rollapp.QueryGetRollappByEIP155Request")
	proto.RegisterType((*QueryGetLatestHeightRequest)(nil), "dymensionxyz.dymension.rollapp.QueryGetLatestHeightRequest")
	proto.RegisterType((*QueryGetLatestHeightResponse)(nil), "dymensionxyz.dymension.rollapp.QueryGetLatestHeightResponse")
	proto.RegisterType((*QueryGetLatestStateIndexRequest)(nil), "dymensionxyz.dymension.rollapp.QueryGetLatestStateIndexRequest")
	proto.RegisterType((*QueryGetLatestStateIndexResponse)(nil), "dymensionxyz.dymension.rollapp.QueryGetLatestStateIndexResponse")
	proto.RegisterType((*QueryGetRollappResponse)(nil), "dymensionxyz.dymension.rollapp.QueryGetRollappResponse")
	proto.RegisterType((*QueryAllRollappRequest)(nil), "dymensionxyz.dymension.rollapp.QueryAllRollappRequest")
	proto.RegisterType((*QueryAllRollappResponse)(nil), "dymensionxyz.dymension.rollapp.QueryAllRollappResponse")
	proto.RegisterType((*QueryGetStateInfoRequest)(nil), "dymensionxyz.dymension.rollapp.QueryGetStateInfoRequest")
	proto.RegisterType((*QueryGetStateInfoResponse)(nil), "dymensionxyz.dymension.rollapp.QueryGetStateInfoResponse")
	proto.RegisterType((*QueryRegisteredDenomsRequest)(nil), "dymensionxyz.dymension.rollapp.QueryRegisteredDenomsRequest")
	proto.RegisterType((*QueryRegisteredDenomsResponse)(nil), "dymensionxyz.dymension.rollapp.QueryRegisteredDenomsResponse")
	proto.RegisterType((*QueryObsoleteDRSVersionsRequest)(nil), "dymensionxyz.dymension.rollapp.QueryObsoleteDRSVersionsRequest")
	proto.RegisterType((*QueryObsoleteDRSVersionsResponse)(nil), "dymensionxyz.dymension.rollapp.QueryObsoleteDRSVersionsResponse")
	proto.RegisterType((*QueryValidateGenesisBridgeRequest)(nil), "dymensionxyz.dymension.rollapp.QueryValidateGenesisBridgeRequest")
	proto.RegisterType((*QueryValidateGenesisBridgeResponse)(nil), "dymensionxyz.dymension.rollapp.QueryValidateGenesisBridgeResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/rollapp/query.proto", fileDescriptor_00a0238fb38306fa)
}

var fileDescriptor_00a0238fb38306fa = []byte{
	// 1188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x38, 0xae, 0x13, 0xbf, 0x16, 0x35, 0x9a, 0x86, 0x10, 0xdc, 0xe0, 0x26, 0x8b, 0xd4,
	0xba, 0x05, 0x79, 0xe5, 0x04, 0x37, 0x8d, 0xd2, 0x94, 0x3a, 0x4a, 0x1b, 0x52, 0x4a, 0x09, 0x1b,
	0x28, 0x02, 0x84, 0xac, 0x75, 0x77, 0xb2, 0x59, 0xb4, 0xde, 0xdd, 0xee, 0x6c, 0xa2, 0xb8, 0x51,
	0x2e, 0x88, 0x33, 0x42, 0xe2, 0x5e, 0x89, 0x7f, 0x80, 0x2b, 0x67, 0xc4, 0x25, 0x42, 0x1c, 0x2a,
	0x71, 0x80, 0x0b, 0x08, 0x25, 0xfc, 0x0f, 0x5c, 0x91, 0x67, 0xde, 0xae, 0x7f, 0xc4, 0xf6, 0x6e,
	0x0c, 0xa7, 0x78, 0x26, 0xef, 0x7d, 0xf3, 0x7d, 0x33, 0xef, 0xd7, 0xc2, 0x0d, 0xa3, 0x51, 0x67,
	0x0e, 0xb7, 0x5c, 0x67, 0xbf, 0xf1, 0x4c, 0x8d, 0x16, 0xaa, 0xef, 0xda, 0xb6, 0xee, 0x79, 0xea,
	0xd3, 0x5d, 0xe6, 0x37, 0x8a, 0x9e, 0xef, 0x06, 0x2e, 0xcd, 0xb7, 0xdb, 0x16, 0xa3, 0x45, 0x11,
	0x6d, 0x73, 0x93, 0xa6, 0x6b, 0xba, 0xc2, 0x54, 0x6d, 0xfe, 0x92, 0x5e, 0xb9, 0x19, 0xd3, 0x75,
	0x4d, 0x9b, 0xa9, 0xba, 0x67, 0xa9, 0xba, 0xe3, 0xb8, 0x81, 0x1e, 0x58, 0xae, 0xc3, 0xf1, 0xbf,
	0x37, 0x9e, 0xb8, 0xbc, 0xee, 0x72, 0xb5, 0xa6, 0x73, 0x26, 0x0f, 0x53, 0xf7, 0x4a, 0x35, 0x16,
	0xe8, 0x25, 0xd5, 0xd3, 0x4d, 0xcb, 0x11, 0xc6, 0x68, 0xfb, 0x46, 0x0c, 0x57, 0x4f, 0xf7, 0xf5,
	0x7a, 0x08, 0xfc, 0x66, 0x8c, 0x31, 0xfe, 0x45, 0x6b, 0x35, 0xc6, 0x9a, 0x07, 0x7a, 0xc0, 0xaa,
	0x96, 0xb3, 0x1d, 0xaa, 0x2a, 0xc4, 0x38, 0xb4, 0xa0, 0x6f, 0xc5, 0x58, 0x9a, 0xcc, 0x61, 0xdc,
	0xe2, 0xd5, 0x9a, 0x6f, 0x19, 0x26, 0xab, 0x1a, 0x7a, 0xa0, 0x4b, 0x4f, 0x65, 0x12, 0xe8, 0x07,
	0xcd, 0x1b, 0xd9, 0x14, 0xba, 0x34, 0xf6, 0x74, 0x97, 0xf1, 0x40, 0xf9, 0x0c, 0x2e, 0x75, 0xec,
	0x72, 0xcf, 0x75, 0x38, 0xa3, 0x6b, 0x90, 0x91, 0xfa, 0xa7, 0xc9, 0x2c, 0x29, 0x9c, 0x9f, 0xbf,
	0x5a, 0x1c, 0xfc, 0x5a, 0x45, 0xe9, 0xbf, 0x9a, 0x3e, 0xfa, 0xf3, 0xca, 0x88, 0x86, 0xbe, 0xca,
	0x16, 0x4c, 0x09, 0xf0, 0x75, 0x16, 0x68, 0xd2, 0x0e, 0x8f, 0xa5, 0x33, 0x90, 0x45, 0xcf, 0x0d,
	0x43, 0x1c, 0x91, 0xd5, 0x5a, 0x1b, 0xf4, 0x32, 0x64, 0xdd, 0xba, 0x15, 0x54, 0x75, 0xcf, 0xe3,
	0xd3, 0xa9, 0x59, 0x52, 0x18, 0xd7, 0xc6, 0x9b, 0x1b, 0x15, 0xcf, 0xe3, 0xca, 0x47, 0x90, 0xef,
	0x02, 0x5d, 0x6d, 0xdc, 0xdb, 0xd8, 0x2c, 0x95, 0xcb, 0x21, 0xf8, 0x14, 0x64, 0x98, 0xe5, 0x95,
	0xca, 0x65, 0x81, 0x9c, 0xd6, 0x70, 0x35, 0x18, 0xf6, 0x13, 0xb8, 0x1c, 0xc2, 0x3e, 0xd4, 0x03,
	0xc6, 0x83, 0x77, 0x98, 0x65, 0xee, 0x04, 0xc9, 0x08, 0xcf, 0x40, 0x76, 0xdb, 0x72, 0x74, 0xdb,
	0x7a, 0xc6, 0x0c, 0x44, 0x6e, 0x6d, 0x28, 0x37, 0x61, 0xa6, 0x37, 0x34, 0x5e, 0xf6, 0x14, 0x64,
	0x76, 0xc4, 0x4e, 0xc8, 0x57, 0xae, 0x94, 0xcf, 0xe1, 0x4a, 0xa7, 0xdf, 0x56, 0x33, 0x6e, 0x36,
	0x1c, 0x83, 0xed, 0xff, 0x1f, 0xb4, 0xf6, 0x61, 0xb6, 0x3f, 0x3c, 0x52, 0xfb, 0x10, 0x80, 0x47,
	0xbb, 0x18, 0x0b, 0xc5, 0xb8, 0x58, 0x40, 0x9c, 0x6d, 0x57, 0x78, 0x61, 0x4c, 0xb4, 0xe1, 0x28,
	0xff, 0x10, 0x78, 0xe5, 0x54, 0x60, 0xe0, 0x89, 0xeb, 0x30, 0x86, 0x38, 0x78, 0xdc, 0xb5, 0xb8,
	0xe3, 0xc2, 0x28, 0x90, 0xe7, 0x84, 0xde, 0xf4, 0x11, 0x8c, 0xf1, 0xdd, 0x7a, 0x5d, 0xf7, 0x1b,
	0xd3, 0x99, 0x64, 0xbc, 0x11, 0x68, 0x4b, 0x7a, 0x85, 0x78, 0x08, 0x42, 0x57, 0x20, 0x2d, 0x02,
	0x67, 0x6c, 0x76, 0xb4, 0x70, 0x7e, 0xfe, 0xf5, 0x38, 0xb0, 0x0a, 0x32, 0x22, 0x9a, 0x70, 0x7b,
	0x90, 0x1e, 0x4f, 0x4d, 0x64, 0x94, 0x43, 0xcc, 0x88, 0x8a, 0x6d, 0x77, 0x65, 0xc4, 0x7d, 0x80,
	0x56, 0x89, 0x8a, 0xb2, 0x4e, 0xd6, 0xb3, 0x62, 0xb3, 0x9e, 0x15, 0x65, 0xf1, 0xc4, 0x7a, 0x56,
	0xdc, 0xd4, 0x4d, 0x86, 0xbe, 0x5a, 0x9b, 0xe7, 0xe0, 0x20, 0xff, 0x31, 0xbc, 0xf8, 0xf6, 0xf3,
	0xf1, 0xe2, 0x3f, 0x6e, 0x5d, 0xfc, 0xa8, 0x90, 0xb8, 0x18, 0x27, 0xb1, 0xcf, 0x13, 0x76, 0x3f,
	0xc4, 0x7a, 0x87, 0xb2, 0x14, 0x3e, 0x6a, 0x9c, 0x32, 0x89, 0xd5, 0x2e, 0xed, 0x41, 0x7a, 0x9c,
	0x4c, 0xa4, 0x94, 0xaf, 0x08, 0x4c, 0x87, 0x27, 0x47, 0x91, 0x96, 0x2c, 0x1f, 0x26, 0xe1, 0x9c,
	0x25, 0x02, 0x39, 0x25, 0xf2, 0x4c, 0x2e, 0xda, 0xd2, 0x6f, 0xb4, 0x3d, 0xfd, 0x3a, 0xb3, 0x27,
	0xdd, 0x9d, 0x3d, 0x5f, 0xc0, 0xab, 0x3d, 0x58, 0xe0, 0x5d, 0xbe, 0x07, 0x59, 0x1e, 0x6e, 0xe2,
	0x5b, 0x5e, 0x4f, 0x9c, 0x35, 0x78, 0x7f, 0x2d, 0x04, 0xe5, 0x36, 0x16, 0x10, 0x8d, 0x99, 0x16,
	0x0f, 0x98, 0xcf, 0x8c, 0x35, 0xe6, 0xb8, 0x51, 0x11, 0x1f, 0xac, 0x5a, 0x59, 0x84, 0xd7, 0xfa,
	0x78, 0xb7, 0xea, 0x8f, 0x21, 0x76, 0xa6, 0xc9, 0xec, 0x68, 0x21, 0xab, 0xe1, 0x4a, 0x99, 0xc3,
	0xfa, 0xf3, 0x7e, 0x8d, 0xbb, 0x36, 0x0b, 0xd8, 0x9a, 0xb6, 0xf5, 0x98, 0xf9, 0x4d, 0xd2, 0x51,
	0xfb, 0xb8, 0x87, 0x35, 0xa4, 0xa7, 0x09, 0xc2, 0xcf, 0xc1, 0x05, 0xc3, 0xe7, 0xd5, 0x3d, 0xdc,
	0x17, 0x87, 0xbc, 0xa4, 0x9d, 0x37, 0x7c, 0x1e, 0x9a, 0x2a, 0x5f, 0x13, 0x98, 0x13, 0x38, 0x8f,
	0x75, 0xdb, 0x32, 0xf4, 0x80, 0xad, 0xcb, 0x36, 0xb6, 0x2a, 0xba, 0x58, 0xb2, 0xc7, 0x7d, 0x17,
	0xd2, 0xcd, 0x6e, 0x87, 0x01, 0x56, 0x8a, 0xbb, 0xee, 0x8e, 0x13, 0xd6, 0xf4, 0x40, 0xc7, 0x6b,
	0x17, 0x20, 0xca, 0x43, 0x50, 0x06, 0xf1, 0x41, 0x65, 0x93, 0x70, 0x6e, 0xaf, 0x69, 0x20, 0xc8,
	0x8c, 0x6b, 0x72, 0x41, 0x27, 0x60, 0x94, 0xf9, 0xbe, 0xe0, 0x91, 0xd5, 0x9a, 0x3f, 0xe7, 0x9f,
	0x5f, 0x84, 0x73, 0x02, 0x8e, 0x7e, 0x47, 0x20, 0x23, 0x5b, 0x25, 0x9d, 0x4f, 0x94, 0x5e, 0x1d,
	0xdd, 0x3a, 0xb7, 0x70, 0x26, 0x1f, 0xc9, 0x52, 0x29, 0x7e, 0xf9, 0xeb, 0xdf, 0xdf, 0xa6, 0x0a,
	0xf4, 0xaa, 0x9a, 0x68, 0xe2, 0xa1, 0x3f, 0x10, 0x18, 0xc3, 0x94, 0xa6, 0x37, 0xcf, 0x5c, 0x03,
	0x24, 0xd1, 0x61, 0x6b, 0x87, 0xb2, 0x2c, 0xc8, 0x96, 0xe9, 0x82, 0x9a, 0x6c, 0xe2, 0x52, 0x0f,
	0xa2, 0x08, 0x38, 0xa4, 0x3f, 0x11, 0xb8, 0xd8, 0x35, 0x13, 0xd0, 0x3b, 0x67, 0x64, 0xd2, 0x35,
	0x4c, 0x0c, 0xaf, 0x64, 0x51, 0x28, 0x29, 0x51, 0x35, 0x4e, 0x89, 0x9c, 0x4e, 0xd4, 0x03, 0xf9,
	0xf7, 0x90, 0x7e, 0x4f, 0x00, 0x10, 0xac, 0x62, 0xdb, 0x09, 0x9f, 0xe0, 0x54, 0x43, 0x49, 0x48,
	0xfc, 0x74, 0x23, 0x50, 0x54, 0x41, 0xfc, 0x3a, 0xbd, 0x96, 0xf0, 0x09, 0xe8, 0x2f, 0x04, 0x2e,
	0xb4, 0x0f, 0x36, 0x74, 0x39, 0xe9, 0x9d, 0xf5, 0x98, 0xb4, 0x72, 0xb7, 0x87, 0x73, 0x46, 0xf2,
	0x15, 0x41, 0x7e, 0x99, 0x2e, 0xc5, 0x91, 0xb7, 0x85, 0x77, 0x55, 0xd6, 0xfa, 0x8e, 0x28, 0xfa,
	0x83, 0xc0, 0x44, 0xf7, 0x40, 0x44, 0xdf, 0x3e, 0x1b, 0xab, 0x53, 0x93, 0x5a, 0xee, 0xee, 0xf0,
	0x00, 0x28, 0xed, 0xbe, 0x90, 0x76, 0x97, 0xde, 0x49, 0x28, 0x2d, 0xfc, 0xca, 0x30, 0xd8, 0x7e,
	0x87, 0xbe, 0x23, 0x02, 0xd9, 0xa8, 0xd9, 0xd0, 0x5b, 0x49, 0x79, 0x75, 0xf7, 0xda, 0xdc, 0xd2,
	0x10, 0x9e, 0x67, 0x95, 0xd2, 0xfa, 0x52, 0x6a, 0x97, 0xa0, 0x1e, 0x08, 0x55, 0x87, 0xf4, 0x67,
	0x02, 0x13, 0xdd, 0x6d, 0x8d, 0x26, 0x0b, 0xa0, 0x3e, 0xbd, 0x34, 0xb7, 0x32, 0xa4, 0x37, 0x2a,
	0x5b, 0x12, 0xca, 0x16, 0x68, 0x29, 0x36, 0x79, 0x22, 0x84, 0xaa, 0x6c, 0xb7, 0xf4, 0x37, 0x02,
	0x97, 0x7a, 0xf4, 0xd1, 0x84, 0xa1, 0xd7, 0xbf, 0x49, 0x27, 0x0c, 0xbd, 0x01, 0x2d, 0x5c, 0x59,
	0x11, 0xaa, 0x16, 0x69, 0x39, 0x4e, 0x95, 0x8b, 0x20, 0xd5, 0xf6, 0x8e, 0x4f, 0x9f, 0x13, 0x78,
	0xb9, 0x67, 0x27, 0xa5, 0x95, 0x44, 0xd4, 0x06, 0x4d, 0x05, 0xb9, 0xd5, 0xff, 0x02, 0x81, 0x13,
	0xeb, 0xa3, 0xa3, 0xe3, 0x3c, 0x79, 0x71, 0x9c, 0x27, 0x7f, 0x1d, 0xe7, 0xc9, 0x37, 0x27, 0xf9,
	0x91, 0x17, 0x27, 0xf9, 0x91, 0xdf, 0x4f, 0xf2, 0x23, 0x9f, 0xbe, 0x65, 0x5a, 0xc1, 0xce, 0x6e,
	0xad, 0xf8, 0xc4, 0xad, 0xf7, 0xd3, 0xbe, 0xb7, 0xa0, 0xee, 0x47, 0x17, 0x10, 0x34, 0x3c, 0xc6,
	0x6b, 0x19, 0xf1, 0xc9, 0xbd, 0xf0, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x67, 0xd2, 0xff, 0xd0,
	0x10, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Rollapp by index.
	Rollapp(ctx context.Context, in *QueryGetRollappRequest, opts ...grpc.CallOption) (*QueryGetRollappResponse, error)
	// Queries a Rollapp by index.
	RollappByEIP155(ctx context.Context, in *QueryGetRollappByEIP155Request, opts ...grpc.CallOption) (*QueryGetRollappResponse, error)
	// Queries a list of Rollapp items.
	RollappAll(ctx context.Context, in *QueryAllRollappRequest, opts ...grpc.CallOption) (*QueryAllRollappResponse, error)
	// Queries a LatestHeight by rollapp-id.
	LatestHeight(ctx context.Context, in *QueryGetLatestHeightRequest, opts ...grpc.CallOption) (*QueryGetLatestHeightResponse, error)
	// Queries a LatestStateIndex by rollapp-id.
	LatestStateIndex(ctx context.Context, in *QueryGetLatestStateIndexRequest, opts ...grpc.CallOption) (*QueryGetLatestStateIndexResponse, error)
	// Queries a StateInfo by index.
	StateInfo(ctx context.Context, in *QueryGetStateInfoRequest, opts ...grpc.CallOption) (*QueryGetStateInfoResponse, error)
	// Queries a list of registered denoms for the rollapp.
	RegisteredDenoms(ctx context.Context, in *QueryRegisteredDenomsRequest, opts ...grpc.CallOption) (*QueryRegisteredDenomsResponse, error)
	// Queries a list of obsolete DRS versions.
	ObsoleteDRSVersions(ctx context.Context, in *QueryObsoleteDRSVersionsRequest, opts ...grpc.CallOption) (*QueryObsoleteDRSVersionsResponse, error)
	// Validates provided genesis bridge data against the hub.
	ValidateGenesisBridge(ctx context.Context, in *QueryValidateGenesisBridgeRequest, opts ...grpc.CallOption) (*QueryValidateGenesisBridgeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.rollapp.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Rollapp(ctx context.Context, in *QueryGetRollappRequest, opts ...grpc.CallOption) (*QueryGetRollappResponse, error) {
	out := new(QueryGetRollappResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.rollapp.Query/Rollapp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RollappByEIP155(ctx context.Context, in *QueryGetRollappByEIP155Request, opts ...grpc.CallOption) (*QueryGetRollappResponse, error) {
	out := new(QueryGetRollappResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.rollapp.Query/RollappByEIP155", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RollappAll(ctx context.Context, in *QueryAllRollappRequest, opts ...grpc.CallOption) (*QueryAllRollappResponse, error) {
	out := new(QueryAllRollappResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.rollapp.Query/RollappAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestHeight(ctx context.Context, in *QueryGetLatestHeightRequest, opts ...grpc.CallOption) (*QueryGetLatestHeightResponse, error) {
	out := new(QueryGetLatestHeightResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.rollapp.Query/LatestHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestStateIndex(ctx context.Context, in *QueryGetLatestStateIndexRequest, opts ...grpc.CallOption) (*QueryGetLatestStateIndexResponse, error) {
	out := new(QueryGetLatestStateIndexResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.rollapp.Query/LatestStateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StateInfo(ctx context.Context, in *QueryGetStateInfoRequest, opts ...grpc.CallOption) (*QueryGetStateInfoResponse, error) {
	out := new(QueryGetStateInfoResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.rollapp.Query/StateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredDenoms(ctx context.Context, in *QueryRegisteredDenomsRequest, opts ...grpc.CallOption) (*QueryRegisteredDenomsResponse, error) {
	out := new(QueryRegisteredDenomsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.rollapp.Query/RegisteredDenoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ObsoleteDRSVersions(ctx context.Context, in *QueryObsoleteDRSVersionsRequest, opts ...grpc.CallOption) (*QueryObsoleteDRSVersionsResponse, error) {
	out := new(QueryObsoleteDRSVersionsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.rollapp.Query/ObsoleteDRSVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidateGenesisBridge(ctx context.Context, in *QueryValidateGenesisBridgeRequest, opts ...grpc.CallOption) (*QueryValidateGenesisBridgeResponse, error) {
	out := new(QueryValidateGenesisBridgeResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.rollapp.Query/ValidateGenesisBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Rollapp by index.
	Rollapp(context.Context, *QueryGetRollappRequest) (*QueryGetRollappResponse, error)
	// Queries a Rollapp by index.
	RollappByEIP155(context.Context, *QueryGetRollappByEIP155Request) (*QueryGetRollappResponse, error)
	// Queries a list of Rollapp items.
	RollappAll(context.Context, *QueryAllRollappRequest) (*QueryAllRollappResponse, error)
	// Queries a LatestHeight by rollapp-id.
	LatestHeight(context.Context, *QueryGetLatestHeightRequest) (*QueryGetLatestHeightResponse, error)
	// Queries a LatestStateIndex by rollapp-id.
	LatestStateIndex(context.Context, *QueryGetLatestStateIndexRequest) (*QueryGetLatestStateIndexResponse, error)
	// Queries a StateInfo by index.
	StateInfo(context.Context, *QueryGetStateInfoRequest) (*QueryGetStateInfoResponse, error)
	// Queries a list of registered denoms for the rollapp.
	RegisteredDenoms(context.Context, *QueryRegisteredDenomsRequest) (*QueryRegisteredDenomsResponse, error)
	// Queries a list of obsolete DRS versions.
	ObsoleteDRSVersions(context.Context, *QueryObsoleteDRSVersionsRequest) (*QueryObsoleteDRSVersionsResponse, error)
	// Validates provided genesis bridge data against the hub.
	ValidateGenesisBridge(context.Context, *QueryValidateGenesisBridgeRequest) (*QueryValidateGenesisBridgeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Rollapp(ctx context.Context, req *QueryGetRollappRequest) (*QueryGetRollappResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollapp not implemented")
}
func (*UnimplementedQueryServer) RollappByEIP155(ctx context.Context, req *QueryGetRollappByEIP155Request) (*QueryGetRollappResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollappByEIP155 not implemented")
}
func (*UnimplementedQueryServer) RollappAll(ctx context.Context, req *QueryAllRollappRequest) (*QueryAllRollappResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollappAll not implemented")
}
func (*UnimplementedQueryServer) LatestHeight(ctx context.Context, req *QueryGetLatestHeightRequest) (*QueryGetLatestHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestHeight not implemented")
}
func (*UnimplementedQueryServer) LatestStateIndex(ctx context.Context, req *QueryGetLatestStateIndexRequest) (*QueryGetLatestStateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestStateIndex not implemented")
}
func (*UnimplementedQueryServer) StateInfo(ctx context.Context, req *QueryGetStateInfoRequest) (*QueryGetStateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateInfo not implemented")
}
func (*UnimplementedQueryServer) RegisteredDenoms(ctx context.Context, req *QueryRegisteredDenomsRequest) (*QueryRegisteredDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredDenoms not implemented")
}
func (*UnimplementedQueryServer) ObsoleteDRSVersions(ctx context.Context, req *QueryObsoleteDRSVersionsRequest) (*QueryObsoleteDRSVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsoleteDRSVersions not implemented")
}
func (*UnimplementedQueryServer) ValidateGenesisBridge(ctx context.Context, req *QueryValidateGenesisBridgeRequest) (*QueryValidateGenesisBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateGenesisBridge not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.rollapp.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Rollapp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRollappRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rollapp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.rollapp.Query/Rollapp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rollapp(ctx, req.(*QueryGetRollappRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RollappByEIP155_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRollappByEIP155Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RollappByEIP155(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.rollapp.Query/RollappByEIP155",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RollappByEIP155(ctx, req.(*QueryGetRollappByEIP155Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RollappAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRollappRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RollappAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.rollapp.Query/RollappAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RollappAll(ctx, req.(*QueryAllRollappRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLatestHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.rollapp.Query/LatestHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestHeight(ctx, req.(*QueryGetLatestHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestStateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLatestStateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestStateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.rollapp.Query/LatestStateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestStateIndex(ctx, req.(*QueryGetLatestStateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.rollapp.Query/StateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StateInfo(ctx, req.(*QueryGetStateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredDenoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredDenomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredDenoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.rollapp.Query/RegisteredDenoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredDenoms(ctx, req.(*QueryRegisteredDenomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ObsoleteDRSVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryObsoleteDRSVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ObsoleteDRSVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.rollapp.Query/ObsoleteDRSVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ObsoleteDRSVersions(ctx, req.(*QueryObsoleteDRSVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidateGenesisBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidateGenesisBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidateGenesisBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.rollapp.Query/ValidateGenesisBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidateGenesisBridge(ctx, req.(*QueryValidateGenesisBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.rollapp.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Rollapp",
			Handler:    _Query_Rollapp_Handler,
		},
		{
			MethodName: "RollappByEIP155",
			Handler:    _Query_RollappByEIP155_Handler,
		},
		{
			MethodName: "RollappAll",
			Handler:    _Query_RollappAll_Handler,
		},
		{
			MethodName: "LatestHeight",
			Handler:    _Query_LatestHeight_Handler,
		},
		{
			MethodName: "LatestStateIndex",
			Handler:    _Query_LatestStateIndex_Handler,
		},
		{
			MethodName: "StateInfo",
			Handler:    _Query_StateInfo_Handler,
		},
		{
			MethodName: "RegisteredDenoms",
			Handler:    _Query_RegisteredDenoms_Handler,
		},
		{
			MethodName: "ObsoleteDRSVersions",
			Handler:    _Query_ObsoleteDRSVersions_Handler,
		},
		{
			MethodName: "ValidateGenesisBridge",
			Handler:    _Query_ValidateGenesisBridge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/rollapp/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRollappRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRollappRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRollappRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OmitApps {
		i--
		if m.OmitApps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRollappByEIP155Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRollappByEIP155Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRollappByEIP155Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OmitApps {
		i--
		if m.OmitApps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Eip155 != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Eip155))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Finalized {
		i--
		if m.Finalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestStateIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestStateIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestStateIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Finalized {
		i--
		if m.Finalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestStateIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestStateIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestStateIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StateIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRollappResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRollappResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRollappResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Apps) > 0 {
		for iNdEx := len(m.Apps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Apps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.Summary.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Rollapp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRollappRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRollappRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRollappRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OmitApps {
		i--
		if m.OmitApps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRollappResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRollappResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRollappResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rollapp) > 0 {
		for iNdEx := len(m.Rollapp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rollapp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStateInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStateInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStateInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Finalized {
		i--
		if m.Finalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStateInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStateInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStateInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StateInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredDenomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredDenomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredDenomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredDenomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredDenomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredDenomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryObsoleteDRSVersionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObsoleteDRSVersionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObsoleteDRSVersionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryObsoleteDRSVersionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObsoleteDRSVersionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObsoleteDRSVersionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DrsVersions) > 0 {
		dAtA9 := make([]byte, len(m.DrsVersions)*10)
		var j8 int
		for _, num := range m.DrsVersions {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintQuery(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidateGenesisBridgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateGenesisBridgeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateGenesisBridgeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidateGenesisBridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateGenesisBridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateGenesisBridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRollappRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OmitApps {
		n += 2
	}
	return n
}

func (m *QueryGetRollappByEIP155Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Eip155 != 0 {
		n += 1 + sovQuery(uint64(m.Eip155))
	}
	if m.OmitApps {
		n += 2
	}
	return n
}

func (m *QueryGetLatestHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Finalized {
		n += 2
	}
	return n
}

func (m *QueryGetLatestHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryGetLatestStateIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Finalized {
		n += 2
	}
	return n
}

func (m *QueryGetLatestStateIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StateIndex.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRollappResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rollapp.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Summary.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Apps) > 0 {
		for _, e := range m.Apps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllRollappRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OmitApps {
		n += 2
	}
	return n
}

func (m *QueryAllRollappResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Rollapp) > 0 {
		for _, e := range m.Rollapp {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetStateInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Finalized {
		n += 2
	}
	return n
}

func (m *QueryGetStateInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StateInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRegisteredDenomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredDenomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryObsoleteDRSVersionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryObsoleteDRSVersionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DrsVersions) > 0 {
		l = 0
		for _, e := range m.DrsVersions {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryValidateGenesisBridgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Data.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryValidateGenesisBridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRollappRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRollappRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRollappRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OmitApps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OmitApps = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRollappByEIP155Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRollappByEIP155Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRollappByEIP155Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eip155", wireType)
			}
			m.Eip155 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eip155 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OmitApps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OmitApps = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finalized = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestStateIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestStateIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestStateIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finalized = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestStateIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestStateIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestStateIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StateIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRollappResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRollappResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRollappResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollapp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rollapp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Summary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, &App{})
			if err := m.Apps[len(m.Apps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRollappRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRollappRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRollappRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OmitApps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OmitApps = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRollappResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRollappResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRollappResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollapp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rollapp = append(m.Rollapp, QueryGetRollappResponse{})
			if err := m.Rollapp[len(m.Rollapp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStateInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStateInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStateInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finalized = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStateInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStateInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStateInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredDenomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredDenomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredDenomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredDenomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredDenomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredDenomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObsoleteDRSVersionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObsoleteDRSVersionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObsoleteDRSVersionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObsoleteDRSVersionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObsoleteDRSVersionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObsoleteDRSVersionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DrsVersions = append(m.DrsVersions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DrsVersions) == 0 {
					m.DrsVersions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DrsVersions = append(m.DrsVersions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DrsVersions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateGenesisBridgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateGenesisBridgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateGenesisBridgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateGenesisBridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateGenesisBridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateGenesisBridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
