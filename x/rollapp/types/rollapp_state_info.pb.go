// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rollapp/rollapp_state_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RollappStateInfo struct {
	RollappId  string     `protobuf:"bytes,1,opt,name=rollappId,proto3" json:"rollappId,omitempty"`
	SateInfo   *StateInfo `protobuf:"bytes,2,opt,name=sateInfo,proto3" json:"sateInfo,omitempty"`
	StateIndex uint64     `protobuf:"varint,3,opt,name=stateIndex,proto3" json:"stateIndex,omitempty"`
}

func (m *RollappStateInfo) Reset()         { *m = RollappStateInfo{} }
func (m *RollappStateInfo) String() string { return proto.CompactTextString(m) }
func (*RollappStateInfo) ProtoMessage()    {}
func (*RollappStateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_44cbeac40275e25b, []int{0}
}
func (m *RollappStateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollappStateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollappStateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollappStateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollappStateInfo.Merge(m, src)
}
func (m *RollappStateInfo) XXX_Size() int {
	return m.Size()
}
func (m *RollappStateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RollappStateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RollappStateInfo proto.InternalMessageInfo

func (m *RollappStateInfo) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *RollappStateInfo) GetSateInfo() *StateInfo {
	if m != nil {
		return m.SateInfo
	}
	return nil
}

func (m *RollappStateInfo) GetStateIndex() uint64 {
	if m != nil {
		return m.StateIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*RollappStateInfo)(nil), "dymensionxyz.dymension.rollapp.RollappStateInfo")
}

func init() { proto.RegisterFile("rollapp/rollapp_state_info.proto", fileDescriptor_44cbeac40275e25b) }

var fileDescriptor_44cbeac40275e25b = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0xca, 0xcf, 0xc9,
	0x49, 0x2c, 0x28, 0xd0, 0x87, 0xd2, 0xf1, 0xc5, 0x25, 0x89, 0x25, 0xa9, 0xf1, 0x99, 0x79, 0x69,
	0xf9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x72, 0x29, 0x95, 0xb9, 0xa9, 0x79, 0xc5, 0x99,
	0xf9, 0x79, 0x15, 0x95, 0x55, 0x7a, 0x70, 0x8e, 0x1e, 0x54, 0x83, 0x94, 0x04, 0xcc, 0x04, 0x74,
	0x9d, 0x4a, 0xd3, 0x19, 0xb9, 0x04, 0x82, 0x20, 0x92, 0xc1, 0x20, 0x39, 0xcf, 0xbc, 0xb4, 0x7c,
	0x21, 0x19, 0x2e, 0x4e, 0xa8, 0x06, 0xcf, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x84,
	0x80, 0x90, 0x2b, 0x17, 0x47, 0x31, 0x54, 0xa5, 0x04, 0x93, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0xa6,
	0x1e, 0x7e, 0xfb, 0xf5, 0xe0, 0x46, 0x07, 0xc1, 0xb5, 0x0a, 0xc9, 0x71, 0x71, 0x15, 0x43, 0x84,
	0x53, 0x52, 0x2b, 0x24, 0x98, 0x15, 0x18, 0x35, 0x58, 0x82, 0x90, 0x44, 0x9c, 0xbc, 0x4f, 0x3c,
	0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e,
	0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x30, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49,
	0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xd9, 0x62, 0x04, 0x47, 0xbf, 0x02, 0x16, 0x56, 0xfa, 0x25, 0x95,
	0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0xdf, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xa2,
	0xe5, 0x16, 0x4b, 0x01, 0x00, 0x00,
}

func (m *RollappStateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollappStateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollappStateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StateIndex != 0 {
		i = encodeVarintRollappStateInfo(dAtA, i, uint64(m.StateIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.SateInfo != nil {
		{
			size, err := m.SateInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollappStateInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintRollappStateInfo(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRollappStateInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovRollappStateInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RollappStateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovRollappStateInfo(uint64(l))
	}
	if m.SateInfo != nil {
		l = m.SateInfo.Size()
		n += 1 + l + sovRollappStateInfo(uint64(l))
	}
	if m.StateIndex != 0 {
		n += 1 + sovRollappStateInfo(uint64(m.StateIndex))
	}
	return n
}

func sovRollappStateInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRollappStateInfo(x uint64) (n int) {
	return sovRollappStateInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RollappStateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollappStateInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollappStateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollappStateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollappStateInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollappStateInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollappStateInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollappStateInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SateInfo == nil {
				m.SateInfo = &StateInfo{}
			}
			if err := m.SateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateIndex", wireType)
			}
			m.StateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRollappStateInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollappStateInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollappStateInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollappStateInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollappStateInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollappStateInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRollappStateInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRollappStateInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRollappStateInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRollappStateInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollappStateInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRollappStateInfo = fmt.Errorf("proto: unexpected end of group")
)
