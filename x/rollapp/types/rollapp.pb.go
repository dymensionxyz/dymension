// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rollapp/rollapp.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Rollapp struct {
	RollappId             string      `protobuf:"bytes,1,opt,name=rollappId,proto3" json:"rollappId,omitempty"`
	Creator               string      `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Version               uint64      `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	CodeStamp             string      `protobuf:"bytes,4,opt,name=codeStamp,proto3" json:"codeStamp,omitempty"`
	GenesisPath           string      `protobuf:"bytes,5,opt,name=genesisPath,proto3" json:"genesisPath,omitempty"`
	MaxWithholdingBlocks  uint64      `protobuf:"varint,6,opt,name=maxWithholdingBlocks,proto3" json:"maxWithholdingBlocks,omitempty"`
	MaxSequencers         uint64      `protobuf:"varint,7,opt,name=maxSequencers,proto3" json:"maxSequencers,omitempty"`
	PermissionedAddresses *Sequencers `protobuf:"bytes,8,opt,name=permissionedAddresses,proto3" json:"permissionedAddresses,omitempty"`
}

func (m *Rollapp) Reset()         { *m = Rollapp{} }
func (m *Rollapp) String() string { return proto.CompactTextString(m) }
func (*Rollapp) ProtoMessage()    {}
func (*Rollapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_fafe6642dcc915df, []int{0}
}
func (m *Rollapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rollapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rollapp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rollapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rollapp.Merge(m, src)
}
func (m *Rollapp) XXX_Size() int {
	return m.Size()
}
func (m *Rollapp) XXX_DiscardUnknown() {
	xxx_messageInfo_Rollapp.DiscardUnknown(m)
}

var xxx_messageInfo_Rollapp proto.InternalMessageInfo

func (m *Rollapp) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *Rollapp) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Rollapp) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Rollapp) GetCodeStamp() string {
	if m != nil {
		return m.CodeStamp
	}
	return ""
}

func (m *Rollapp) GetGenesisPath() string {
	if m != nil {
		return m.GenesisPath
	}
	return ""
}

func (m *Rollapp) GetMaxWithholdingBlocks() uint64 {
	if m != nil {
		return m.MaxWithholdingBlocks
	}
	return 0
}

func (m *Rollapp) GetMaxSequencers() uint64 {
	if m != nil {
		return m.MaxSequencers
	}
	return 0
}

func (m *Rollapp) GetPermissionedAddresses() *Sequencers {
	if m != nil {
		return m.PermissionedAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*Rollapp)(nil), "dymensionxyz.dymension.rollapp.Rollapp")
}

func init() { proto.RegisterFile("rollapp/rollapp.proto", fileDescriptor_fafe6642dcc915df) }

var fileDescriptor_fafe6642dcc915df = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xcd, 0x4e, 0x32, 0x31,
	0x14, 0xa5, 0x7c, 0x7c, 0x20, 0x25, 0x6e, 0x1a, 0x49, 0x1a, 0x63, 0x9a, 0x89, 0x71, 0x41, 0x5c,
	0xcc, 0x44, 0x7c, 0x02, 0xd9, 0x19, 0x37, 0x66, 0x58, 0x98, 0xb8, 0xb2, 0x4c, 0x6f, 0x98, 0xc6,
	0xe9, 0xb4, 0xb6, 0xc5, 0x0c, 0x3e, 0x85, 0x8f, 0xe5, 0x92, 0x9d, 0x2e, 0x0d, 0xbc, 0x88, 0x99,
	0x81, 0x01, 0x4c, 0x88, 0xab, 0xe6, 0xfc, 0xdc, 0x73, 0xda, 0x5e, 0xdc, 0xb7, 0x3a, 0xcb, 0xb8,
	0x31, 0xd1, 0xe6, 0x0c, 0x8d, 0xd5, 0x5e, 0x13, 0x26, 0xe6, 0x0a, 0x72, 0x27, 0x75, 0x5e, 0xcc,
	0xdf, 0xc2, 0x2d, 0x08, 0x37, 0xae, 0x53, 0x5a, 0x8f, 0x39, 0x78, 0x99, 0x41, 0x9e, 0x80, 0x75,
	0xeb, 0xc9, 0xf3, 0xcf, 0x26, 0xee, 0xc4, 0x6b, 0x91, 0x9c, 0xe1, 0xee, 0xc6, 0x77, 0x2b, 0x28,
	0x0a, 0xd0, 0xa0, 0x1b, 0xef, 0x08, 0x42, 0x71, 0x27, 0xb1, 0xc0, 0xbd, 0xb6, 0xb4, 0x59, 0x69,
	0x35, 0x2c, 0x95, 0x57, 0xb0, 0x65, 0x21, 0xfd, 0x17, 0xa0, 0x41, 0x2b, 0xae, 0x61, 0x99, 0x98,
	0x68, 0x01, 0x63, 0xcf, 0x95, 0xa1, 0xad, 0x75, 0xe2, 0x96, 0x20, 0x01, 0xee, 0x4d, 0x21, 0x07,
	0x27, 0xdd, 0x3d, 0xf7, 0x29, 0xfd, 0x5f, 0xe9, 0xfb, 0x14, 0x19, 0xe2, 0x13, 0xc5, 0x8b, 0x07,
	0xe9, 0xd3, 0x54, 0x67, 0x42, 0xe6, 0xd3, 0x51, 0xa6, 0x93, 0x67, 0x47, 0xdb, 0x55, 0xcd, 0x41,
	0x8d, 0x5c, 0xe0, 0x63, 0xc5, 0x8b, 0xf1, 0xf6, 0xa1, 0xb4, 0x53, 0x99, 0x7f, 0x93, 0xe4, 0x09,
	0xf7, 0x0d, 0x58, 0x25, 0x5d, 0x79, 0x4f, 0x10, 0x37, 0x42, 0x58, 0x70, 0x0e, 0x1c, 0x3d, 0x0a,
	0xd0, 0xa0, 0x37, 0xbc, 0x0c, 0xff, 0xfe, 0xd1, 0x70, 0x17, 0x15, 0x1f, 0x0e, 0x1a, 0xdd, 0x7d,
	0x2c, 0x19, 0x5a, 0x2c, 0x19, 0xfa, 0x5e, 0x32, 0xf4, 0xbe, 0x62, 0x8d, 0xc5, 0x8a, 0x35, 0xbe,
	0x56, 0xac, 0xf1, 0x78, 0x35, 0x95, 0x3e, 0x9d, 0x4d, 0xc2, 0x44, 0xab, 0x68, 0xbf, 0x66, 0x07,
	0xa2, 0xa2, 0x5e, 0x70, 0xe4, 0xe7, 0x06, 0xdc, 0xa4, 0x5d, 0x6d, 0xeb, 0xfa, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x16, 0xc0, 0x3f, 0x60, 0x00, 0x02, 0x00, 0x00,
}

func (m *Rollapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rollapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rollapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PermissionedAddresses != nil {
		{
			size, err := m.PermissionedAddresses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollapp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.MaxSequencers != 0 {
		i = encodeVarintRollapp(dAtA, i, uint64(m.MaxSequencers))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxWithholdingBlocks != 0 {
		i = encodeVarintRollapp(dAtA, i, uint64(m.MaxWithholdingBlocks))
		i--
		dAtA[i] = 0x30
	}
	if len(m.GenesisPath) > 0 {
		i -= len(m.GenesisPath)
		copy(dAtA[i:], m.GenesisPath)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.GenesisPath)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CodeStamp) > 0 {
		i -= len(m.CodeStamp)
		copy(dAtA[i:], m.CodeStamp)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.CodeStamp)))
		i--
		dAtA[i] = 0x22
	}
	if m.Version != 0 {
		i = encodeVarintRollapp(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRollapp(dAtA []byte, offset int, v uint64) int {
	offset -= sovRollapp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Rollapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovRollapp(uint64(m.Version))
	}
	l = len(m.CodeStamp)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = len(m.GenesisPath)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	if m.MaxWithholdingBlocks != 0 {
		n += 1 + sovRollapp(uint64(m.MaxWithholdingBlocks))
	}
	if m.MaxSequencers != 0 {
		n += 1 + sovRollapp(uint64(m.MaxSequencers))
	}
	if m.PermissionedAddresses != nil {
		l = m.PermissionedAddresses.Size()
		n += 1 + l + sovRollapp(uint64(l))
	}
	return n
}

func sovRollapp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRollapp(x uint64) (n int) {
	return sovRollapp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Rollapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rollapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rollapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeStamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeStamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWithholdingBlocks", wireType)
			}
			m.MaxWithholdingBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWithholdingBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSequencers", wireType)
			}
			m.MaxSequencers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSequencers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionedAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PermissionedAddresses == nil {
				m.PermissionedAddresses = &Sequencers{}
			}
			if err := m.PermissionedAddresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollapp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRollapp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRollapp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRollapp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRollapp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollapp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRollapp = fmt.Errorf("proto: unexpected end of group")
)
