// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/rollapp/rollapp.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RollappGenesisState is a partial repr of the state the hub can expect the rollapp to be in upon genesis
type RollappGenesisState struct {
	// If true, then full usage of the canonical ibc transfer channel is enabled.
	// Note: in v3.1.0 and prior this field marked the completion of the 'genesis event'
	// Keeping and renaming the field enables a seamless upgrade https://www.notion.so/dymension/ADR-x-Genesis-Bridge-Phase-2-89769aa551b5440b9ed403a101775ce1?pvs=4#89698384d815435b87393dbe45bc5a74
	// to the new genesis transfer protocol
	// Note: if this field is false, ibc transfers may still be allowed in one or either direction.
	TransfersEnabled bool `protobuf:"varint,2,opt,name=transfers_enabled,json=transfersEnabled,proto3" json:"transfers_enabled,omitempty"`
}

func (m *RollappGenesisState) Reset()         { *m = RollappGenesisState{} }
func (m *RollappGenesisState) String() string { return proto.CompactTextString(m) }
func (*RollappGenesisState) ProtoMessage()    {}
func (*RollappGenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ef2bec3aea5528, []int{0}
}
func (m *RollappGenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollappGenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollappGenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollappGenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollappGenesisState.Merge(m, src)
}
func (m *RollappGenesisState) XXX_Size() int {
	return m.Size()
}
func (m *RollappGenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_RollappGenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_RollappGenesisState proto.InternalMessageInfo

func (m *RollappGenesisState) GetTransfersEnabled() bool {
	if m != nil {
		return m.TransfersEnabled
	}
	return false
}

// Rollapp defines a rollapp object. First, the RollApp is created and then
// sequencers can be created and attached. The RollApp is identified by rollappId
type Rollapp struct {
	// The unique identifier of the rollapp chain.
	// The rollapp_id follows the same standard as cosmos chain_id.
	RollappId string `protobuf:"bytes,1,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// creator is the bech32-encoded address of the rollapp creator.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// initial_sequencer_address is a bech32-encoded address of the
	// sequencer that is allowed to initially serve this rollappId.
	InitialSequencerAddress string `protobuf:"bytes,3,opt,name=initial_sequencer_address,json=initialSequencerAddress,proto3" json:"initial_sequencer_address,omitempty"`
	// checksum used to verify integrity
	GenesisChecksum string `protobuf:"bytes,4,opt,name=genesis_checksum,json=genesisChecksum,proto3" json:"genesis_checksum,omitempty"`
	// genesis_state is a partial repr of the state the hub can expect the rollapp to be in upon genesis
	GenesisState RollappGenesisState `protobuf:"bytes,5,opt,name=genesis_state,json=genesisState,proto3" json:"genesis_state"`
	// channel_id will be set to the canonical IBC channel of the rollapp.
	ChannelId string `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// frozen is a boolean that indicates if the rollapp is frozen.
	Frozen bool `protobuf:"varint,7,opt,name=frozen,proto3" json:"frozen,omitempty"`
	// unique bech32 prefix
	Bech32Prefix string `protobuf:"bytes,8,opt,name=bech32_prefix,json=bech32Prefix,proto3" json:"bech32_prefix,omitempty"`
	// alias is the chain alias used for display and namespace system
	Alias string `protobuf:"bytes,9,opt,name=alias,proto3" json:"alias,omitempty"`
	// registered_denoms is a list of registered denom bases on this rollapp
	RegisteredDenoms []string `protobuf:"bytes,10,rep,name=registered_denoms,json=registeredDenoms,proto3" json:"registered_denoms,omitempty"`
	// metadata is the rollapp metadata
	Metadata *RollappMetadata `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Rollapp) Reset()         { *m = Rollapp{} }
func (m *Rollapp) String() string { return proto.CompactTextString(m) }
func (*Rollapp) ProtoMessage()    {}
func (*Rollapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ef2bec3aea5528, []int{1}
}
func (m *Rollapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rollapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rollapp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rollapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rollapp.Merge(m, src)
}
func (m *Rollapp) XXX_Size() int {
	return m.Size()
}
func (m *Rollapp) XXX_DiscardUnknown() {
	xxx_messageInfo_Rollapp.DiscardUnknown(m)
}

var xxx_messageInfo_Rollapp proto.InternalMessageInfo

func (m *Rollapp) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *Rollapp) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Rollapp) GetInitialSequencerAddress() string {
	if m != nil {
		return m.InitialSequencerAddress
	}
	return ""
}

func (m *Rollapp) GetGenesisChecksum() string {
	if m != nil {
		return m.GenesisChecksum
	}
	return ""
}

func (m *Rollapp) GetGenesisState() RollappGenesisState {
	if m != nil {
		return m.GenesisState
	}
	return RollappGenesisState{}
}

func (m *Rollapp) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *Rollapp) GetFrozen() bool {
	if m != nil {
		return m.Frozen
	}
	return false
}

func (m *Rollapp) GetBech32Prefix() string {
	if m != nil {
		return m.Bech32Prefix
	}
	return ""
}

func (m *Rollapp) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Rollapp) GetRegisteredDenoms() []string {
	if m != nil {
		return m.RegisteredDenoms
	}
	return nil
}

func (m *Rollapp) GetMetadata() *RollappMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// UpdateRollappInformation updates the rollapp information.
type UpdateRollappInformation struct {
	// creator is the bech32-encoded address of the rollapp creator
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// rollapp_id is the unique identifier of the rollapp chain.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// initial_sequencer_address is a bech32-encoded address of the
	// sequencer that is allowed to initially serve this rollappId.
	InitialSequencerAddress string `protobuf:"bytes,3,opt,name=initial_sequencer_address,json=initialSequencerAddress,proto3" json:"initial_sequencer_address,omitempty"`
	// alias is the chain alias used for display and namespace system
	Alias string `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	// checksum used to verify integrity
	GenesisChecksum string `protobuf:"bytes,5,opt,name=genesis_checksum,json=genesisChecksum,proto3" json:"genesis_checksum,omitempty"`
	// metadata is the rollapp metadata
	Metadata *RollappMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *UpdateRollappInformation) Reset()         { *m = UpdateRollappInformation{} }
func (m *UpdateRollappInformation) String() string { return proto.CompactTextString(m) }
func (*UpdateRollappInformation) ProtoMessage()    {}
func (*UpdateRollappInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ef2bec3aea5528, []int{2}
}
func (m *UpdateRollappInformation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRollappInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRollappInformation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRollappInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRollappInformation.Merge(m, src)
}
func (m *UpdateRollappInformation) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRollappInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRollappInformation.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRollappInformation proto.InternalMessageInfo

func (m *UpdateRollappInformation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *UpdateRollappInformation) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *UpdateRollappInformation) GetInitialSequencerAddress() string {
	if m != nil {
		return m.InitialSequencerAddress
	}
	return ""
}

func (m *UpdateRollappInformation) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *UpdateRollappInformation) GetGenesisChecksum() string {
	if m != nil {
		return m.GenesisChecksum
	}
	return ""
}

func (m *UpdateRollappInformation) GetMetadata() *RollappMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Rollapp summary is a compact representation of Rollapp
type RollappSummary struct {
	// The unique identifier of the rollapp chain.
	// The rollappId follows the same standard as cosmos chain_id.
	RollappId string `protobuf:"bytes,1,opt,name=rollappId,proto3" json:"rollappId,omitempty"`
	// Defines the index of the last rollapp UpdateState.
	LatestStateIndex *StateInfoIndex `protobuf:"bytes,2,opt,name=latestStateIndex,proto3" json:"latestStateIndex,omitempty"`
	// Defines the index of the last rollapp UpdateState that was finalized.
	LatestFinalizedStateIndex *StateInfoIndex `protobuf:"bytes,3,opt,name=latestFinalizedStateIndex,proto3" json:"latestFinalizedStateIndex,omitempty"`
}

func (m *RollappSummary) Reset()         { *m = RollappSummary{} }
func (m *RollappSummary) String() string { return proto.CompactTextString(m) }
func (*RollappSummary) ProtoMessage()    {}
func (*RollappSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ef2bec3aea5528, []int{3}
}
func (m *RollappSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollappSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollappSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollappSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollappSummary.Merge(m, src)
}
func (m *RollappSummary) XXX_Size() int {
	return m.Size()
}
func (m *RollappSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RollappSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RollappSummary proto.InternalMessageInfo

func (m *RollappSummary) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *RollappSummary) GetLatestStateIndex() *StateInfoIndex {
	if m != nil {
		return m.LatestStateIndex
	}
	return nil
}

func (m *RollappSummary) GetLatestFinalizedStateIndex() *StateInfoIndex {
	if m != nil {
		return m.LatestFinalizedStateIndex
	}
	return nil
}

func init() {
	proto.RegisterType((*RollappGenesisState)(nil), "dymensionxyz.dymension.rollapp.RollappGenesisState")
	proto.RegisterType((*Rollapp)(nil), "dymensionxyz.dymension.rollapp.Rollapp")
	proto.RegisterType((*UpdateRollappInformation)(nil), "dymensionxyz.dymension.rollapp.UpdateRollappInformation")
	proto.RegisterType((*RollappSummary)(nil), "dymensionxyz.dymension.rollapp.RollappSummary")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/rollapp/rollapp.proto", fileDescriptor_d4ef2bec3aea5528)
}

var fileDescriptor_d4ef2bec3aea5528 = []byte{
	// 618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcf, 0x6e, 0x13, 0x3f,
	0x10, 0xce, 0x26, 0x69, 0x9a, 0xb8, 0xed, 0xef, 0x17, 0x4c, 0x05, 0xdb, 0x8a, 0x2e, 0x51, 0xb9,
	0x04, 0x01, 0xbb, 0x6a, 0xc3, 0x89, 0x1b, 0xe5, 0x6f, 0x40, 0x20, 0xb4, 0x15, 0x97, 0x1e, 0x58,
	0x39, 0xeb, 0x49, 0x62, 0xb1, 0x6b, 0x07, 0xdb, 0xa9, 0x92, 0x3e, 0x05, 0x2f, 0xc0, 0xfb, 0xf4,
	0xd8, 0x23, 0x27, 0x84, 0xda, 0x67, 0x40, 0xe2, 0x88, 0xe2, 0x75, 0xd2, 0x2d, 0x6d, 0x09, 0xa2,
	0xa7, 0x64, 0xbe, 0xef, 0x9b, 0x99, 0xcc, 0x37, 0x13, 0xa3, 0xfb, 0x74, 0x9c, 0x02, 0x57, 0x4c,
	0xf0, 0xd1, 0xf8, 0x20, 0x98, 0x05, 0x81, 0x14, 0x49, 0x42, 0x06, 0x83, 0xe9, 0xa7, 0x3f, 0x90,
	0x42, 0x0b, 0xec, 0xe5, 0xd5, 0xfe, 0x2c, 0xf0, 0xad, 0x6a, 0x7d, 0xb5, 0x27, 0x7a, 0xc2, 0x48,
	0x83, 0xc9, 0xb7, 0x2c, 0x6b, 0x3d, 0x98, 0xd3, 0x43, 0x69, 0xa2, 0x21, 0x62, 0xbc, 0x3b, 0x4d,
	0xf0, 0x62, 0xa1, 0x52, 0xa1, 0x82, 0x0e, 0x51, 0x10, 0xec, 0x6f, 0x75, 0x40, 0x93, 0xad, 0x20,
	0x16, 0x8c, 0x5b, 0xfe, 0xc1, 0x9c, 0x82, 0x29, 0x68, 0x42, 0x89, 0x26, 0x99, 0x7c, 0xf3, 0x25,
	0xba, 0x1e, 0x66, 0xcc, 0x0b, 0xe0, 0xa0, 0x98, 0xda, 0x9d, 0x34, 0xc4, 0xf7, 0xd0, 0x35, 0x2d,
	0x09, 0x57, 0x5d, 0x90, 0x2a, 0x02, 0x4e, 0x3a, 0x09, 0x50, 0xb7, 0xd8, 0x70, 0x9a, 0xd5, 0xb0,
	0x3e, 0x23, 0x9e, 0x65, 0xf8, 0xab, 0x72, 0xd5, 0xa9, 0x17, 0x37, 0x7f, 0x94, 0xd0, 0xa2, 0x2d,
	0x85, 0x37, 0x10, 0xb2, 0xfd, 0x22, 0x46, 0x5d, 0xa7, 0xe1, 0x34, 0x6b, 0x61, 0xcd, 0x22, 0x6d,
	0x8a, 0x5d, 0xb4, 0x18, 0x4b, 0x20, 0x5a, 0x48, 0x53, 0xb3, 0x16, 0x4e, 0x43, 0xfc, 0x08, 0xad,
	0x31, 0xce, 0x34, 0x23, 0x49, 0xa4, 0xe0, 0xd3, 0x10, 0x78, 0x0c, 0x32, 0x22, 0x94, 0x4a, 0x50,
	0xca, 0x2d, 0x19, 0xed, 0x4d, 0x2b, 0xd8, 0x9d, 0xf2, 0x8f, 0x33, 0x1a, 0xdf, 0x45, 0xf5, 0x5e,
	0x36, 0x43, 0x14, 0xf7, 0x21, 0xfe, 0xa8, 0x86, 0xa9, 0x5b, 0x36, 0x29, 0xff, 0x5b, 0xfc, 0x89,
	0x85, 0xf1, 0x07, 0xb4, 0x32, 0x95, 0x1a, 0x83, 0xdd, 0x85, 0x86, 0xd3, 0x5c, 0xda, 0x6e, 0xf9,
	0x7f, 0xde, 0xa1, 0x7f, 0x81, 0x55, 0x3b, 0xe5, 0xc3, 0x6f, 0xb7, 0x0b, 0xe1, 0x72, 0x2f, 0x6f,
	0xdf, 0x06, 0x42, 0x71, 0x9f, 0x70, 0x0e, 0xc9, 0x64, 0xfe, 0x4a, 0x36, 0xbf, 0x45, 0xda, 0x14,
	0xdf, 0x40, 0x95, 0xae, 0x14, 0x07, 0xc0, 0xdd, 0x45, 0x63, 0xa9, 0x8d, 0xf0, 0x1d, 0xb4, 0xd2,
	0x81, 0xb8, 0xdf, 0xda, 0x8e, 0x06, 0x12, 0xba, 0x6c, 0xe4, 0x56, 0x4d, 0xe6, 0x72, 0x06, 0xbe,
	0x33, 0x18, 0x5e, 0x45, 0x0b, 0x24, 0x61, 0x44, 0xb9, 0x35, 0x43, 0x66, 0xc1, 0x64, 0x61, 0x12,
	0x7a, 0x4c, 0x69, 0x90, 0x40, 0x23, 0x0a, 0x5c, 0xa4, 0xca, 0x45, 0x8d, 0x52, 0xb3, 0x16, 0xd6,
	0x4f, 0x89, 0xa7, 0x06, 0xc7, 0xaf, 0x51, 0x75, 0x7a, 0x06, 0xee, 0x92, 0x99, 0x3c, 0xf8, 0xcb,
	0xc9, 0xdf, 0xd8, 0xb4, 0x70, 0x56, 0x60, 0xf3, 0x4b, 0x11, 0xb9, 0xef, 0x07, 0x94, 0x68, 0xb0,
	0x9a, 0x36, 0xef, 0x0a, 0x99, 0x12, 0xcd, 0x04, 0xcf, 0x6f, 0xda, 0x39, 0xbb, 0xe9, 0xb3, 0x27,
	0x52, 0xfc, 0xfd, 0x44, 0xae, 0x72, 0x08, 0x33, 0x87, 0xca, 0x79, 0x87, 0x2e, 0x3a, 0x8f, 0x85,
	0x8b, 0xcf, 0x23, 0xef, 0x4f, 0xe5, 0xaa, 0xfe, 0xfc, 0x74, 0xd0, 0x7f, 0x96, 0xdd, 0x1d, 0xa6,
	0x29, 0x91, 0x63, 0x7c, 0x0b, 0x9d, 0x4e, 0x7a, 0xfe, 0xdf, 0xb1, 0x87, 0xea, 0x09, 0xd1, 0xa0,
	0xb4, 0xb9, 0xa5, 0x36, 0xa7, 0x30, 0x32, 0xfe, 0x2c, 0x6d, 0xfb, 0xf3, 0x7e, 0x85, 0xcd, 0xe8,
	0x0a, 0x93, 0x15, 0x9e, 0xab, 0x83, 0x13, 0xb4, 0x96, 0x61, 0xcf, 0x19, 0x27, 0x09, 0x3b, 0x00,
	0x9a, 0x6b, 0x52, 0xfa, 0xa7, 0x26, 0x97, 0x17, 0xdc, 0x79, 0x7b, 0x78, 0xec, 0x39, 0x47, 0xc7,
	0x9e, 0xf3, 0xfd, 0xd8, 0x73, 0x3e, 0x9f, 0x78, 0x85, 0xa3, 0x13, 0xaf, 0xf0, 0xf5, 0xc4, 0x2b,
	0xec, 0x3d, 0xec, 0x31, 0xdd, 0x1f, 0x76, 0xfc, 0x58, 0xa4, 0x97, 0xbd, 0x80, 0xfb, 0xad, 0x60,
	0x34, 0x7b, 0xb5, 0xf4, 0x78, 0x00, 0xaa, 0x53, 0x31, 0x6f, 0x56, 0xeb, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x68, 0xe1, 0xbe, 0x49, 0x99, 0x05, 0x00, 0x00,
}

func (m *RollappGenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollappGenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollappGenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransfersEnabled {
		i--
		if m.TransfersEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Rollapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rollapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rollapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollapp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RegisteredDenoms) > 0 {
		for iNdEx := len(m.RegisteredDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RegisteredDenoms[iNdEx])
			copy(dAtA[i:], m.RegisteredDenoms[iNdEx])
			i = encodeVarintRollapp(dAtA, i, uint64(len(m.RegisteredDenoms[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Bech32Prefix) > 0 {
		i -= len(m.Bech32Prefix)
		copy(dAtA[i:], m.Bech32Prefix)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.Bech32Prefix)))
		i--
		dAtA[i] = 0x42
	}
	if m.Frozen {
		i--
		if m.Frozen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.GenesisState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRollapp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.GenesisChecksum) > 0 {
		i -= len(m.GenesisChecksum)
		copy(dAtA[i:], m.GenesisChecksum)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.GenesisChecksum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InitialSequencerAddress) > 0 {
		i -= len(m.InitialSequencerAddress)
		copy(dAtA[i:], m.InitialSequencerAddress)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.InitialSequencerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRollappInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRollappInformation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRollappInformation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollapp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.GenesisChecksum) > 0 {
		i -= len(m.GenesisChecksum)
		copy(dAtA[i:], m.GenesisChecksum)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.GenesisChecksum)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InitialSequencerAddress) > 0 {
		i -= len(m.InitialSequencerAddress)
		copy(dAtA[i:], m.InitialSequencerAddress)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.InitialSequencerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollappSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollappSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollappSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestFinalizedStateIndex != nil {
		{
			size, err := m.LatestFinalizedStateIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollapp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LatestStateIndex != nil {
		{
			size, err := m.LatestStateIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollapp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRollapp(dAtA []byte, offset int, v uint64) int {
	offset -= sovRollapp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RollappGenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransfersEnabled {
		n += 2
	}
	return n
}

func (m *Rollapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = len(m.InitialSequencerAddress)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = len(m.GenesisChecksum)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = m.GenesisState.Size()
	n += 1 + l + sovRollapp(uint64(l))
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	if m.Frozen {
		n += 2
	}
	l = len(m.Bech32Prefix)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	if len(m.RegisteredDenoms) > 0 {
		for _, s := range m.RegisteredDenoms {
			l = len(s)
			n += 1 + l + sovRollapp(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRollapp(uint64(l))
	}
	return n
}

func (m *UpdateRollappInformation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = len(m.InitialSequencerAddress)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = len(m.GenesisChecksum)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRollapp(uint64(l))
	}
	return n
}

func (m *RollappSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	if m.LatestStateIndex != nil {
		l = m.LatestStateIndex.Size()
		n += 1 + l + sovRollapp(uint64(l))
	}
	if m.LatestFinalizedStateIndex != nil {
		l = m.LatestFinalizedStateIndex.Size()
		n += 1 + l + sovRollapp(uint64(l))
	}
	return n
}

func sovRollapp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRollapp(x uint64) (n int) {
	return sovRollapp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RollappGenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollappGenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollappGenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransfersEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransfersEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRollapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rollapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rollapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rollapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialSequencerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialSequencerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenesisState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Frozen = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredDenoms = append(m.RegisteredDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &RollappMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRollappInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRollappInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRollappInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialSequencerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialSequencerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &RollappMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollappSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollappSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollappSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestStateIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestStateIndex == nil {
				m.LatestStateIndex = &StateInfoIndex{}
			}
			if err := m.LatestStateIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFinalizedStateIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestFinalizedStateIndex == nil {
				m.LatestFinalizedStateIndex = &StateInfoIndex{}
			}
			if err := m.LatestFinalizedStateIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollapp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRollapp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRollapp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRollapp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRollapp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollapp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRollapp = fmt.Errorf("proto: unexpected end of group")
)
