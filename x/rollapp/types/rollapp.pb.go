// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/rollapp/rollapp.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Rollapp_VMType int32

const (
	Rollapp_Unspecified Rollapp_VMType = 0
	Rollapp_EVM         Rollapp_VMType = 1
	Rollapp_WASM        Rollapp_VMType = 2
)

var Rollapp_VMType_name = map[int32]string{
	0: "Unspecified",
	1: "EVM",
	2: "WASM",
}

var Rollapp_VMType_value = map[string]int32{
	"Unspecified": 0,
	"EVM":         1,
	"WASM":        2,
}

func (x Rollapp_VMType) String() string {
	return proto.EnumName(Rollapp_VMType_name, int32(x))
}

func (Rollapp_VMType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d4ef2bec3aea5528, []int{1, 0}
}

// RollappGenesisState is a partial repr of the state the hub can expect the
// rollapp to be in upon genesis
type RollappGenesisState struct {
	// 0 means unpopulated
	// If populated, it's the proof height that the hub received the genesis transfer
	// packet from the rollapp. If populated, the bridge is considered open. It's not allowed
	// to fork to a height prior to this height.
	TransferProofHeight uint64 `protobuf:"varint,3,opt,name=transfer_proof_height,json=transferProofHeight,proto3" json:"transfer_proof_height,omitempty"`
	// Deprecated: Do not use. Replaced by transfer_proof_height.
	// This used to mark the bridge as open, before we also needed the proof height.
	//  If true, then full usage of the canonical ibc transfer channel is enabled.
	//  Note: in v3.1.0 and prior this field marked the completion of the 'genesis
	//  event' Keeping and renaming the field enables a seamless upgrade
	//  https://www.notion.so/dymension/ADR-x-Genesis-Bridge-Phase-2-89769aa551b5440b9ed403a101775ce1?pvs=4#89698384d815435b87393dbe45bc5a74
	//  to the new genesis transfer protocol
	//  Note: if this field is false, ibc transfers may still be allowed in one or
	//  either direction.
	TransfersEnabled bool `protobuf:"varint,2,opt,name=transfers_enabled,json=transfersEnabled,proto3" json:"transfers_enabled,omitempty"` // Deprecated: Do not use.
}

func (m *RollappGenesisState) Reset()         { *m = RollappGenesisState{} }
func (m *RollappGenesisState) String() string { return proto.CompactTextString(m) }
func (*RollappGenesisState) ProtoMessage()    {}
func (*RollappGenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ef2bec3aea5528, []int{0}
}
func (m *RollappGenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollappGenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollappGenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollappGenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollappGenesisState.Merge(m, src)
}
func (m *RollappGenesisState) XXX_Size() int {
	return m.Size()
}
func (m *RollappGenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_RollappGenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_RollappGenesisState proto.InternalMessageInfo

func (m *RollappGenesisState) GetTransferProofHeight() uint64 {
	if m != nil {
		return m.TransferProofHeight
	}
	return 0
}

// Deprecated: Do not use.
func (m *RollappGenesisState) GetTransfersEnabled() bool {
	if m != nil {
		return m.TransfersEnabled
	}
	return false
}

// Rollapp defines a rollapp object. First, the RollApp is created and then
// sequencers can be created and attached. The RollApp is identified by
// rollappId
type Rollapp struct {
	// The unique identifier of the rollapp chain.
	// The rollapp_id follows the same standard as cosmos chain_id.
	RollappId string `protobuf:"bytes,1,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// owner is the bech32-encoded address of the rollapp owner.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// genesis_state is a partial repr of the state the hub can expect the rollapp
	// to be in upon genesis
	GenesisState RollappGenesisState `protobuf:"bytes,7,opt,name=genesis_state,json=genesisState,proto3" json:"genesis_state"`
	// channel_id will be set to the canonical IBC channel of the rollapp.
	ChannelId string `protobuf:"bytes,8,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// metadata is the rollapp metadata
	Metadata *RollappMetadata `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// genesis_info keeps immutable rollapp fields
	GenesisInfo GenesisInfo `protobuf:"bytes,12,opt,name=genesis_info,json=genesisInfo,proto3" json:"genesis_info"`
	// initial_sequencer is an option to preset one or more coma-separated
	// bech32-encoded addresses of the sequencer(s) that are allowed to initially
	// register and serve for this rollapp. if left empty, no sequencer is allowed
	// to register. if set to "*" any sequencer can register.
	InitialSequencer string `protobuf:"bytes,13,opt,name=initial_sequencer,json=initialSequencer,proto3" json:"initial_sequencer,omitempty"`
	// vm_type is the type of rollapp machine: EVM or WASM
	VmType Rollapp_VMType `protobuf:"varint,14,opt,name=vm_type,json=vmType,proto3,enum=dymensionxyz.dymension.rollapp.Rollapp_VMType" json:"vm_type,omitempty"`
	// launched is a boolean that indicates that the Rollapp has been launched and
	// the immutable fields are no longer updatable.
	Launched bool `protobuf:"varint,15,opt,name=launched,proto3" json:"launched,omitempty"`
	// pre_launch_time is the timestamp indicating the time before which the
	// rollapp cannot be started.
	// Set when creating IRO plan for the rollapp
	PreLaunchTime *time.Time `protobuf:"bytes,16,opt,name=pre_launch_time,json=preLaunchTime,proto3,stdtime" json:"pre_launch_time,omitempty"`
	// LivenessEventHeight is the height on the HUB of an upcoming liveness event (slash or
	// jail against the rollapp). 0 means not set
	LivenessEventHeight int64 `protobuf:"varint,17,opt,name=liveness_event_height,json=livenessEventHeight,proto3" json:"liveness_event_height,omitempty"`
	// The height on the HUB that we start counting liveness from. If the rollapp is not active
	// for a long time after this height, a liveness event will happen.
	LivenessCountdownStartHeight int64 `protobuf:"varint,18,opt,name=liveness_countdown_start_height,json=livenessCountdownStartHeight,proto3" json:"liveness_countdown_start_height,omitempty"`
	// Revisions is a list of all the rollapp revisions.
	Revisions []Revision `protobuf:"bytes,19,rep,name=revisions,proto3" json:"revisions"`
}

func (m *Rollapp) Reset()         { *m = Rollapp{} }
func (m *Rollapp) String() string { return proto.CompactTextString(m) }
func (*Rollapp) ProtoMessage()    {}
func (*Rollapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ef2bec3aea5528, []int{1}
}
func (m *Rollapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rollapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rollapp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rollapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rollapp.Merge(m, src)
}
func (m *Rollapp) XXX_Size() int {
	return m.Size()
}
func (m *Rollapp) XXX_DiscardUnknown() {
	xxx_messageInfo_Rollapp.DiscardUnknown(m)
}

var xxx_messageInfo_Rollapp proto.InternalMessageInfo

func (m *Rollapp) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *Rollapp) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Rollapp) GetGenesisState() RollappGenesisState {
	if m != nil {
		return m.GenesisState
	}
	return RollappGenesisState{}
}

func (m *Rollapp) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *Rollapp) GetMetadata() *RollappMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Rollapp) GetGenesisInfo() GenesisInfo {
	if m != nil {
		return m.GenesisInfo
	}
	return GenesisInfo{}
}

func (m *Rollapp) GetInitialSequencer() string {
	if m != nil {
		return m.InitialSequencer
	}
	return ""
}

func (m *Rollapp) GetVmType() Rollapp_VMType {
	if m != nil {
		return m.VmType
	}
	return Rollapp_Unspecified
}

func (m *Rollapp) GetLaunched() bool {
	if m != nil {
		return m.Launched
	}
	return false
}

func (m *Rollapp) GetPreLaunchTime() *time.Time {
	if m != nil {
		return m.PreLaunchTime
	}
	return nil
}

func (m *Rollapp) GetLivenessEventHeight() int64 {
	if m != nil {
		return m.LivenessEventHeight
	}
	return 0
}

func (m *Rollapp) GetLivenessCountdownStartHeight() int64 {
	if m != nil {
		return m.LivenessCountdownStartHeight
	}
	return 0
}

func (m *Rollapp) GetRevisions() []Revision {
	if m != nil {
		return m.Revisions
	}
	return nil
}

// Revision is a representation of the rollapp revision.
type Revision struct {
	// Number is the revision number of the rollapp. Always start with 0 revision.
	Number uint64 `protobuf:"varint,19,opt,name=number,proto3" json:"number,omitempty"`
	// StartHeight is the first height of the rollapp when the revision started.
	StartHeight uint64 `protobuf:"varint,20,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
}

func (m *Revision) Reset()         { *m = Revision{} }
func (m *Revision) String() string { return proto.CompactTextString(m) }
func (*Revision) ProtoMessage()    {}
func (*Revision) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ef2bec3aea5528, []int{2}
}
func (m *Revision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Revision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Revision.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Revision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Revision.Merge(m, src)
}
func (m *Revision) XXX_Size() int {
	return m.Size()
}
func (m *Revision) XXX_DiscardUnknown() {
	xxx_messageInfo_Revision.DiscardUnknown(m)
}

var xxx_messageInfo_Revision proto.InternalMessageInfo

func (m *Revision) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Revision) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

// Rollapp summary is a compact representation of Rollapp
type RollappSummary struct {
	// The unique identifier of the rollapp chain.
	// The rollappId follows the same standard as cosmos chain_id.
	RollappId string `protobuf:"bytes,1,opt,name=rollappId,proto3" json:"rollappId,omitempty"`
	// Defines the index of the last rollapp UpdateState.
	LatestStateIndex *StateInfoIndex `protobuf:"bytes,2,opt,name=latestStateIndex,proto3" json:"latestStateIndex,omitempty"`
	// Defines the index of the last rollapp UpdateState that was finalized.
	LatestFinalizedStateIndex *StateInfoIndex `protobuf:"bytes,3,opt,name=latestFinalizedStateIndex,proto3" json:"latestFinalizedStateIndex,omitempty"`
	LatestHeight              uint64          `protobuf:"varint,4,opt,name=latestHeight,proto3" json:"latestHeight,omitempty"`
	LatestFinalizedHeight     uint64          `protobuf:"varint,5,opt,name=latestFinalizedHeight,proto3" json:"latestFinalizedHeight,omitempty"`
}

func (m *RollappSummary) Reset()         { *m = RollappSummary{} }
func (m *RollappSummary) String() string { return proto.CompactTextString(m) }
func (*RollappSummary) ProtoMessage()    {}
func (*RollappSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ef2bec3aea5528, []int{3}
}
func (m *RollappSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollappSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollappSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollappSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollappSummary.Merge(m, src)
}
func (m *RollappSummary) XXX_Size() int {
	return m.Size()
}
func (m *RollappSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RollappSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RollappSummary proto.InternalMessageInfo

func (m *RollappSummary) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *RollappSummary) GetLatestStateIndex() *StateInfoIndex {
	if m != nil {
		return m.LatestStateIndex
	}
	return nil
}

func (m *RollappSummary) GetLatestFinalizedStateIndex() *StateInfoIndex {
	if m != nil {
		return m.LatestFinalizedStateIndex
	}
	return nil
}

func (m *RollappSummary) GetLatestHeight() uint64 {
	if m != nil {
		return m.LatestHeight
	}
	return 0
}

func (m *RollappSummary) GetLatestFinalizedHeight() uint64 {
	if m != nil {
		return m.LatestFinalizedHeight
	}
	return 0
}

func init() {
	proto.RegisterEnum("dymensionxyz.dymension.rollapp.Rollapp_VMType", Rollapp_VMType_name, Rollapp_VMType_value)
	proto.RegisterType((*RollappGenesisState)(nil), "dymensionxyz.dymension.rollapp.RollappGenesisState")
	proto.RegisterType((*Rollapp)(nil), "dymensionxyz.dymension.rollapp.Rollapp")
	proto.RegisterType((*Revision)(nil), "dymensionxyz.dymension.rollapp.Revision")
	proto.RegisterType((*RollappSummary)(nil), "dymensionxyz.dymension.rollapp.RollappSummary")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/rollapp/rollapp.proto", fileDescriptor_d4ef2bec3aea5528)
}

var fileDescriptor_d4ef2bec3aea5528 = []byte{
	// 810 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x25, 0x46, 0xa2, 0x46, 0xb2, 0x4d, 0xaf, 0x9c, 0x96, 0x15, 0x12, 0x59, 0xd5, 0x49,
	0x40, 0x52, 0x12, 0xb1, 0xf3, 0x02, 0x75, 0xa1, 0x26, 0x76, 0xe3, 0xa2, 0xa0, 0xdc, 0x14, 0xc8,
	0xa1, 0x04, 0x25, 0xae, 0xa8, 0x05, 0xc8, 0x5d, 0x96, 0xbb, 0x52, 0xac, 0x9c, 0xfa, 0x08, 0x79,
	0xa9, 0x02, 0x39, 0x06, 0x3d, 0xf5, 0xd4, 0x16, 0xf6, 0x8b, 0x14, 0xbb, 0x5c, 0x4a, 0x4a, 0x93,
	0x54, 0x41, 0x4f, 0xf4, 0xcc, 0x37, 0xf3, 0xcd, 0xcf, 0xce, 0x67, 0xc1, 0xc3, 0x68, 0x95, 0x62,
	0xca, 0x09, 0xa3, 0xd7, 0xab, 0x57, 0xde, 0xda, 0xf0, 0x72, 0x96, 0x24, 0x61, 0x96, 0x95, 0x5f,
	0x37, 0xcb, 0x99, 0x60, 0xa8, 0xb7, 0x1d, 0xed, 0xae, 0x0d, 0x57, 0x47, 0x75, 0x8f, 0x62, 0x16,
	0x33, 0x15, 0xea, 0xc9, 0xbf, 0x8a, 0xac, 0xee, 0x71, 0xcc, 0x58, 0x9c, 0x60, 0x4f, 0x59, 0x93,
	0xc5, 0xcc, 0x13, 0x24, 0xc5, 0x5c, 0x84, 0xa9, 0xa6, 0xed, 0x7e, 0x3e, 0x65, 0x3c, 0x65, 0xdc,
	0x4b, 0x79, 0xec, 0x2d, 0x1f, 0xc9, 0x8f, 0x06, 0xbc, 0x1d, 0xdd, 0x71, 0x11, 0x0a, 0x1c, 0x10,
	0x3a, 0x2b, 0x4b, 0x7d, 0xb5, 0x23, 0x21, 0xc5, 0x22, 0x8c, 0x42, 0x11, 0xea, 0xf0, 0x47, 0x3b,
	0xc2, 0x63, 0x4c, 0x31, 0x27, 0x7c, 0xab, 0xc2, 0xe0, 0x57, 0x03, 0x3a, 0x7e, 0x01, 0x3f, 0x29,
	0xd0, 0xb1, 0x6c, 0x02, 0x9d, 0xc0, 0x5d, 0x91, 0x87, 0x94, 0xcf, 0x70, 0x1e, 0x64, 0x39, 0x63,
	0xb3, 0x60, 0x8e, 0x49, 0x3c, 0x17, 0x4e, 0xad, 0x6f, 0x0c, 0x4d, 0xbf, 0x53, 0x82, 0x3f, 0x48,
	0xec, 0xa9, 0x82, 0x90, 0x07, 0x87, 0xa5, 0x9b, 0x07, 0x98, 0x86, 0x93, 0x04, 0x47, 0x4e, 0xb5,
	0x6f, 0x0c, 0xad, 0xb3, 0xaa, 0x63, 0xf8, 0xf6, 0x1a, 0x1c, 0x15, 0xd8, 0x85, 0x69, 0x19, 0x76,
	0x75, 0xf0, 0x5b, 0x1d, 0x1a, 0xba, 0x05, 0x74, 0x1f, 0x40, 0x37, 0x1b, 0x90, 0xc8, 0x31, 0xfa,
	0xc6, 0xb0, 0xe9, 0x37, 0xb5, 0xe7, 0x3c, 0x42, 0x47, 0x70, 0x87, 0xbd, 0xa4, 0x38, 0x57, 0xac,
	0x4d, 0xbf, 0x30, 0xd0, 0xcf, 0xb0, 0x57, 0x4e, 0xa6, 0x36, 0xe8, 0x34, 0xfa, 0xc6, 0xb0, 0x75,
	0x72, 0xea, 0xfe, 0xf7, 0xf3, 0xba, 0x1f, 0x98, 0xfb, 0xcc, 0x7c, 0xf3, 0xe7, 0x71, 0xc5, 0x6f,
	0xc7, 0xdb, 0xbb, 0xb8, 0x0f, 0x30, 0x9d, 0x87, 0x94, 0xe2, 0x44, 0x36, 0x65, 0x15, 0x4d, 0x69,
	0xcf, 0x79, 0x84, 0xbe, 0x03, 0xab, 0x7c, 0x07, 0xa7, 0xa5, 0x2a, 0x7b, 0x9f, 0x58, 0xf9, 0x52,
	0xa7, 0xf9, 0x6b, 0x02, 0x74, 0x05, 0xed, 0xed, 0x57, 0x72, 0xda, 0x8a, 0xf0, 0xc1, 0x2e, 0x42,
	0x3d, 0xc3, 0x39, 0x9d, 0x31, 0x3d, 0x42, 0x2b, 0xde, 0xb8, 0xd0, 0x03, 0x38, 0x24, 0x94, 0x08,
	0x12, 0x26, 0x01, 0xc7, 0xbf, 0x2c, 0x30, 0x9d, 0xe2, 0xdc, 0xd9, 0x53, 0x83, 0xd8, 0x1a, 0x18,
	0x97, 0x7e, 0xf4, 0x04, 0x1a, 0xcb, 0x34, 0x10, 0xab, 0x0c, 0x3b, 0xfb, 0x7d, 0x63, 0xb8, 0x7f,
	0xe2, 0x7e, 0xe2, 0x38, 0xee, 0xf3, 0xcb, 0xab, 0x55, 0x86, 0xfd, 0xfa, 0x32, 0x95, 0x5f, 0xd4,
	0x05, 0x2b, 0x09, 0x17, 0x74, 0x3a, 0xc7, 0x91, 0x73, 0x20, 0xcf, 0xc0, 0x5f, 0xdb, 0xe8, 0x29,
	0x1c, 0x64, 0x39, 0x0e, 0x0a, 0x3b, 0x90, 0x0a, 0x72, 0x6c, 0x35, 0x6a, 0xd7, 0x2d, 0xe4, 0xe5,
	0x96, 0xf2, 0x72, 0xaf, 0x4a, 0x79, 0x9d, 0x99, 0xaf, 0xff, 0x3a, 0x36, 0xfc, 0xbd, 0x2c, 0xc7,
	0xcf, 0x54, 0x9e, 0x44, 0xe4, 0xa5, 0x26, 0x64, 0x29, 0x87, 0xe5, 0x01, 0x5e, 0x62, 0x2a, 0xca,
	0x4b, 0x3d, 0xec, 0x1b, 0xc3, 0x9a, 0xdf, 0x29, 0xc1, 0x91, 0xc4, 0xf4, 0xa5, 0x8e, 0xe0, 0x78,
	0x9d, 0x33, 0x65, 0x0b, 0x2a, 0x22, 0xf6, 0x92, 0xca, 0xe3, 0xc9, 0xd7, 0xd9, 0x48, 0x65, 0xdf,
	0x2b, 0xc3, 0xbe, 0x29, 0xa3, 0xc6, 0x32, 0x48, 0xd3, 0x3c, 0x83, 0x66, 0x8e, 0x97, 0x44, 0xee,
	0x82, 0x3b, 0x9d, 0x7e, 0x6d, 0xd8, 0x3a, 0x19, 0xee, 0xdc, 0x95, 0x4e, 0xd0, 0xcf, 0xb4, 0x21,
	0x18, 0x3c, 0x84, 0x7a, 0xb1, 0x40, 0x74, 0x00, 0xad, 0x1f, 0x29, 0xcf, 0xf0, 0x94, 0xcc, 0x08,
	0x8e, 0xec, 0x0a, 0x6a, 0x40, 0x6d, 0xf4, 0xfc, 0xd2, 0x36, 0x90, 0x05, 0xe6, 0x4f, 0x5f, 0x8f,
	0x2f, 0xed, 0xea, 0x85, 0x69, 0xd5, 0xec, 0xc6, 0x85, 0x69, 0x35, 0x6d, 0xb8, 0x30, 0x2d, 0xb0,
	0x5b, 0x83, 0x11, 0x58, 0x25, 0x39, 0xfa, 0x0c, 0xea, 0x74, 0x91, 0x4e, 0x70, 0xee, 0x74, 0x94,
	0x5e, 0xb5, 0x85, 0xbe, 0x84, 0xf6, 0x3b, 0x53, 0x1e, 0x29, 0xb4, 0xc5, 0x37, 0x43, 0x0d, 0x7e,
	0xaf, 0xc2, 0xbe, 0x7e, 0xd0, 0xf1, 0x22, 0x4d, 0xc3, 0x7c, 0x85, 0xee, 0xc1, 0x46, 0x83, 0xef,
	0x8b, 0xf2, 0x05, 0xd8, 0x49, 0x28, 0x30, 0x17, 0x4a, 0x2d, 0xe7, 0x34, 0xc2, 0xd7, 0x4a, 0x9f,
	0xad, 0xdd, 0x87, 0xa3, 0x33, 0x66, 0x4c, 0x65, 0xf9, 0xef, 0xf1, 0xa0, 0x04, 0xbe, 0x28, 0x7c,
	0xdf, 0x12, 0x1a, 0x26, 0xe4, 0x15, 0x8e, 0xb6, 0x8a, 0xd4, 0xfe, 0x57, 0x91, 0x8f, 0x13, 0xa2,
	0x01, 0xb4, 0x0b, 0xb0, 0x58, 0x85, 0x63, 0xaa, 0xed, 0xbc, 0xe3, 0x43, 0x8f, 0xe1, 0xee, 0xbf,
	0x08, 0x74, 0xf0, 0x1d, 0x15, 0xfc, 0x61, 0xf0, 0xec, 0xfb, 0x37, 0x37, 0x3d, 0xe3, 0xed, 0x4d,
	0xcf, 0xf8, 0xfb, 0xa6, 0x67, 0xbc, 0xbe, 0xed, 0x55, 0xde, 0xde, 0xf6, 0x2a, 0x7f, 0xdc, 0xf6,
	0x2a, 0x2f, 0x1e, 0xc7, 0x44, 0xcc, 0x17, 0x13, 0x77, 0xca, 0xd2, 0x8f, 0xfd, 0x3c, 0x2c, 0x4f,
	0xbd, 0xeb, 0xf5, 0xff, 0x70, 0xa9, 0x4b, 0x3e, 0xa9, 0x2b, 0x75, 0x9c, 0xfe, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x33, 0xc3, 0x80, 0x36, 0xf0, 0x06, 0x00, 0x00,
}

func (m *RollappGenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollappGenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollappGenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransferProofHeight != 0 {
		i = encodeVarintRollapp(dAtA, i, uint64(m.TransferProofHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.TransfersEnabled {
		i--
		if m.TransfersEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Rollapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rollapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rollapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Revisions) > 0 {
		for iNdEx := len(m.Revisions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Revisions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRollapp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.LivenessCountdownStartHeight != 0 {
		i = encodeVarintRollapp(dAtA, i, uint64(m.LivenessCountdownStartHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.LivenessEventHeight != 0 {
		i = encodeVarintRollapp(dAtA, i, uint64(m.LivenessEventHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PreLaunchTime != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.PreLaunchTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.PreLaunchTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintRollapp(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Launched {
		i--
		if m.Launched {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.VmType != 0 {
		i = encodeVarintRollapp(dAtA, i, uint64(m.VmType))
		i--
		dAtA[i] = 0x70
	}
	if len(m.InitialSequencer) > 0 {
		i -= len(m.InitialSequencer)
		copy(dAtA[i:], m.InitialSequencer)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.InitialSequencer)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size, err := m.GenesisInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRollapp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollapp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x42
	}
	{
		size, err := m.GenesisState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRollapp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Revision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Revision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Revision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartHeight != 0 {
		i = encodeVarintRollapp(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Number != 0 {
		i = encodeVarintRollapp(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *RollappSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollappSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollappSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestFinalizedHeight != 0 {
		i = encodeVarintRollapp(dAtA, i, uint64(m.LatestFinalizedHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.LatestHeight != 0 {
		i = encodeVarintRollapp(dAtA, i, uint64(m.LatestHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.LatestFinalizedStateIndex != nil {
		{
			size, err := m.LatestFinalizedStateIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollapp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LatestStateIndex != nil {
		{
			size, err := m.LatestStateIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollapp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintRollapp(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRollapp(dAtA []byte, offset int, v uint64) int {
	offset -= sovRollapp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RollappGenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransfersEnabled {
		n += 2
	}
	if m.TransferProofHeight != 0 {
		n += 1 + sovRollapp(uint64(m.TransferProofHeight))
	}
	return n
}

func (m *Rollapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = m.GenesisState.Size()
	n += 1 + l + sovRollapp(uint64(l))
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRollapp(uint64(l))
	}
	l = m.GenesisInfo.Size()
	n += 1 + l + sovRollapp(uint64(l))
	l = len(m.InitialSequencer)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	if m.VmType != 0 {
		n += 1 + sovRollapp(uint64(m.VmType))
	}
	if m.Launched {
		n += 2
	}
	if m.PreLaunchTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.PreLaunchTime)
		n += 2 + l + sovRollapp(uint64(l))
	}
	if m.LivenessEventHeight != 0 {
		n += 2 + sovRollapp(uint64(m.LivenessEventHeight))
	}
	if m.LivenessCountdownStartHeight != 0 {
		n += 2 + sovRollapp(uint64(m.LivenessCountdownStartHeight))
	}
	if len(m.Revisions) > 0 {
		for _, e := range m.Revisions {
			l = e.Size()
			n += 2 + l + sovRollapp(uint64(l))
		}
	}
	return n
}

func (m *Revision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 2 + sovRollapp(uint64(m.Number))
	}
	if m.StartHeight != 0 {
		n += 2 + sovRollapp(uint64(m.StartHeight))
	}
	return n
}

func (m *RollappSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovRollapp(uint64(l))
	}
	if m.LatestStateIndex != nil {
		l = m.LatestStateIndex.Size()
		n += 1 + l + sovRollapp(uint64(l))
	}
	if m.LatestFinalizedStateIndex != nil {
		l = m.LatestFinalizedStateIndex.Size()
		n += 1 + l + sovRollapp(uint64(l))
	}
	if m.LatestHeight != 0 {
		n += 1 + sovRollapp(uint64(m.LatestHeight))
	}
	if m.LatestFinalizedHeight != 0 {
		n += 1 + sovRollapp(uint64(m.LatestFinalizedHeight))
	}
	return n
}

func sovRollapp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRollapp(x uint64) (n int) {
	return sovRollapp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RollappGenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollappGenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollappGenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransfersEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransfersEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferProofHeight", wireType)
			}
			m.TransferProofHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransferProofHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRollapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rollapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rollapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rollapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenesisState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &RollappMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenesisInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialSequencer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialSequencer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmType", wireType)
			}
			m.VmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmType |= Rollapp_VMType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Launched", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Launched = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreLaunchTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreLaunchTime == nil {
				m.PreLaunchTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.PreLaunchTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessEventHeight", wireType)
			}
			m.LivenessEventHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivenessEventHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessCountdownStartHeight", wireType)
			}
			m.LivenessCountdownStartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivenessCountdownStartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revisions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revisions = append(m.Revisions, Revision{})
			if err := m.Revisions[len(m.Revisions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Revision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Revision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Revision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRollapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollappSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollappSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollappSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestStateIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestStateIndex == nil {
				m.LatestStateIndex = &StateInfoIndex{}
			}
			if err := m.LatestStateIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFinalizedStateIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestFinalizedStateIndex == nil {
				m.LatestFinalizedStateIndex = &StateInfoIndex{}
			}
			if err := m.LatestFinalizedStateIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			m.LatestHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFinalizedHeight", wireType)
			}
			m.LatestFinalizedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestFinalizedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRollapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollapp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollapp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollapp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRollapp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRollapp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRollapp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRollapp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollapp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRollapp = fmt.Errorf("proto: unexpected end of group")
)
