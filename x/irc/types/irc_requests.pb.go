// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymension/irc/irc_requests.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgType is the type of the intercepted IBC message.
type MsgType int32

const (
	// UNSPECIFIED defines an invalid validator status.
	Unspecified           MsgType = 0
	CreateClient          MsgType = 1
	UpdateClient          MsgType = 2
	UpgradeClient         MsgType = 3
	SubmitMisbehaviour    MsgType = 4
	ConnectionOpenInit    MsgType = 5
	ConnectionOpenTry     MsgType = 6
	ConnectionOpenAck     MsgType = 7
	ConnectionOpenConfirm MsgType = 8
	ChannelOpenInit       MsgType = 9
	ChannelOpenTry        MsgType = 10
	ChannelOpenAck        MsgType = 11
	ChannelOpenConfirm    MsgType = 12
	ChannelCloseInit      MsgType = 13
	ChannelCloseConfirm   MsgType = 14
	RecvPacket            MsgType = 15
	Timeout               MsgType = 16
	TimeoutOnClose        MsgType = 17
	Acknowledgement       MsgType = 18
)

var MsgType_name = map[int32]string{
	0:  "MSG_TYPE_UNSPECIFIED",
	1:  "MSG_TYPE_CREATE_CLIENT",
	2:  "MSG_TYPE_UPDATE_CLIENT",
	3:  "MSG_TYPE_UPGRADE_CLIENT",
	4:  "MSG_TYPE_SUBMIT_MISBEHAVIOUR",
	5:  "MSG_TYPE_CONNECTION_OPEN_INIT",
	6:  "MSG_TYPE_CONNECTION_OPEN_TRY",
	7:  "MSG_TYPE_CONNECTION_OPEN_ACK",
	8:  "MSG_TYPE_CONNECTION_OPEN_CONFIRM",
	9:  "MSG_TYPE_CHANNEL_OPEN_INIT",
	10: "MSG_TYPE_CHANNEL_OPEN_TRY",
	11: "MSG_TYPE_CHANNEL_OPEN_ACK",
	12: "MSG_TYPE_CHANNEL_OPEN_CONFIRM",
	13: "MSG_TYPE_CHANNEL_CLOSE_INIT",
	14: "MSG_TYPE_CHANNEL_CLOSE_CONFIRM",
	15: "MSG_TYPE_RECV_PACKET",
	16: "MSG_TYPE_TIMEOUT",
	17: "MSG_TYPE_TIMEOUT_ON_CLOSE",
	18: "MSG_TYPE_ACKNOWLEDGEMENT",
}

var MsgType_value = map[string]int32{
	"MSG_TYPE_UNSPECIFIED":             0,
	"MSG_TYPE_CREATE_CLIENT":           1,
	"MSG_TYPE_UPDATE_CLIENT":           2,
	"MSG_TYPE_UPGRADE_CLIENT":          3,
	"MSG_TYPE_SUBMIT_MISBEHAVIOUR":     4,
	"MSG_TYPE_CONNECTION_OPEN_INIT":    5,
	"MSG_TYPE_CONNECTION_OPEN_TRY":     6,
	"MSG_TYPE_CONNECTION_OPEN_ACK":     7,
	"MSG_TYPE_CONNECTION_OPEN_CONFIRM": 8,
	"MSG_TYPE_CHANNEL_OPEN_INIT":       9,
	"MSG_TYPE_CHANNEL_OPEN_TRY":        10,
	"MSG_TYPE_CHANNEL_OPEN_ACK":        11,
	"MSG_TYPE_CHANNEL_OPEN_CONFIRM":    12,
	"MSG_TYPE_CHANNEL_CLOSE_INIT":      13,
	"MSG_TYPE_CHANNEL_CLOSE_CONFIRM":   14,
	"MSG_TYPE_RECV_PACKET":             15,
	"MSG_TYPE_TIMEOUT":                 16,
	"MSG_TYPE_TIMEOUT_ON_CLOSE":        17,
	"MSG_TYPE_ACKNOWLEDGEMENT":         18,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_174363cdec923693, []int{0}
}

// IRCRequest represents a message that was sent to the IBC module by IRC
type IRCRequest struct {
	// reqId is s unique identifier of the request
	ReqId uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	// message is the IBC message to be handled
	Message *types.Any `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// msg_type is the type of the IBC message
	MessageType MsgType `protobuf:"varint,3,opt,name=message_type,json=messageType,proto3,enum=dymensionxyz.dymension.irc.MsgType" json:"message_type,omitempty"`
}

func (m *IRCRequest) Reset()         { *m = IRCRequest{} }
func (m *IRCRequest) String() string { return proto.CompactTextString(m) }
func (*IRCRequest) ProtoMessage()    {}
func (*IRCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_174363cdec923693, []int{0}
}
func (m *IRCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IRCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IRCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IRCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IRCRequest.Merge(m, src)
}
func (m *IRCRequest) XXX_Size() int {
	return m.Size()
}
func (m *IRCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IRCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IRCRequest proto.InternalMessageInfo

func (m *IRCRequest) GetReqId() uint64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *IRCRequest) GetMessage() *types.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *IRCRequest) GetMessageType() MsgType {
	if m != nil {
		return m.MessageType
	}
	return Unspecified
}

func init() {
	proto.RegisterEnum("dymensionxyz.dymension.irc.MsgType", MsgType_name, MsgType_value)
	proto.RegisterType((*IRCRequest)(nil), "dymensionxyz.dymension.irc.IRCRequest")
}

func init() { proto.RegisterFile("dymension/irc/irc_requests.proto", fileDescriptor_174363cdec923693) }

var fileDescriptor_174363cdec923693 = []byte{
	// 775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xc1, 0x6e, 0xdc, 0x44,
	0x18, 0xc7, 0xd7, 0x6d, 0x9a, 0x85, 0xd9, 0x34, 0x71, 0xdc, 0xa4, 0x4d, 0x06, 0xb0, 0x06, 0xb8,
	0x04, 0x44, 0xbd, 0x6a, 0x2b, 0x04, 0xa8, 0x07, 0xe4, 0x4c, 0x26, 0xa9, 0x95, 0xd8, 0x5e, 0x79,
	0xed, 0xa2, 0x72, 0xb1, 0x76, 0xed, 0x89, 0x63, 0x65, 0x3d, 0xb3, 0xb1, 0xbd, 0xa5, 0xcb, 0x13,
	0x20, 0x9f, 0x78, 0x01, 0x9f, 0xb8, 0xf0, 0x00, 0x3c, 0x04, 0xe2, 0xd4, 0x23, 0x47, 0x94, 0x1c,
	0x79, 0x09, 0xe4, 0xb5, 0xd7, 0xeb, 0xa5, 0xd9, 0x1e, 0x2c, 0xcd, 0x37, 0xf3, 0xff, 0xf9, 0xfb,
	0xfe, 0xf3, 0x69, 0x3e, 0x80, 0xfc, 0x69, 0x44, 0x59, 0x12, 0x72, 0xd6, 0x0d, 0x63, 0xaf, 0xf8,
	0xdc, 0x98, 0x5e, 0x4d, 0x68, 0x92, 0x26, 0xca, 0x38, 0xe6, 0x29, 0x97, 0x60, 0xad, 0x78, 0x33,
	0xfd, 0x59, 0xa9, 0x03, 0x25, 0x8c, 0x3d, 0xb8, 0x1f, 0x70, 0x1e, 0x8c, 0x68, 0x77, 0xa6, 0x1c,
	0x4e, 0xce, 0xbb, 0x03, 0x36, 0x2d, 0x31, 0xb8, 0xef, 0xf1, 0x24, 0xe2, 0x89, 0x3b, 0x8b, 0xba,
	0x65, 0x50, 0x1d, 0xed, 0x04, 0x3c, 0xe0, 0xe5, 0x7e, 0xb1, 0x2a, 0x77, 0x3f, 0xfb, 0x5d, 0x00,
	0x40, 0xb3, 0xb0, 0x55, 0x66, 0x97, 0x76, 0xc1, 0x7a, 0x4c, 0xaf, 0xdc, 0xd0, 0xdf, 0x13, 0x90,
	0x70, 0xb0, 0x66, 0xdd, 0x8b, 0xe9, 0x95, 0xe6, 0x4b, 0xcf, 0x41, 0x3b, 0xa2, 0x49, 0x32, 0x08,
	0xe8, 0xde, 0x1d, 0x24, 0x1c, 0x74, 0x9e, 0xee, 0x28, 0x65, 0x0d, 0xca, 0xbc, 0x06, 0x45, 0x65,
	0xd3, 0xc3, 0xce, 0x5f, 0x7f, 0x3c, 0x6e, 0x27, 0xfe, 0xa5, 0xa2, 0x27, 0x81, 0x35, 0x27, 0xa4,
	0x63, 0xb0, 0x51, 0x2d, 0xdd, 0x74, 0x3a, 0xa6, 0x7b, 0x77, 0x91, 0x70, 0xb0, 0xf9, 0xf4, 0x73,
	0x65, 0xb5, 0xc3, 0x82, 0xb7, 0xa7, 0x63, 0x6a, 0x75, 0x2a, 0xb0, 0x08, 0xbe, 0xfc, 0xb7, 0x0d,
	0xda, 0xd5, 0x81, 0xf4, 0x05, 0xd8, 0xd1, 0xfb, 0x27, 0xae, 0xfd, 0xaa, 0x47, 0x5c, 0xc7, 0xe8,
	0xf7, 0x08, 0xd6, 0x8e, 0x35, 0x72, 0x24, 0xb6, 0xe0, 0x56, 0x96, 0xa3, 0x8e, 0xc3, 0x92, 0x31,
	0xf5, 0xc2, 0xf3, 0x90, 0xfa, 0xd2, 0x57, 0xe0, 0x61, 0x2d, 0xc5, 0x16, 0x51, 0x6d, 0xe2, 0xe2,
	0x33, 0x8d, 0x18, 0xb6, 0x28, 0x40, 0x31, 0xcb, 0xd1, 0x06, 0x8e, 0xe9, 0x20, 0xa5, 0x78, 0x14,
	0x52, 0x96, 0x2e, 0xa9, 0x9d, 0xde, 0x51, 0x43, 0x7d, 0xa7, 0x54, 0x3b, 0x63, 0x7f, 0xa1, 0x56,
	0xc0, 0xa3, 0x86, 0xfa, 0xc4, 0x52, 0x8f, 0x6a, 0xf9, 0x5d, 0xb8, 0x9d, 0xe5, 0xe8, 0xbe, 0x33,
	0x0e, 0xe2, 0x81, 0x3f, 0xd7, 0x7f, 0x0b, 0x3e, 0xae, 0xf5, 0x7d, 0xe7, 0x50, 0xd7, 0x6c, 0x57,
	0xd7, 0xfa, 0x87, 0xe4, 0x85, 0xfa, 0x52, 0x33, 0x1d, 0x4b, 0x5c, 0x83, 0x0f, 0xb3, 0x1c, 0x49,
	0xfd, 0xc9, 0x30, 0x0a, 0x53, 0x3d, 0x4c, 0x86, 0xf4, 0x62, 0xf0, 0x3a, 0xe4, 0x93, 0x58, 0xfa,
	0x0e, 0x7c, 0xb2, 0x70, 0x61, 0x1a, 0x06, 0xc1, 0xb6, 0x66, 0x1a, 0xae, 0xd9, 0x23, 0x86, 0xab,
	0x19, 0x9a, 0x2d, 0xde, 0x2b, 0x51, 0xcc, 0x19, 0xa3, 0x5e, 0x1a, 0x72, 0x66, 0x8e, 0x29, 0xd3,
	0x58, 0x98, 0x4a, 0xdf, 0x34, 0x92, 0xfe, 0x1f, 0xb5, 0xad, 0x57, 0xe2, 0x3a, 0xdc, 0xcd, 0x72,
	0xb4, 0xbd, 0x4c, 0xda, 0xf1, 0xf4, 0xbd, 0xa0, 0x8a, 0x4f, 0xc5, 0xf6, 0x6d, 0xa0, 0xea, 0x5d,
	0x4a, 0xdf, 0x03, 0xb4, 0x12, 0xc4, 0xa6, 0x71, 0xac, 0x59, 0xba, 0xf8, 0x01, 0xdc, 0xcf, 0x72,
	0xb4, 0xbb, 0x0c, 0x63, 0xce, 0xce, 0xc3, 0x38, 0x92, 0x9e, 0x01, 0xb8, 0xf8, 0xc1, 0x0b, 0xd5,
	0x30, 0xc8, 0x59, 0xc3, 0xea, 0x87, 0xf0, 0x41, 0x96, 0xa3, 0x2d, 0x7c, 0x31, 0x60, 0x8c, 0x8e,
	0x6a, 0x9f, 0x4f, 0xc0, 0xfe, 0xed, 0x50, 0x61, 0x12, 0x40, 0x29, 0xcb, 0xd1, 0x66, 0x83, 0x29,
	0x1c, 0xae, 0x44, 0x0a, 0x7b, 0x9d, 0x77, 0x90, 0xc2, 0xdb, 0x52, 0x23, 0x9a, 0xc8, 0xdc, 0xd8,
	0x46, 0xd5, 0x88, 0x05, 0x36, 0x77, 0xf5, 0x35, 0xf8, 0xe8, 0x1d, 0x14, 0x9f, 0x99, 0x7d, 0x52,
	0xda, 0xba, 0x0f, 0x77, 0xb2, 0x1c, 0x89, 0x15, 0x88, 0x47, 0x3c, 0xa1, 0x33, 0x5f, 0xcf, 0x81,
	0xbc, 0x02, 0x9b, 0xa7, 0xdc, 0x84, 0x8f, 0xb2, 0x1c, 0x3d, 0x68, 0x92, 0xf3, 0x9c, 0x07, 0x8d,
	0x87, 0x62, 0x11, 0xfc, 0xd2, 0xed, 0xa9, 0xf8, 0x94, 0xd8, 0xe2, 0x16, 0xdc, 0xcc, 0x72, 0x04,
	0x2c, 0xea, 0xbd, 0xee, 0x0d, 0xbc, 0x4b, 0x9a, 0x4a, 0x9f, 0x02, 0xb1, 0x56, 0xda, 0x9a, 0x4e,
	0x4c, 0xc7, 0x16, 0x45, 0xd8, 0xc9, 0x72, 0xd4, 0xb6, 0xc3, 0x88, 0xf2, 0xc9, 0xf2, 0x0d, 0x57,
	0x12, 0xd7, 0x34, 0xca, 0x62, 0xc4, 0xed, 0xf2, 0xba, 0x2a, 0xad, 0xc9, 0x66, 0x65, 0x48, 0x4f,
	0xc0, 0x5e, 0x8d, 0xa8, 0xf8, 0xd4, 0x30, 0x7f, 0x38, 0x23, 0x47, 0x27, 0x44, 0x2f, 0x9e, 0x88,
	0x54, 0xf6, 0x51, 0xf5, 0x2e, 0x19, 0xff, 0x69, 0x44, 0xfd, 0x80, 0x46, 0x94, 0xa5, 0x70, 0xed,
	0x97, 0xdf, 0xe4, 0xd6, 0xe1, 0xc9, 0x9f, 0xd7, 0xb2, 0xf0, 0xf6, 0x5a, 0x16, 0xfe, 0xb9, 0x96,
	0x85, 0x5f, 0x6f, 0xe4, 0xd6, 0xdb, 0x1b, 0xb9, 0xf5, 0xf7, 0x8d, 0xdc, 0xfa, 0xf1, 0x71, 0x10,
	0xa6, 0x17, 0x93, 0xa1, 0xe2, 0xf1, 0xa8, 0xdb, 0x9c, 0x21, 0x8b, 0xa0, 0xfb, 0x66, 0x36, 0x56,
	0x8b, 0x69, 0x93, 0x0c, 0xd7, 0x67, 0x23, 0xea, 0xd9, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0c,
	0xb5, 0x87, 0xa5, 0x74, 0x05, 0x00, 0x00,
}

func (m *IRCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IRCRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IRCRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageType != 0 {
		i = encodeVarintIrcRequests(dAtA, i, uint64(m.MessageType))
		i--
		dAtA[i] = 0x18
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIrcRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ReqId != 0 {
		i = encodeVarintIrcRequests(dAtA, i, uint64(m.ReqId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIrcRequests(dAtA []byte, offset int, v uint64) int {
	offset -= sovIrcRequests(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IRCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReqId != 0 {
		n += 1 + sovIrcRequests(uint64(m.ReqId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovIrcRequests(uint64(l))
	}
	if m.MessageType != 0 {
		n += 1 + sovIrcRequests(uint64(m.MessageType))
	}
	return n
}

func sovIrcRequests(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIrcRequests(x uint64) (n int) {
	return sovIrcRequests(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IRCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIrcRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IRCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IRCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIrcRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIrcRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIrcRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIrcRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &types.Any{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIrcRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= MsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIrcRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIrcRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIrcRequests(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIrcRequests
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIrcRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIrcRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIrcRequests
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIrcRequests
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIrcRequests
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIrcRequests        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIrcRequests          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIrcRequests = fmt.Errorf("proto: unexpected end of group")
)
