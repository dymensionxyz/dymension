// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymension/denommetadata/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DenomMetadataByIDRequest struct {
	// ID being queried
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DenomMetadataByIDRequest) Reset()         { *m = DenomMetadataByIDRequest{} }
func (m *DenomMetadataByIDRequest) String() string { return proto.CompactTextString(m) }
func (*DenomMetadataByIDRequest) ProtoMessage()    {}
func (*DenomMetadataByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fc5c656f5b822a, []int{0}
}
func (m *DenomMetadataByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMetadataByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMetadataByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMetadataByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMetadataByIDRequest.Merge(m, src)
}
func (m *DenomMetadataByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenomMetadataByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMetadataByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMetadataByIDRequest proto.InternalMessageInfo

func (m *DenomMetadataByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DenomMetadataByIDResponse struct {
	// Denometada that corresponds to provided ID
	Metadata *DenomMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *DenomMetadataByIDResponse) Reset()         { *m = DenomMetadataByIDResponse{} }
func (m *DenomMetadataByIDResponse) String() string { return proto.CompactTextString(m) }
func (*DenomMetadataByIDResponse) ProtoMessage()    {}
func (*DenomMetadataByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fc5c656f5b822a, []int{1}
}
func (m *DenomMetadataByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMetadataByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMetadataByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMetadataByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMetadataByIDResponse.Merge(m, src)
}
func (m *DenomMetadataByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *DenomMetadataByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMetadataByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMetadataByIDResponse proto.InternalMessageInfo

func (m *DenomMetadataByIDResponse) GetMetadata() *DenomMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type DenomMetadataByBaseDenomRequest struct {
	// ID being queried
	BaseDenom string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
}

func (m *DenomMetadataByBaseDenomRequest) Reset()         { *m = DenomMetadataByBaseDenomRequest{} }
func (m *DenomMetadataByBaseDenomRequest) String() string { return proto.CompactTextString(m) }
func (*DenomMetadataByBaseDenomRequest) ProtoMessage()    {}
func (*DenomMetadataByBaseDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fc5c656f5b822a, []int{2}
}
func (m *DenomMetadataByBaseDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMetadataByBaseDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMetadataByBaseDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMetadataByBaseDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMetadataByBaseDenomRequest.Merge(m, src)
}
func (m *DenomMetadataByBaseDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenomMetadataByBaseDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMetadataByBaseDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMetadataByBaseDenomRequest proto.InternalMessageInfo

func (m *DenomMetadataByBaseDenomRequest) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

type DenomMetadataByBaseDenomResponse struct {
	// Denometada that corresponds to provided ID
	Metadata *DenomMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *DenomMetadataByBaseDenomResponse) Reset()         { *m = DenomMetadataByBaseDenomResponse{} }
func (m *DenomMetadataByBaseDenomResponse) String() string { return proto.CompactTextString(m) }
func (*DenomMetadataByBaseDenomResponse) ProtoMessage()    {}
func (*DenomMetadataByBaseDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fc5c656f5b822a, []int{3}
}
func (m *DenomMetadataByBaseDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMetadataByBaseDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMetadataByBaseDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMetadataByBaseDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMetadataByBaseDenomResponse.Merge(m, src)
}
func (m *DenomMetadataByBaseDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *DenomMetadataByBaseDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMetadataByBaseDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMetadataByBaseDenomResponse proto.InternalMessageInfo

func (m *DenomMetadataByBaseDenomResponse) GetMetadata() *DenomMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type DenomMetadataByDisplayDenomRequest struct {
	// ID being queried
	DisplayDenom string `protobuf:"bytes,1,opt,name=display_denom,json=displayDenom,proto3" json:"display_denom,omitempty"`
}

func (m *DenomMetadataByDisplayDenomRequest) Reset()         { *m = DenomMetadataByDisplayDenomRequest{} }
func (m *DenomMetadataByDisplayDenomRequest) String() string { return proto.CompactTextString(m) }
func (*DenomMetadataByDisplayDenomRequest) ProtoMessage()    {}
func (*DenomMetadataByDisplayDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fc5c656f5b822a, []int{4}
}
func (m *DenomMetadataByDisplayDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMetadataByDisplayDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMetadataByDisplayDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMetadataByDisplayDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMetadataByDisplayDenomRequest.Merge(m, src)
}
func (m *DenomMetadataByDisplayDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenomMetadataByDisplayDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMetadataByDisplayDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMetadataByDisplayDenomRequest proto.InternalMessageInfo

func (m *DenomMetadataByDisplayDenomRequest) GetDisplayDenom() string {
	if m != nil {
		return m.DisplayDenom
	}
	return ""
}

type DenomMetadataByDisplayDenomResponse struct {
	// Denometada that corresponds to provided ID
	Metadata *DenomMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *DenomMetadataByDisplayDenomResponse) Reset()         { *m = DenomMetadataByDisplayDenomResponse{} }
func (m *DenomMetadataByDisplayDenomResponse) String() string { return proto.CompactTextString(m) }
func (*DenomMetadataByDisplayDenomResponse) ProtoMessage()    {}
func (*DenomMetadataByDisplayDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fc5c656f5b822a, []int{5}
}
func (m *DenomMetadataByDisplayDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMetadataByDisplayDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMetadataByDisplayDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMetadataByDisplayDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMetadataByDisplayDenomResponse.Merge(m, src)
}
func (m *DenomMetadataByDisplayDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *DenomMetadataByDisplayDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMetadataByDisplayDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMetadataByDisplayDenomResponse proto.InternalMessageInfo

func (m *DenomMetadataByDisplayDenomResponse) GetMetadata() *DenomMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type DenomMetadataBySymbolDenomRequest struct {
	// ID being queried
	SymbolDenom string `protobuf:"bytes,1,opt,name=symbol_denom,json=symbolDenom,proto3" json:"symbol_denom,omitempty"`
}

func (m *DenomMetadataBySymbolDenomRequest) Reset()         { *m = DenomMetadataBySymbolDenomRequest{} }
func (m *DenomMetadataBySymbolDenomRequest) String() string { return proto.CompactTextString(m) }
func (*DenomMetadataBySymbolDenomRequest) ProtoMessage()    {}
func (*DenomMetadataBySymbolDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fc5c656f5b822a, []int{6}
}
func (m *DenomMetadataBySymbolDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMetadataBySymbolDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMetadataBySymbolDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMetadataBySymbolDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMetadataBySymbolDenomRequest.Merge(m, src)
}
func (m *DenomMetadataBySymbolDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenomMetadataBySymbolDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMetadataBySymbolDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMetadataBySymbolDenomRequest proto.InternalMessageInfo

func (m *DenomMetadataBySymbolDenomRequest) GetSymbolDenom() string {
	if m != nil {
		return m.SymbolDenom
	}
	return ""
}

type DenomMetadataBySymbolDenomResponse struct {
	// Denometada that corresponds to provided ID
	Metadata *DenomMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *DenomMetadataBySymbolDenomResponse) Reset()         { *m = DenomMetadataBySymbolDenomResponse{} }
func (m *DenomMetadataBySymbolDenomResponse) String() string { return proto.CompactTextString(m) }
func (*DenomMetadataBySymbolDenomResponse) ProtoMessage()    {}
func (*DenomMetadataBySymbolDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fc5c656f5b822a, []int{7}
}
func (m *DenomMetadataBySymbolDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMetadataBySymbolDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMetadataBySymbolDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMetadataBySymbolDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMetadataBySymbolDenomResponse.Merge(m, src)
}
func (m *DenomMetadataBySymbolDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *DenomMetadataBySymbolDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMetadataBySymbolDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMetadataBySymbolDenomResponse proto.InternalMessageInfo

func (m *DenomMetadataBySymbolDenomResponse) GetMetadata() *DenomMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type AllDenomMetadataRequest struct {
}

func (m *AllDenomMetadataRequest) Reset()         { *m = AllDenomMetadataRequest{} }
func (m *AllDenomMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*AllDenomMetadataRequest) ProtoMessage()    {}
func (*AllDenomMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fc5c656f5b822a, []int{8}
}
func (m *AllDenomMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllDenomMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllDenomMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllDenomMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllDenomMetadataRequest.Merge(m, src)
}
func (m *AllDenomMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllDenomMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllDenomMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllDenomMetadataRequest proto.InternalMessageInfo

type AllDenomMetadataResponse struct {
	Data []DenomMetadata `protobuf:"bytes,1,rep,name=data,proto3" json:"data"`
}

func (m *AllDenomMetadataResponse) Reset()         { *m = AllDenomMetadataResponse{} }
func (m *AllDenomMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*AllDenomMetadataResponse) ProtoMessage()    {}
func (*AllDenomMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fc5c656f5b822a, []int{9}
}
func (m *AllDenomMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllDenomMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllDenomMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllDenomMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllDenomMetadataResponse.Merge(m, src)
}
func (m *AllDenomMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllDenomMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllDenomMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllDenomMetadataResponse proto.InternalMessageInfo

func (m *AllDenomMetadataResponse) GetData() []DenomMetadata {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*DenomMetadataByIDRequest)(nil), "dymensionxyz.dymension.denommetadata.DenomMetadataByIDRequest")
	proto.RegisterType((*DenomMetadataByIDResponse)(nil), "dymensionxyz.dymension.denommetadata.DenomMetadataByIDResponse")
	proto.RegisterType((*DenomMetadataByBaseDenomRequest)(nil), "dymensionxyz.dymension.denommetadata.DenomMetadataByBaseDenomRequest")
	proto.RegisterType((*DenomMetadataByBaseDenomResponse)(nil), "dymensionxyz.dymension.denommetadata.DenomMetadataByBaseDenomResponse")
	proto.RegisterType((*DenomMetadataByDisplayDenomRequest)(nil), "dymensionxyz.dymension.denommetadata.DenomMetadataByDisplayDenomRequest")
	proto.RegisterType((*DenomMetadataByDisplayDenomResponse)(nil), "dymensionxyz.dymension.denommetadata.DenomMetadataByDisplayDenomResponse")
	proto.RegisterType((*DenomMetadataBySymbolDenomRequest)(nil), "dymensionxyz.dymension.denommetadata.DenomMetadataBySymbolDenomRequest")
	proto.RegisterType((*DenomMetadataBySymbolDenomResponse)(nil), "dymensionxyz.dymension.denommetadata.DenomMetadataBySymbolDenomResponse")
	proto.RegisterType((*AllDenomMetadataRequest)(nil), "dymensionxyz.dymension.denommetadata.AllDenomMetadataRequest")
	proto.RegisterType((*AllDenomMetadataResponse)(nil), "dymensionxyz.dymension.denommetadata.AllDenomMetadataResponse")
}

func init() {
	proto.RegisterFile("dymension/denommetadata/query.proto", fileDescriptor_e7fc5c656f5b822a)
}

var fileDescriptor_e7fc5c656f5b822a = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdf, 0x6b, 0xd3, 0x50,
	0x14, 0x6e, 0x6a, 0x15, 0x7b, 0x36, 0x45, 0x2f, 0x82, 0x5d, 0xd4, 0x6c, 0x4b, 0x7d, 0x90, 0x09,
	0xb9, 0x6c, 0xc5, 0x17, 0xc5, 0x3a, 0x4b, 0xad, 0xad, 0xb8, 0x39, 0xeb, 0xf0, 0xc1, 0x97, 0x92,
	0x2c, 0x97, 0x18, 0x48, 0x72, 0xb3, 0xdd, 0xb4, 0x2c, 0x96, 0xbe, 0x08, 0xbe, 0xf8, 0x24, 0xf8,
	0x4f, 0x0d, 0x1f, 0x64, 0xe0, 0x8b, 0x0f, 0x22, 0xd2, 0xfa, 0x5f, 0xf8, 0x22, 0xbd, 0x49, 0x7f,
	0x24, 0x5d, 0x47, 0xc9, 0xd6, 0xb7, 0xe6, 0xdc, 0x73, 0xbe, 0xf3, 0x7d, 0x1f, 0x9c, 0x8f, 0x42,
	0x5e, 0xf7, 0x6d, 0xe2, 0x30, 0x93, 0x3a, 0x58, 0x27, 0x0e, 0xb5, 0x6d, 0xe2, 0xa9, 0xba, 0xea,
	0xa9, 0x78, 0xbf, 0x49, 0x0e, 0x7c, 0xc5, 0x3d, 0xa0, 0x1e, 0x45, 0x77, 0x87, 0x4d, 0x87, 0xfe,
	0x07, 0x65, 0xf8, 0xa1, 0x44, 0x26, 0xc4, 0x1b, 0x06, 0x35, 0x28, 0x1f, 0xc0, 0xfd, 0x5f, 0xc1,
	0xac, 0x78, 0xdb, 0xa0, 0xd4, 0xb0, 0x08, 0x56, 0x5d, 0x13, 0xab, 0x8e, 0x43, 0x3d, 0xd5, 0x33,
	0xa9, 0xc3, 0xc2, 0xd7, 0xb5, 0x3d, 0xca, 0x6c, 0xca, 0xb0, 0xa6, 0x32, 0x12, 0xac, 0xc4, 0xad,
	0x75, 0x8d, 0x78, 0xea, 0x3a, 0x76, 0x55, 0xc3, 0x74, 0x78, 0x73, 0xd8, 0x7b, 0x7f, 0x1a, 0xd5,
	0xc8, 0x57, 0xd0, 0x2c, 0xaf, 0x41, 0xae, 0xdc, 0x2f, 0x6f, 0x85, 0xe5, 0x92, 0x5f, 0x2b, 0xd7,
	0xc9, 0x7e, 0x93, 0x30, 0x0f, 0x5d, 0x85, 0xb4, 0xa9, 0xe7, 0x84, 0x15, 0xe1, 0x5e, 0xa6, 0x9e,
	0x36, 0x75, 0xd9, 0x82, 0xa5, 0x13, 0x7a, 0x99, 0x4b, 0x1d, 0x46, 0xd0, 0x2b, 0xb8, 0x3c, 0x80,
	0xe6, 0x23, 0x0b, 0x1b, 0x05, 0x65, 0x16, 0x3b, 0x94, 0x08, 0x64, 0x7d, 0x08, 0x22, 0x6f, 0xc2,
	0x72, 0x6c, 0x5b, 0x49, 0x65, 0x84, 0x97, 0x06, 0x04, 0xef, 0x00, 0xf4, 0x0d, 0x69, 0x70, 0x40,
	0xbe, 0x35, 0x5b, 0xcf, 0x6a, 0x83, 0x2e, 0x99, 0xc1, 0xca, 0x74, 0x84, 0x79, 0xd1, 0xae, 0x81,
	0x1c, 0x5b, 0x5a, 0x36, 0x99, 0x6b, 0xa9, 0x7e, 0x84, 0x79, 0x1e, 0xae, 0xe8, 0x41, 0x39, 0x42,
	0x7e, 0x51, 0x1f, 0xeb, 0x95, 0x5b, 0x90, 0x3f, 0x15, 0x6a, 0x5e, 0x12, 0x2a, 0xb0, 0x1a, 0xdb,
	0xfb, 0xc6, 0xb7, 0x35, 0x6a, 0x45, 0x14, 0xac, 0xc2, 0x22, 0xe3, 0xd5, 0x88, 0x80, 0x05, 0x36,
	0xea, 0x94, 0x9b, 0x13, 0x56, 0x44, 0x70, 0xe6, 0x45, 0x7f, 0x09, 0x6e, 0x3e, 0xb5, 0xac, 0xe8,
	0x6b, 0x40, 0x5a, 0x36, 0x21, 0x37, 0xf9, 0x14, 0xf2, 0xd8, 0x82, 0x4c, 0xc8, 0xe1, 0x42, 0x42,
	0x0e, 0xa5, 0xcc, 0xd1, 0xef, 0xe5, 0x54, 0x9d, 0xc3, 0x6c, 0x7c, 0xcb, 0xc2, 0xc5, 0xd7, 0xfd,
	0x43, 0x45, 0xbf, 0x04, 0xb8, 0x3e, 0x71, 0x37, 0xa8, 0x98, 0x64, 0xc1, 0xe8, 0x38, 0xc5, 0x27,
	0x89, 0xe7, 0x03, 0xbd, 0x72, 0xe5, 0xe3, 0x8f, 0xbf, 0x5f, 0xd3, 0x9b, 0xa8, 0x88, 0xc7, 0x81,
	0xf0, 0x4c, 0xe1, 0xd1, 0xd0, 0xfc, 0x86, 0xa9, 0xe3, 0xb6, 0xa9, 0x77, 0xd0, 0x3f, 0x61, 0x22,
	0x42, 0x86, 0x67, 0x86, 0x9e, 0x25, 0x62, 0x19, 0x3f, 0x74, 0xb1, 0x72, 0x56, 0x98, 0x50, 0xf3,
	0x0e, 0xd7, 0xfc, 0x02, 0x55, 0x13, 0x6a, 0xe6, 0xf1, 0xdb, 0x1e, 0x65, 0x4e, 0x07, 0x7d, 0x4e,
	0xc3, 0xad, 0x53, 0x8e, 0x14, 0x55, 0x13, 0x31, 0x3f, 0x21, 0x32, 0xc4, 0xda, 0x39, 0x20, 0x85,
	0x36, 0xbc, 0xe5, 0x36, 0xec, 0xa0, 0xed, 0x84, 0x36, 0x84, 0x29, 0x85, 0xdb, 0x91, 0x0c, 0xeb,
	0xa0, 0x4f, 0x69, 0x10, 0xa7, 0x5f, 0x3c, 0x7a, 0x9e, 0x48, 0xc1, 0x64, 0xf6, 0x88, 0xd5, 0xb3,
	0x03, 0x85, 0x4e, 0xec, 0x72, 0x27, 0xb6, 0xd1, 0xcb, 0x84, 0x4e, 0x04, 0x71, 0x87, 0xdb, 0xe3,
	0x51, 0xd8, 0x41, 0xdf, 0x05, 0xb8, 0x16, 0xcf, 0x19, 0xf4, 0x78, 0x36, 0xd2, 0x53, 0xa2, 0x4b,
	0x2c, 0x26, 0x1d, 0x0f, 0x95, 0x3e, 0xe2, 0x4a, 0x1f, 0xa0, 0x42, 0x02, 0xa5, 0xa5, 0xdd, 0xa3,
	0xae, 0x24, 0x1c, 0x77, 0x25, 0xe1, 0x4f, 0x57, 0x12, 0xbe, 0xf4, 0xa4, 0xd4, 0x71, 0x4f, 0x4a,
	0xfd, 0xec, 0x49, 0xa9, 0x77, 0x0f, 0x0d, 0xd3, 0x7b, 0xdf, 0xd4, 0x94, 0x3d, 0x6a, 0x4f, 0x03,
	0x6e, 0x15, 0xf0, 0x61, 0x0c, 0xdd, 0xf3, 0x5d, 0xc2, 0xb4, 0x4b, 0xfc, 0x2f, 0x48, 0xe1, 0x7f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xf7, 0xbb, 0xf4, 0x5c, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// DenomMetadataByID returns tokenmetadata by their respective ID
	DenomMetadataByID(ctx context.Context, in *DenomMetadataByIDRequest, opts ...grpc.CallOption) (*DenomMetadataByIDResponse, error)
	// DenomMetadataByBaseDenom returns tokenmetadata by their respective base denom
	DenomMetadataByBaseDenom(ctx context.Context, in *DenomMetadataByBaseDenomRequest, opts ...grpc.CallOption) (*DenomMetadataByBaseDenomResponse, error)
	// DenomMetadataByDisplayDenom returns tokenmetadata by their respective display denom
	DenomMetadataByDisplayDenom(ctx context.Context, in *DenomMetadataByDisplayDenomRequest, opts ...grpc.CallOption) (*DenomMetadataByDisplayDenomResponse, error)
	// DenomMetadataBySymbolDenom returns tokenmetadata by their respective symbol denom
	DenomMetadataBySymbolDenom(ctx context.Context, in *DenomMetadataBySymbolDenomRequest, opts ...grpc.CallOption) (*DenomMetadataBySymbolDenomResponse, error)
	// AllDenomMetadata returns all denommetadata registered
	AllDenomMetadata(ctx context.Context, in *AllDenomMetadataRequest, opts ...grpc.CallOption) (*AllDenomMetadataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) DenomMetadataByID(ctx context.Context, in *DenomMetadataByIDRequest, opts ...grpc.CallOption) (*DenomMetadataByIDResponse, error) {
	out := new(DenomMetadataByIDResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.denommetadata.Query/DenomMetadataByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomMetadataByBaseDenom(ctx context.Context, in *DenomMetadataByBaseDenomRequest, opts ...grpc.CallOption) (*DenomMetadataByBaseDenomResponse, error) {
	out := new(DenomMetadataByBaseDenomResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.denommetadata.Query/DenomMetadataByBaseDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomMetadataByDisplayDenom(ctx context.Context, in *DenomMetadataByDisplayDenomRequest, opts ...grpc.CallOption) (*DenomMetadataByDisplayDenomResponse, error) {
	out := new(DenomMetadataByDisplayDenomResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.denommetadata.Query/DenomMetadataByDisplayDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomMetadataBySymbolDenom(ctx context.Context, in *DenomMetadataBySymbolDenomRequest, opts ...grpc.CallOption) (*DenomMetadataBySymbolDenomResponse, error) {
	out := new(DenomMetadataBySymbolDenomResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.denommetadata.Query/DenomMetadataBySymbolDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllDenomMetadata(ctx context.Context, in *AllDenomMetadataRequest, opts ...grpc.CallOption) (*AllDenomMetadataResponse, error) {
	out := new(AllDenomMetadataResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.denommetadata.Query/AllDenomMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// DenomMetadataByID returns tokenmetadata by their respective ID
	DenomMetadataByID(context.Context, *DenomMetadataByIDRequest) (*DenomMetadataByIDResponse, error)
	// DenomMetadataByBaseDenom returns tokenmetadata by their respective base denom
	DenomMetadataByBaseDenom(context.Context, *DenomMetadataByBaseDenomRequest) (*DenomMetadataByBaseDenomResponse, error)
	// DenomMetadataByDisplayDenom returns tokenmetadata by their respective display denom
	DenomMetadataByDisplayDenom(context.Context, *DenomMetadataByDisplayDenomRequest) (*DenomMetadataByDisplayDenomResponse, error)
	// DenomMetadataBySymbolDenom returns tokenmetadata by their respective symbol denom
	DenomMetadataBySymbolDenom(context.Context, *DenomMetadataBySymbolDenomRequest) (*DenomMetadataBySymbolDenomResponse, error)
	// AllDenomMetadata returns all denommetadata registered
	AllDenomMetadata(context.Context, *AllDenomMetadataRequest) (*AllDenomMetadataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) DenomMetadataByID(ctx context.Context, req *DenomMetadataByIDRequest) (*DenomMetadataByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomMetadataByID not implemented")
}
func (*UnimplementedQueryServer) DenomMetadataByBaseDenom(ctx context.Context, req *DenomMetadataByBaseDenomRequest) (*DenomMetadataByBaseDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomMetadataByBaseDenom not implemented")
}
func (*UnimplementedQueryServer) DenomMetadataByDisplayDenom(ctx context.Context, req *DenomMetadataByDisplayDenomRequest) (*DenomMetadataByDisplayDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomMetadataByDisplayDenom not implemented")
}
func (*UnimplementedQueryServer) DenomMetadataBySymbolDenom(ctx context.Context, req *DenomMetadataBySymbolDenomRequest) (*DenomMetadataBySymbolDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomMetadataBySymbolDenom not implemented")
}
func (*UnimplementedQueryServer) AllDenomMetadata(ctx context.Context, req *AllDenomMetadataRequest) (*AllDenomMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDenomMetadata not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_DenomMetadataByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenomMetadataByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomMetadataByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.denommetadata.Query/DenomMetadataByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomMetadataByID(ctx, req.(*DenomMetadataByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomMetadataByBaseDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenomMetadataByBaseDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomMetadataByBaseDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.denommetadata.Query/DenomMetadataByBaseDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomMetadataByBaseDenom(ctx, req.(*DenomMetadataByBaseDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomMetadataByDisplayDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenomMetadataByDisplayDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomMetadataByDisplayDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.denommetadata.Query/DenomMetadataByDisplayDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomMetadataByDisplayDenom(ctx, req.(*DenomMetadataByDisplayDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomMetadataBySymbolDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenomMetadataBySymbolDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomMetadataBySymbolDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.denommetadata.Query/DenomMetadataBySymbolDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomMetadataBySymbolDenom(ctx, req.(*DenomMetadataBySymbolDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllDenomMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllDenomMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllDenomMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.denommetadata.Query/AllDenomMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllDenomMetadata(ctx, req.(*AllDenomMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.denommetadata.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DenomMetadataByID",
			Handler:    _Query_DenomMetadataByID_Handler,
		},
		{
			MethodName: "DenomMetadataByBaseDenom",
			Handler:    _Query_DenomMetadataByBaseDenom_Handler,
		},
		{
			MethodName: "DenomMetadataByDisplayDenom",
			Handler:    _Query_DenomMetadataByDisplayDenom_Handler,
		},
		{
			MethodName: "DenomMetadataBySymbolDenom",
			Handler:    _Query_DenomMetadataBySymbolDenom_Handler,
		},
		{
			MethodName: "AllDenomMetadata",
			Handler:    _Query_AllDenomMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymension/denommetadata/query.proto",
}

func (m *DenomMetadataByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMetadataByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMetadataByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DenomMetadataByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMetadataByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMetadataByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomMetadataByBaseDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMetadataByBaseDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMetadataByBaseDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomMetadataByBaseDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMetadataByBaseDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMetadataByBaseDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomMetadataByDisplayDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMetadataByDisplayDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMetadataByDisplayDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayDenom) > 0 {
		i -= len(m.DisplayDenom)
		copy(dAtA[i:], m.DisplayDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DisplayDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomMetadataByDisplayDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMetadataByDisplayDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMetadataByDisplayDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomMetadataBySymbolDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMetadataBySymbolDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMetadataBySymbolDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SymbolDenom) > 0 {
		i -= len(m.SymbolDenom)
		copy(dAtA[i:], m.SymbolDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SymbolDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomMetadataBySymbolDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMetadataBySymbolDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMetadataBySymbolDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllDenomMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllDenomMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllDenomMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AllDenomMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllDenomMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllDenomMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DenomMetadataByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *DenomMetadataByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DenomMetadataByBaseDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DenomMetadataByBaseDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DenomMetadataByDisplayDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DenomMetadataByDisplayDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DenomMetadataBySymbolDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SymbolDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DenomMetadataBySymbolDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AllDenomMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllDenomMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DenomMetadataByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMetadataByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMetadataByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomMetadataByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMetadataByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMetadataByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &DenomMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomMetadataByBaseDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMetadataByBaseDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMetadataByBaseDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomMetadataByBaseDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMetadataByBaseDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMetadataByBaseDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &DenomMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomMetadataByDisplayDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMetadataByDisplayDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMetadataByDisplayDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomMetadataByDisplayDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMetadataByDisplayDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMetadataByDisplayDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &DenomMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomMetadataBySymbolDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMetadataBySymbolDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMetadataBySymbolDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymbolDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomMetadataBySymbolDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMetadataBySymbolDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMetadataBySymbolDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &DenomMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllDenomMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllDenomMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllDenomMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllDenomMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllDenomMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllDenomMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, DenomMetadata{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
