// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymension/denommetadata/denommetadata_info.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DenomMetadataRecord struct {
	Denom    string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Decimals uint64 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (m *DenomMetadataRecord) Reset()         { *m = DenomMetadataRecord{} }
func (m *DenomMetadataRecord) String() string { return proto.CompactTextString(m) }
func (*DenomMetadataRecord) ProtoMessage()    {}
func (*DenomMetadataRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_6777bfdbe427c614, []int{0}
}
func (m *DenomMetadataRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMetadataRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMetadataRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMetadataRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMetadataRecord.Merge(m, src)
}
func (m *DenomMetadataRecord) XXX_Size() int {
	return m.Size()
}
func (m *DenomMetadataRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMetadataRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMetadataRecord proto.InternalMessageInfo

func (m *DenomMetadataRecord) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomMetadataRecord) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func init() {
	proto.RegisterType((*DenomMetadataRecord)(nil), "dymensionxyz.dymension.denommetadata.DenomMetadataRecord")
}

func init() {
	proto.RegisterFile("dymension/denommetadata/denommetadata_info.proto", fileDescriptor_6777bfdbe427c614)
}

var fileDescriptor_6777bfdbe427c614 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x48, 0xa9, 0xcc, 0x4d,
	0xcd, 0x2b, 0xce, 0xcc, 0xcf, 0xd3, 0x4f, 0x49, 0xcd, 0xcb, 0xcf, 0xcd, 0x4d, 0x2d, 0x49, 0x4c,
	0x49, 0x2c, 0x49, 0x44, 0xe5, 0xc5, 0x67, 0xe6, 0xa5, 0xe5, 0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4,
	0x0b, 0xa9, 0xc0, 0x75, 0x54, 0x54, 0x56, 0xe9, 0xc1, 0x39, 0x7a, 0x28, 0x1a, 0xa4, 0x44, 0xd2,
	0xf3, 0xd3, 0xf3, 0xc1, 0x1a, 0xf4, 0x41, 0x2c, 0x88, 0x5e, 0x25, 0x5f, 0x2e, 0x61, 0x17, 0x90,
	0x32, 0x5f, 0xa8, 0xb2, 0xa0, 0xd4, 0xe4, 0xfc, 0xa2, 0x14, 0x21, 0x11, 0x2e, 0x56, 0xb0, 0x6e,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x08, 0x47, 0x48, 0x8a, 0x8b, 0x23, 0x25, 0x35, 0x39,
	0x33, 0x37, 0x31, 0xa7, 0x58, 0x82, 0x49, 0x81, 0x51, 0x83, 0x25, 0x08, 0xce, 0xb7, 0x62, 0x79,
	0xb1, 0x40, 0x9e, 0xd1, 0x29, 0xe4, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c,
	0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2,
	0xac, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x91, 0xdd, 0x8b, 0xe0,
	0xe8, 0x97, 0x19, 0xeb, 0x57, 0xa0, 0xf9, 0xb9, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec,
	0x56, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0x0c, 0xca, 0x6c, 0x1b, 0x01, 0x00, 0x00,
}

func (this *DenomMetadataRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DenomMetadataRecord)
	if !ok {
		that2, ok := that.(DenomMetadataRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.Decimals != that1.Decimals {
		return false
	}
	return true
}
func (m *DenomMetadataRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMetadataRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMetadataRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimals != 0 {
		i = encodeVarintDenommetadataInfo(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDenommetadataInfo(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDenommetadataInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovDenommetadataInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DenomMetadataRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDenommetadataInfo(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovDenommetadataInfo(uint64(m.Decimals))
	}
	return n
}

func sovDenommetadataInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDenommetadataInfo(x uint64) (n int) {
	return sovDenommetadataInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DenomMetadataRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDenommetadataInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMetadataRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMetadataRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenommetadataInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenommetadataInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenommetadataInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenommetadataInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDenommetadataInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDenommetadataInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDenommetadataInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDenommetadataInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDenommetadataInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDenommetadataInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDenommetadataInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDenommetadataInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDenommetadataInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDenommetadataInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDenommetadataInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDenommetadataInfo = fmt.Errorf("proto: unexpected end of group")
)
