// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/dymns/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterName defines the message used for user to register or extends ownership duration of a Dym-Name.
type MsgRegisterName struct {
	// name is the Dym-Name to be registered.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// owner is the account address of the account which owns the order.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// duration is the number of years the Dym-Name will be registered for.
	Duration int64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// confirm_payment is used to ensure user acknowledge of the amount coin that the user must pay.
	// If the amount mis-match with the actual payment, the transaction will be rejected.
	ConfirmPayment types.Coin `protobuf:"bytes,4,opt,name=confirm_payment,json=confirmPayment,proto3" json:"confirm_payment"`
	// contact defines an optional contact information for the Dym-Name.
	Contact string `protobuf:"bytes,5,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (m *MsgRegisterName) Reset()         { *m = MsgRegisterName{} }
func (m *MsgRegisterName) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterName) ProtoMessage()    {}
func (*MsgRegisterName) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{0}
}
func (m *MsgRegisterName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterName.Merge(m, src)
}
func (m *MsgRegisterName) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterName) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterName.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterName proto.InternalMessageInfo

func (m *MsgRegisterName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgRegisterName) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgRegisterName) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MsgRegisterName) GetConfirmPayment() types.Coin {
	if m != nil {
		return m.ConfirmPayment
	}
	return types.Coin{}
}

func (m *MsgRegisterName) GetContact() string {
	if m != nil {
		return m.Contact
	}
	return ""
}

// MsgRegisterNameResponse defines the response for the name registration.
type MsgRegisterNameResponse struct {
}

func (m *MsgRegisterNameResponse) Reset()         { *m = MsgRegisterNameResponse{} }
func (m *MsgRegisterNameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterNameResponse) ProtoMessage()    {}
func (*MsgRegisterNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{1}
}
func (m *MsgRegisterNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterNameResponse.Merge(m, src)
}
func (m *MsgRegisterNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterNameResponse proto.InternalMessageInfo

// MsgRegisterAlias defines the message used for user to register a new Alias for their owned RollApp.
type MsgRegisterAlias struct {
	// alias to be registered.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// rollapp_id is RollApp ID that the new Alias to be assigned for.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// owner is the account address of the RollApp which owns the Alias.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// confirm_payment is used to ensure user acknowledge of the amount coin that the user must pay.
	// If the amount mis-match with the actual payment, the transaction will be rejected.
	ConfirmPayment types.Coin `protobuf:"bytes,4,opt,name=confirm_payment,json=confirmPayment,proto3" json:"confirm_payment"`
}

func (m *MsgRegisterAlias) Reset()         { *m = MsgRegisterAlias{} }
func (m *MsgRegisterAlias) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAlias) ProtoMessage()    {}
func (*MsgRegisterAlias) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{2}
}
func (m *MsgRegisterAlias) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAlias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAlias.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAlias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAlias.Merge(m, src)
}
func (m *MsgRegisterAlias) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAlias) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAlias.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAlias proto.InternalMessageInfo

func (m *MsgRegisterAlias) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *MsgRegisterAlias) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *MsgRegisterAlias) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgRegisterAlias) GetConfirmPayment() types.Coin {
	if m != nil {
		return m.ConfirmPayment
	}
	return types.Coin{}
}

// MsgRegisterAliasResponse defines the response for the alias registration.
type MsgRegisterAliasResponse struct {
}

func (m *MsgRegisterAliasResponse) Reset()         { *m = MsgRegisterAliasResponse{} }
func (m *MsgRegisterAliasResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAliasResponse) ProtoMessage()    {}
func (*MsgRegisterAliasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{3}
}
func (m *MsgRegisterAliasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAliasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAliasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAliasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAliasResponse.Merge(m, src)
}
func (m *MsgRegisterAliasResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAliasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAliasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAliasResponse proto.InternalMessageInfo

// MsgTransferDymNameOwnership defines the message used for user to transfer ownership of a Dym-Name.
type MsgTransferDymNameOwnership struct {
	// name is the Dym-Name to be transferred ownership.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// owner is the account address of the account which is currently owner of the Dym-Name.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// new_owner is the account address of the next account which will own the Dym-Name.
	NewOwner string `protobuf:"bytes,3,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (m *MsgTransferDymNameOwnership) Reset()         { *m = MsgTransferDymNameOwnership{} }
func (m *MsgTransferDymNameOwnership) String() string { return proto.CompactTextString(m) }
func (*MsgTransferDymNameOwnership) ProtoMessage()    {}
func (*MsgTransferDymNameOwnership) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{4}
}
func (m *MsgTransferDymNameOwnership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferDymNameOwnership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferDymNameOwnership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferDymNameOwnership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferDymNameOwnership.Merge(m, src)
}
func (m *MsgTransferDymNameOwnership) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferDymNameOwnership) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferDymNameOwnership.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferDymNameOwnership proto.InternalMessageInfo

func (m *MsgTransferDymNameOwnership) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgTransferDymNameOwnership) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgTransferDymNameOwnership) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

// MsgTransferDymNameOwnershipResponse defines the response for the name transfer.
type MsgTransferDymNameOwnershipResponse struct {
}

func (m *MsgTransferDymNameOwnershipResponse) Reset()         { *m = MsgTransferDymNameOwnershipResponse{} }
func (m *MsgTransferDymNameOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferDymNameOwnershipResponse) ProtoMessage()    {}
func (*MsgTransferDymNameOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{5}
}
func (m *MsgTransferDymNameOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferDymNameOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferDymNameOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferDymNameOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferDymNameOwnershipResponse.Merge(m, src)
}
func (m *MsgTransferDymNameOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferDymNameOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferDymNameOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferDymNameOwnershipResponse proto.InternalMessageInfo

// MsgSetController defines the message used for user to set a controller for a Dym-Name.
type MsgSetController struct {
	// name is the Dym-Name to change controller.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// owner is the account address of the account which is currently owner of the Dym-Name.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// controller is the account address of the account which will be the new controller of the Dym-Name.
	Controller string `protobuf:"bytes,3,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (m *MsgSetController) Reset()         { *m = MsgSetController{} }
func (m *MsgSetController) String() string { return proto.CompactTextString(m) }
func (*MsgSetController) ProtoMessage()    {}
func (*MsgSetController) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{6}
}
func (m *MsgSetController) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetController) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetController.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetController) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetController.Merge(m, src)
}
func (m *MsgSetController) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetController) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetController.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetController proto.InternalMessageInfo

func (m *MsgSetController) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgSetController) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgSetController) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

// MsgSetControllerResponse defines the response for the name controller setting.
type MsgSetControllerResponse struct {
}

func (m *MsgSetControllerResponse) Reset()         { *m = MsgSetControllerResponse{} }
func (m *MsgSetControllerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetControllerResponse) ProtoMessage()    {}
func (*MsgSetControllerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{7}
}
func (m *MsgSetControllerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetControllerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetControllerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetControllerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetControllerResponse.Merge(m, src)
}
func (m *MsgSetControllerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetControllerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetControllerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetControllerResponse proto.InternalMessageInfo

// MsgUpdateResolveAddress defines the message used for user to update the resolve address of a Dym-Name.
type MsgUpdateResolveAddress struct {
	// name is the Dym-Name to be updated by controller.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// controller is the account address of the account which has permission to update the Dym-Name.
	Controller string `protobuf:"bytes,2,opt,name=controller,proto3" json:"controller,omitempty"`
	// chain_id is an optional field, chain-based mapping
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// sub_name is an optional field, sub-domain-like mapping
	SubName string `protobuf:"bytes,4,opt,name=sub_name,json=subName,proto3" json:"sub_name,omitempty"`
	// resolve_to is the address that this config will resolve to.
	// Leave it empty to remove the resolve address.
	ResolveTo string `protobuf:"bytes,5,opt,name=resolve_to,json=resolveTo,proto3" json:"resolve_to,omitempty"`
}

func (m *MsgUpdateResolveAddress) Reset()         { *m = MsgUpdateResolveAddress{} }
func (m *MsgUpdateResolveAddress) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateResolveAddress) ProtoMessage()    {}
func (*MsgUpdateResolveAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{8}
}
func (m *MsgUpdateResolveAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateResolveAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateResolveAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateResolveAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateResolveAddress.Merge(m, src)
}
func (m *MsgUpdateResolveAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateResolveAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateResolveAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateResolveAddress proto.InternalMessageInfo

func (m *MsgUpdateResolveAddress) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateResolveAddress) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

func (m *MsgUpdateResolveAddress) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgUpdateResolveAddress) GetSubName() string {
	if m != nil {
		return m.SubName
	}
	return ""
}

func (m *MsgUpdateResolveAddress) GetResolveTo() string {
	if m != nil {
		return m.ResolveTo
	}
	return ""
}

// MsgUpdateResolveAddressResponse defines the response for the name resolve address update.
type MsgUpdateResolveAddressResponse struct {
}

func (m *MsgUpdateResolveAddressResponse) Reset()         { *m = MsgUpdateResolveAddressResponse{} }
func (m *MsgUpdateResolveAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateResolveAddressResponse) ProtoMessage()    {}
func (*MsgUpdateResolveAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{9}
}
func (m *MsgUpdateResolveAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateResolveAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateResolveAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateResolveAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateResolveAddressResponse.Merge(m, src)
}
func (m *MsgUpdateResolveAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateResolveAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateResolveAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateResolveAddressResponse proto.InternalMessageInfo

// MsgUpdateDetails defines the message used for user to update the details of a Dym-Name.
type MsgUpdateDetails struct {
	// name is the Dym-Name to be updated details.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// controller is the bech32-encoded address of the account which has permission to update details of the Dym-Name.
	Controller string `protobuf:"bytes,2,opt,name=controller,proto3" json:"controller,omitempty"`
	// contact is an optional field, contact information of the Dym-Name.
	Contact string `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
	// clear_configs is an optional field, set to true to clear the current configuration.
	ClearConfigs bool `protobuf:"varint,4,opt,name=clear_configs,json=clearConfigs,proto3" json:"clear_configs,omitempty"`
}

func (m *MsgUpdateDetails) Reset()         { *m = MsgUpdateDetails{} }
func (m *MsgUpdateDetails) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDetails) ProtoMessage()    {}
func (*MsgUpdateDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{10}
}
func (m *MsgUpdateDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDetails.Merge(m, src)
}
func (m *MsgUpdateDetails) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDetails.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDetails proto.InternalMessageInfo

func (m *MsgUpdateDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateDetails) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

func (m *MsgUpdateDetails) GetContact() string {
	if m != nil {
		return m.Contact
	}
	return ""
}

func (m *MsgUpdateDetails) GetClearConfigs() bool {
	if m != nil {
		return m.ClearConfigs
	}
	return false
}

// MsgUpdateDetailsResponse defines the response for the name details update.
type MsgUpdateDetailsResponse struct {
}

func (m *MsgUpdateDetailsResponse) Reset()         { *m = MsgUpdateDetailsResponse{} }
func (m *MsgUpdateDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDetailsResponse) ProtoMessage()    {}
func (*MsgUpdateDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{11}
}
func (m *MsgUpdateDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDetailsResponse.Merge(m, src)
}
func (m *MsgUpdateDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDetailsResponse proto.InternalMessageInfo

// MsgPlaceSellOrder defines the message used for user to put a Dym-Name/Alias for sale.
type MsgPlaceSellOrder struct {
	// asset_id is the Dym-Name/Alias to be opened for sell.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// asset_type is the type of the asset of the order, is Dym-Name/Alias.
	AssetType AssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=dymensionxyz.dymension.dymns.AssetType" json:"asset_type,omitempty"`
	// owner is the bech32-encoded address of the account which owns the order.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// min_price is the minimum price that buyer must pay for the Dym-Name.
	MinPrice types.Coin `protobuf:"bytes,4,opt,name=min_price,json=minPrice,proto3" json:"min_price"`
	// sell_price is the price that buyer must pay for the Dym-Name to immediately own it.
	// Leaving this field empty/zero means
	// the Dym-Name is not for immediate purchase and must wait until the Sell-Order expired.
	SellPrice *types.Coin `protobuf:"bytes,5,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
}

func (m *MsgPlaceSellOrder) Reset()         { *m = MsgPlaceSellOrder{} }
func (m *MsgPlaceSellOrder) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceSellOrder) ProtoMessage()    {}
func (*MsgPlaceSellOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{12}
}
func (m *MsgPlaceSellOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceSellOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceSellOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceSellOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceSellOrder.Merge(m, src)
}
func (m *MsgPlaceSellOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceSellOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceSellOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceSellOrder proto.InternalMessageInfo

func (m *MsgPlaceSellOrder) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *MsgPlaceSellOrder) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_AT_UNKNOWN
}

func (m *MsgPlaceSellOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgPlaceSellOrder) GetMinPrice() types.Coin {
	if m != nil {
		return m.MinPrice
	}
	return types.Coin{}
}

func (m *MsgPlaceSellOrder) GetSellPrice() *types.Coin {
	if m != nil {
		return m.SellPrice
	}
	return nil
}

// MsgPlaceSellOrderResponse defines the response after placed the Sell-Order.
type MsgPlaceSellOrderResponse struct {
}

func (m *MsgPlaceSellOrderResponse) Reset()         { *m = MsgPlaceSellOrderResponse{} }
func (m *MsgPlaceSellOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceSellOrderResponse) ProtoMessage()    {}
func (*MsgPlaceSellOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{13}
}
func (m *MsgPlaceSellOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceSellOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceSellOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceSellOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceSellOrderResponse.Merge(m, src)
}
func (m *MsgPlaceSellOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceSellOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceSellOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceSellOrderResponse proto.InternalMessageInfo

// MsgCancelSellOrder defines the message used for user to cancel a Sell-Order.
type MsgCancelSellOrder struct {
	// asset_id is the Dym-Name/Alias to cancel selling.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// asset_type is the type of the asset of the order, is Dym-Name/Alias.
	AssetType AssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=dymensionxyz.dymension.dymns.AssetType" json:"asset_type,omitempty"`
	// owner is the bech32-encoded address of the account which owns the Dym-Name as well as the order.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgCancelSellOrder) Reset()         { *m = MsgCancelSellOrder{} }
func (m *MsgCancelSellOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSellOrder) ProtoMessage()    {}
func (*MsgCancelSellOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{14}
}
func (m *MsgCancelSellOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSellOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSellOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSellOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSellOrder.Merge(m, src)
}
func (m *MsgCancelSellOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSellOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSellOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSellOrder proto.InternalMessageInfo

func (m *MsgCancelSellOrder) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *MsgCancelSellOrder) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_AT_UNKNOWN
}

func (m *MsgCancelSellOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// MsgCancelSellOrderResponse defines the response for the Sell-Order cancellation.
type MsgCancelSellOrderResponse struct {
}

func (m *MsgCancelSellOrderResponse) Reset()         { *m = MsgCancelSellOrderResponse{} }
func (m *MsgCancelSellOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSellOrderResponse) ProtoMessage()    {}
func (*MsgCancelSellOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{15}
}
func (m *MsgCancelSellOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSellOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSellOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSellOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSellOrderResponse.Merge(m, src)
}
func (m *MsgCancelSellOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSellOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSellOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSellOrderResponse proto.InternalMessageInfo

// MsgPurchaseOrder defines the message used for user to bid/purchase a Sell-Order.
type MsgPurchaseOrder struct {
	// asset_id is the Dym-Name/Alias to be purchased for.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// asset_type is the type of the asset of the order, is Dym-Name/Alias.
	AssetType AssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=dymensionxyz.dymension.dymns.AssetType" json:"asset_type,omitempty"`
	// params is the list of parameters of the bid.
	// It is empty for asset type Dym-Name.
	// It has one element for asset type Alias, which is the rollapp_id to assigned for.
	Params []string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
	// buyer is the account address of the account which is purchasing the Dym-Name.
	Buyer string `protobuf:"bytes,4,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// offer is the price that buyer is willing to pay for the Dym-Name.
	Offer types.Coin `protobuf:"bytes,5,opt,name=offer,proto3" json:"offer"`
}

func (m *MsgPurchaseOrder) Reset()         { *m = MsgPurchaseOrder{} }
func (m *MsgPurchaseOrder) String() string { return proto.CompactTextString(m) }
func (*MsgPurchaseOrder) ProtoMessage()    {}
func (*MsgPurchaseOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{16}
}
func (m *MsgPurchaseOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPurchaseOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPurchaseOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPurchaseOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPurchaseOrder.Merge(m, src)
}
func (m *MsgPurchaseOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgPurchaseOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPurchaseOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPurchaseOrder proto.InternalMessageInfo

func (m *MsgPurchaseOrder) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *MsgPurchaseOrder) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_AT_UNKNOWN
}

func (m *MsgPurchaseOrder) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *MsgPurchaseOrder) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgPurchaseOrder) GetOffer() types.Coin {
	if m != nil {
		return m.Offer
	}
	return types.Coin{}
}

// MsgPurchaseOrderResponse defines the response for the purchase order.
type MsgPurchaseOrderResponse struct {
}

func (m *MsgPurchaseOrderResponse) Reset()         { *m = MsgPurchaseOrderResponse{} }
func (m *MsgPurchaseOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPurchaseOrderResponse) ProtoMessage()    {}
func (*MsgPurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{17}
}
func (m *MsgPurchaseOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPurchaseOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPurchaseOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPurchaseOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPurchaseOrderResponse.Merge(m, src)
}
func (m *MsgPurchaseOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPurchaseOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPurchaseOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPurchaseOrderResponse proto.InternalMessageInfo

// MsgPlaceBuyOrder defines the message used for user to place an offer, to buy a Dym-Name.
type MsgPlaceBuyOrder struct {
	// asset_id is the Dym-Name/Alias wishing to buy.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// asset_type is the type of the asset of the order, is Dym-Name/Alias.
	AssetType AssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=dymensionxyz.dymension.dymns.AssetType" json:"asset_type,omitempty"`
	// params is the list of parameters of the offer.
	// It is empty for asset type Dym-Name.
	// It has one element for asset type Alias, which is the rollapp_id to assigned for.
	Params []string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
	// buyer is the account address of the account which is purchasing the Dym-Name.
	Buyer string `protobuf:"bytes,4,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// continue_order_id is the optional field, if the buyer wants to extends an existing offer.
	ContinueOrderId string `protobuf:"bytes,5,opt,name=continue_order_id,json=continueOrderId,proto3" json:"continue_order_id,omitempty"`
	// offer is the price that buyer is willing to pay for the Dym-Name.
	Offer types.Coin `protobuf:"bytes,6,opt,name=offer,proto3" json:"offer"`
}

func (m *MsgPlaceBuyOrder) Reset()         { *m = MsgPlaceBuyOrder{} }
func (m *MsgPlaceBuyOrder) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceBuyOrder) ProtoMessage()    {}
func (*MsgPlaceBuyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{18}
}
func (m *MsgPlaceBuyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceBuyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceBuyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceBuyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceBuyOrder.Merge(m, src)
}
func (m *MsgPlaceBuyOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceBuyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceBuyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceBuyOrder proto.InternalMessageInfo

func (m *MsgPlaceBuyOrder) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *MsgPlaceBuyOrder) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_AT_UNKNOWN
}

func (m *MsgPlaceBuyOrder) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *MsgPlaceBuyOrder) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgPlaceBuyOrder) GetContinueOrderId() string {
	if m != nil {
		return m.ContinueOrderId
	}
	return ""
}

func (m *MsgPlaceBuyOrder) GetOffer() types.Coin {
	if m != nil {
		return m.Offer
	}
	return types.Coin{}
}

// MsgPlaceBuyOrderResponse defines the response after placed the Buy-Order.
type MsgPlaceBuyOrderResponse struct {
	// order_id is the unique identifier of the new generated Buy-Order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgPlaceBuyOrderResponse) Reset()         { *m = MsgPlaceBuyOrderResponse{} }
func (m *MsgPlaceBuyOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceBuyOrderResponse) ProtoMessage()    {}
func (*MsgPlaceBuyOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{19}
}
func (m *MsgPlaceBuyOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceBuyOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceBuyOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceBuyOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceBuyOrderResponse.Merge(m, src)
}
func (m *MsgPlaceBuyOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceBuyOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceBuyOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceBuyOrderResponse proto.InternalMessageInfo

func (m *MsgPlaceBuyOrderResponse) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

// MsgCancelBuyOrder defines the message used for user to cancel a Buy-Order.
type MsgCancelBuyOrder struct {
	// order_id is the unique identifier of the Buy-Order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// buyer is the account address of the account which is purchasing the Dym-Name.
	Buyer string `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
}

func (m *MsgCancelBuyOrder) Reset()         { *m = MsgCancelBuyOrder{} }
func (m *MsgCancelBuyOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCancelBuyOrder) ProtoMessage()    {}
func (*MsgCancelBuyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{20}
}
func (m *MsgCancelBuyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelBuyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelBuyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelBuyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelBuyOrder.Merge(m, src)
}
func (m *MsgCancelBuyOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelBuyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelBuyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelBuyOrder proto.InternalMessageInfo

func (m *MsgCancelBuyOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgCancelBuyOrder) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

// MsgCancelBuyOrderResponse defines the response for the Buy-Order cancellation.
type MsgCancelBuyOrderResponse struct {
}

func (m *MsgCancelBuyOrderResponse) Reset()         { *m = MsgCancelBuyOrderResponse{} }
func (m *MsgCancelBuyOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelBuyOrderResponse) ProtoMessage()    {}
func (*MsgCancelBuyOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{21}
}
func (m *MsgCancelBuyOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelBuyOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelBuyOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelBuyOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelBuyOrderResponse.Merge(m, src)
}
func (m *MsgCancelBuyOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelBuyOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelBuyOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelBuyOrderResponse proto.InternalMessageInfo

// MsgAcceptBuyOrder defines the message used for user to accept a Buy-Order.
type MsgAcceptBuyOrder struct {
	// order_id is the unique identifier of the Buy-Order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// owner is the account address of the account which owns the Dym-Name.
	// And is the only one who can accept the offer.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// min_accept is the minimum price that the owner is willing to accept for the Dym-Name.
	// If this amount matches the offer, the Dym-Name will be transferred to the buyer.
	// If the offer is lower than this amount, this information will be updated into offer record to inform the buyer.
	MinAccept types.Coin `protobuf:"bytes,3,opt,name=min_accept,json=minAccept,proto3" json:"min_accept"`
}

func (m *MsgAcceptBuyOrder) Reset()         { *m = MsgAcceptBuyOrder{} }
func (m *MsgAcceptBuyOrder) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptBuyOrder) ProtoMessage()    {}
func (*MsgAcceptBuyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{22}
}
func (m *MsgAcceptBuyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptBuyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptBuyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptBuyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptBuyOrder.Merge(m, src)
}
func (m *MsgAcceptBuyOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptBuyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptBuyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptBuyOrder proto.InternalMessageInfo

func (m *MsgAcceptBuyOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgAcceptBuyOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgAcceptBuyOrder) GetMinAccept() types.Coin {
	if m != nil {
		return m.MinAccept
	}
	return types.Coin{}
}

// MsgAcceptBuyOrderResponse defines the response for the Buy-Order acceptance.
type MsgAcceptBuyOrderResponse struct {
	// accepted is the flag to indicate if the offer is accepted (price matched).
	Accepted bool `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (m *MsgAcceptBuyOrderResponse) Reset()         { *m = MsgAcceptBuyOrderResponse{} }
func (m *MsgAcceptBuyOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptBuyOrderResponse) ProtoMessage()    {}
func (*MsgAcceptBuyOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{23}
}
func (m *MsgAcceptBuyOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptBuyOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptBuyOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptBuyOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptBuyOrderResponse.Merge(m, src)
}
func (m *MsgAcceptBuyOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptBuyOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptBuyOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptBuyOrderResponse proto.InternalMessageInfo

func (m *MsgAcceptBuyOrderResponse) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

// MsgUpdateParams allows to update module params.
type MsgUpdateParams struct {
	// authority is the address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// new_price_params is the optional update new price params if provided.
	NewPriceParams *PriceParams `protobuf:"bytes,2,opt,name=new_price_params,json=newPriceParams,proto3" json:"new_price_params,omitempty"`
	// new_chains_params is the optional update new chains params if provided.
	// Not recommended, consider using a dedicated gov proposal for this instead of update params by this way.
	NewChainsParams *ChainsParams `protobuf:"bytes,3,opt,name=new_chains_params,json=newChainsParams,proto3" json:"new_chains_params,omitempty"`
	// new_misc_params is the optional update new misc params if provided.
	NewMiscParams *MiscParams `protobuf:"bytes,4,opt,name=new_misc_params,json=newMiscParams,proto3" json:"new_misc_params,omitempty"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{24}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetNewPriceParams() *PriceParams {
	if m != nil {
		return m.NewPriceParams
	}
	return nil
}

func (m *MsgUpdateParams) GetNewChainsParams() *ChainsParams {
	if m != nil {
		return m.NewChainsParams
	}
	return nil
}

func (m *MsgUpdateParams) GetNewMiscParams() *MiscParams {
	if m != nil {
		return m.NewMiscParams
	}
	return nil
}

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{25}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterName)(nil), "dymensionxyz.dymension.dymns.MsgRegisterName")
	proto.RegisterType((*MsgRegisterNameResponse)(nil), "dymensionxyz.dymension.dymns.MsgRegisterNameResponse")
	proto.RegisterType((*MsgRegisterAlias)(nil), "dymensionxyz.dymension.dymns.MsgRegisterAlias")
	proto.RegisterType((*MsgRegisterAliasResponse)(nil), "dymensionxyz.dymension.dymns.MsgRegisterAliasResponse")
	proto.RegisterType((*MsgTransferDymNameOwnership)(nil), "dymensionxyz.dymension.dymns.MsgTransferDymNameOwnership")
	proto.RegisterType((*MsgTransferDymNameOwnershipResponse)(nil), "dymensionxyz.dymension.dymns.MsgTransferDymNameOwnershipResponse")
	proto.RegisterType((*MsgSetController)(nil), "dymensionxyz.dymension.dymns.MsgSetController")
	proto.RegisterType((*MsgSetControllerResponse)(nil), "dymensionxyz.dymension.dymns.MsgSetControllerResponse")
	proto.RegisterType((*MsgUpdateResolveAddress)(nil), "dymensionxyz.dymension.dymns.MsgUpdateResolveAddress")
	proto.RegisterType((*MsgUpdateResolveAddressResponse)(nil), "dymensionxyz.dymension.dymns.MsgUpdateResolveAddressResponse")
	proto.RegisterType((*MsgUpdateDetails)(nil), "dymensionxyz.dymension.dymns.MsgUpdateDetails")
	proto.RegisterType((*MsgUpdateDetailsResponse)(nil), "dymensionxyz.dymension.dymns.MsgUpdateDetailsResponse")
	proto.RegisterType((*MsgPlaceSellOrder)(nil), "dymensionxyz.dymension.dymns.MsgPlaceSellOrder")
	proto.RegisterType((*MsgPlaceSellOrderResponse)(nil), "dymensionxyz.dymension.dymns.MsgPlaceSellOrderResponse")
	proto.RegisterType((*MsgCancelSellOrder)(nil), "dymensionxyz.dymension.dymns.MsgCancelSellOrder")
	proto.RegisterType((*MsgCancelSellOrderResponse)(nil), "dymensionxyz.dymension.dymns.MsgCancelSellOrderResponse")
	proto.RegisterType((*MsgPurchaseOrder)(nil), "dymensionxyz.dymension.dymns.MsgPurchaseOrder")
	proto.RegisterType((*MsgPurchaseOrderResponse)(nil), "dymensionxyz.dymension.dymns.MsgPurchaseOrderResponse")
	proto.RegisterType((*MsgPlaceBuyOrder)(nil), "dymensionxyz.dymension.dymns.MsgPlaceBuyOrder")
	proto.RegisterType((*MsgPlaceBuyOrderResponse)(nil), "dymensionxyz.dymension.dymns.MsgPlaceBuyOrderResponse")
	proto.RegisterType((*MsgCancelBuyOrder)(nil), "dymensionxyz.dymension.dymns.MsgCancelBuyOrder")
	proto.RegisterType((*MsgCancelBuyOrderResponse)(nil), "dymensionxyz.dymension.dymns.MsgCancelBuyOrderResponse")
	proto.RegisterType((*MsgAcceptBuyOrder)(nil), "dymensionxyz.dymension.dymns.MsgAcceptBuyOrder")
	proto.RegisterType((*MsgAcceptBuyOrderResponse)(nil), "dymensionxyz.dymension.dymns.MsgAcceptBuyOrderResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "dymensionxyz.dymension.dymns.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "dymensionxyz.dymension.dymns.MsgUpdateParamsResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/dymns/tx.proto", fileDescriptor_88dd2f81468013c2)
}

var fileDescriptor_88dd2f81468013c2 = []byte{
	// 1305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xda, 0x49, 0x6b, 0x3f, 0x9a, 0xa4, 0x5d, 0x45, 0xd4, 0xd9, 0x16, 0x37, 0xb8, 0xaa,
	0x48, 0x2b, 0x75, 0x4d, 0x53, 0xa5, 0x2d, 0x15, 0x20, 0x25, 0xa9, 0x10, 0x91, 0x08, 0xb5, 0x36,
	0x85, 0x03, 0x97, 0xd5, 0x78, 0x3d, 0xd9, 0xac, 0xd8, 0x9d, 0x59, 0xed, 0xac, 0x93, 0x1a, 0x21,
	0x21, 0xc1, 0x1d, 0x55, 0x1c, 0x90, 0xe0, 0x53, 0x20, 0xc1, 0x77, 0xa0, 0xc7, 0x8a, 0x53, 0x4f,
	0x08, 0xb5, 0x12, 0x7c, 0x0d, 0x34, 0x7f, 0xbc, 0xde, 0x71, 0xfd, 0x67, 0x1d, 0x21, 0xe0, 0xe4,
	0x7d, 0x33, 0xef, 0xcf, 0xef, 0xfd, 0xe6, 0xbd, 0x99, 0x27, 0xc3, 0xb5, 0x6e, 0x3f, 0xc2, 0x84,
	0x05, 0x94, 0x3c, 0xee, 0x7f, 0xd1, 0xca, 0x04, 0xfe, 0x45, 0x58, 0x2b, 0x7d, 0x6c, 0xc7, 0x09,
	0x4d, 0xa9, 0x79, 0x39, 0xaf, 0x66, 0x67, 0x82, 0x2d, 0xd4, 0xac, 0x55, 0x9f, 0xfa, 0x54, 0x28,
	0xb6, 0xf8, 0x97, 0xb4, 0xb1, 0x1a, 0x1e, 0x65, 0x11, 0x65, 0xad, 0x0e, 0x62, 0xb8, 0x75, 0x7c,
	0xab, 0x83, 0x53, 0x74, 0xab, 0xe5, 0xd1, 0x80, 0xa8, 0xfd, 0x8b, 0x6a, 0x3f, 0x62, 0x7e, 0xeb,
	0xf8, 0x16, 0xff, 0x51, 0x1b, 0x6b, 0x72, 0xc3, 0x95, 0x1e, 0xa5, 0xa0, 0xb6, 0xae, 0x4f, 0x85,
	0x1b, 0xa1, 0xe4, 0x73, 0x9c, 0x16, 0x52, 0x8d, 0x51, 0x82, 0x22, 0xe5, 0xb5, 0xf9, 0xab, 0x01,
	0x2b, 0xfb, 0xcc, 0x77, 0xb0, 0x1f, 0xb0, 0x14, 0x27, 0x1f, 0xa3, 0x08, 0x9b, 0x26, 0x2c, 0x10,
	0x14, 0xe1, 0xba, 0xb1, 0x6e, 0x6c, 0xd4, 0x1c, 0xf1, 0x6d, 0xae, 0xc2, 0x22, 0x3d, 0x21, 0x38,
	0xa9, 0x97, 0xc5, 0xa2, 0x14, 0x4c, 0x0b, 0xaa, 0xdd, 0x5e, 0x82, 0xd2, 0x80, 0x92, 0x7a, 0x65,
	0xdd, 0xd8, 0xa8, 0x38, 0x99, 0x6c, 0x7e, 0x08, 0x2b, 0x1e, 0x25, 0x87, 0x41, 0x12, 0xb9, 0x31,
	0xe2, 0x10, 0xd2, 0xfa, 0xc2, 0xba, 0xb1, 0xf1, 0xda, 0xe6, 0x9a, 0xad, 0xf2, 0xe2, 0xec, 0xd8,
	0x8a, 0x1d, 0x7b, 0x97, 0x06, 0x64, 0x67, 0xe1, 0xe9, 0xef, 0x57, 0x4a, 0xce, 0xb2, 0xb2, 0x6b,
	0x4b, 0x33, 0xb3, 0x0e, 0x67, 0x3d, 0x4a, 0x52, 0xe4, 0xa5, 0xf5, 0x45, 0x11, 0x7d, 0x20, 0xde,
	0x87, 0xaf, 0xff, 0xfa, 0xe9, 0x86, 0xc4, 0xd2, 0x5c, 0x83, 0x8b, 0x23, 0x89, 0x38, 0x98, 0xc5,
	0x94, 0x30, 0xdc, 0xfc, 0xd9, 0x80, 0xf3, 0xb9, 0xbd, 0xed, 0x30, 0x40, 0x8c, 0x67, 0x84, 0xf8,
	0x87, 0x4a, 0x53, 0x0a, 0xe6, 0x1b, 0x00, 0x09, 0x0d, 0x43, 0x14, 0xc7, 0x6e, 0xd0, 0x55, 0xc9,
	0xd6, 0xd4, 0xca, 0x5e, 0x77, 0x48, 0x43, 0x25, 0x4f, 0xc3, 0x3f, 0x96, 0xaa, 0x96, 0x90, 0x05,
	0xf5, 0x51, 0xd0, 0x59, 0x46, 0x31, 0x5c, 0xda, 0x67, 0xfe, 0xa3, 0x04, 0x11, 0x76, 0x88, 0x93,
	0x07, 0xfd, 0x88, 0xe7, 0xfb, 0x90, 0x9b, 0xb1, 0xa3, 0x20, 0x9e, 0xe3, 0x04, 0x2f, 0x41, 0x8d,
	0xe0, 0x13, 0x37, 0x9f, 0x54, 0x95, 0xe0, 0x13, 0xe1, 0x4a, 0x43, 0x73, 0x0d, 0xae, 0x4e, 0x89,
	0x98, 0x01, 0x3b, 0x12, 0x4c, 0x1f, 0xe0, 0x74, 0x97, 0x92, 0x94, 0xf3, 0x86, 0x93, 0x39, 0xd0,
	0x34, 0x00, 0xbc, 0xcc, 0x4e, 0xc1, 0xc9, 0xad, 0x8c, 0xa1, 0x47, 0x8b, 0x94, 0x3f, 0x70, 0x5e,
	0x0c, 0x9f, 0xc4, 0x5d, 0x94, 0xf2, 0x32, 0xa0, 0xe1, 0x31, 0xde, 0xee, 0x76, 0x13, 0xcc, 0xd8,
	0x58, 0x34, 0x7a, 0xdc, 0xf2, 0x68, 0x5c, 0x73, 0x0d, 0xaa, 0xde, 0x11, 0x0a, 0x08, 0xaf, 0x89,
	0x8a, 0x2a, 0x41, 0x2e, 0xef, 0x75, 0xf9, 0x16, 0xeb, 0x75, 0x5c, 0xe1, 0x72, 0x41, 0x6e, 0xb1,
	0x5e, 0x47, 0xf4, 0x11, 0xaf, 0x25, 0x19, 0xdb, 0x4d, 0xa9, 0x2a, 0xdd, 0x9a, 0x5a, 0x79, 0x44,
	0xef, 0xaf, 0xf0, 0x64, 0x72, 0x51, 0x9a, 0x6f, 0xc2, 0x95, 0x09, 0xa0, 0xb3, 0xc4, 0xbe, 0x97,
	0x95, 0x2c, 0x75, 0x1e, 0xe0, 0x14, 0x05, 0xe1, 0xe9, 0x32, 0xca, 0xf5, 0x54, 0x45, 0xeb, 0x29,
	0xf3, 0x2a, 0x2c, 0x79, 0x21, 0x46, 0x89, 0x2b, 0x4a, 0xd3, 0x67, 0x22, 0xab, 0xaa, 0x73, 0x4e,
	0x2c, 0xee, 0xca, 0xb5, 0x57, 0xb1, 0xcb, 0xd3, 0xd0, 0x70, 0x65, 0xa0, 0x9f, 0x94, 0xe1, 0xc2,
	0x3e, 0xf3, 0xdb, 0x21, 0xf2, 0xf0, 0x01, 0x0e, 0xc3, 0x87, 0x49, 0x57, 0x72, 0x8a, 0x18, 0xc3,
	0x29, 0xe7, 0x54, 0x22, 0x3f, 0x2b, 0xe4, 0xbd, 0xae, 0xf9, 0x01, 0x80, 0xdc, 0x4a, 0xfb, 0x31,
	0x16, 0xe0, 0x97, 0x37, 0xdf, 0xb2, 0xa7, 0xdd, 0xc3, 0xf6, 0x36, 0xd7, 0x7f, 0xd4, 0x8f, 0xb1,
	0x53, 0x43, 0x83, 0xcf, 0x09, 0xdd, 0xfa, 0x2e, 0xd4, 0xa2, 0x80, 0xb8, 0x71, 0x12, 0x78, 0xb8,
	0x68, 0x9f, 0x56, 0xa3, 0x80, 0xb4, 0xb9, 0x81, 0x79, 0x0f, 0x80, 0xe1, 0x30, 0x54, 0xe6, 0x8b,
	0x33, 0xcc, 0x9d, 0x1a, 0x57, 0x16, 0x96, 0x5a, 0xf1, 0x5e, 0x82, 0xb5, 0x57, 0x18, 0xc9, 0xf8,
	0xfa, 0xc1, 0x00, 0x73, 0x9f, 0xf9, 0xbb, 0x88, 0x78, 0x38, 0xfc, 0xef, 0x09, 0xd3, 0x80, 0x5f,
	0x06, 0xeb, 0x55, 0x68, 0x19, 0xf2, 0x3f, 0x65, 0x79, 0xb6, 0x7b, 0x89, 0x77, 0x84, 0x18, 0xfe,
	0xd7, 0x70, 0xbf, 0x0e, 0x67, 0xe4, 0xab, 0x56, 0xaf, 0xac, 0x57, 0x36, 0x6a, 0x8e, 0x92, 0x78,
	0x3e, 0x9d, 0x5e, 0x1f, 0x27, 0xaa, 0x33, 0xa5, 0x60, 0x6e, 0xc1, 0x22, 0x3d, 0x3c, 0xc4, 0xc9,
	0xcc, 0xd3, 0x53, 0x87, 0x2f, 0xb5, 0x15, 0x0d, 0xc2, 0x85, 0x2a, 0x77, 0x2d, 0xcf, 0x8c, 0x84,
	0xef, 0xca, 0x92, 0x04, 0x7e, 0xb8, 0x3b, 0xbd, 0xfe, 0xff, 0x94, 0x84, 0x1b, 0x70, 0x81, 0xb7,
	0x6f, 0x40, 0x7a, 0xd8, 0xa5, 0x1c, 0x22, 0x47, 0x26, 0xef, 0xa8, 0x95, 0xc1, 0x86, 0x80, 0xbe,
	0xd7, 0x1d, 0x12, 0x76, 0xe6, 0xd4, 0x84, 0x6d, 0x49, 0xc2, 0xf2, 0x9c, 0x0c, 0x08, 0xe3, 0xdc,
	0x64, 0x08, 0x14, 0x37, 0x54, 0x46, 0x6e, 0xb6, 0xc5, 0xcd, 0x21, 0xcb, 0x2d, 0xcf, 0xe5, 0x04,
	0xfd, 0x61, 0xae, 0xe5, 0x5c, 0xae, 0x1a, 0x10, 0xd9, 0x79, 0xba, 0xc7, 0xe1, 0x4d, 0x65, 0x88,
	0x78, 0xdb, 0x9e, 0x87, 0xe3, 0xb4, 0x60, 0xbc, 0x31, 0xcf, 0xd8, 0xfb, 0x00, 0xfc, 0x86, 0x41,
	0xc2, 0x8d, 0xe8, 0xa5, 0x02, 0xa4, 0xf1, 0x4b, 0x49, 0x06, 0xd6, 0x1a, 0xee, 0xae, 0xc0, 0xab,
	0x23, 0xca, 0x98, 0xb3, 0xa0, 0x2a, 0x83, 0x60, 0x89, 0xac, 0xea, 0x64, 0x72, 0xf3, 0x79, 0x59,
	0x4c, 0x76, 0xf2, 0x4a, 0x6e, 0xcb, 0x52, 0xb8, 0x03, 0x35, 0xd4, 0x4b, 0x8f, 0x68, 0x12, 0xa4,
	0x7d, 0x99, 0xca, 0x4e, 0xfd, 0xb7, 0x5f, 0x6e, 0xae, 0x2a, 0x68, 0xea, 0xb5, 0x39, 0x48, 0x93,
	0x80, 0xf8, 0xce, 0x50, 0xd5, 0x3c, 0x80, 0xf3, 0x7c, 0x4a, 0x10, 0x77, 0x9e, 0xab, 0x8a, 0xac,
	0x2c, 0xd2, 0xba, 0x3e, 0xbd, 0x50, 0xc5, 0xcd, 0x27, 0x83, 0x3b, 0xcb, 0x04, 0x9f, 0xe4, 0x64,
	0xf3, 0x53, 0xb8, 0xc0, 0x9d, 0x8a, 0x87, 0x94, 0xb9, 0x59, 0xe9, 0x72, 0xaf, 0x37, 0xa6, 0x7b,
	0xdd, 0x15, 0x26, 0xca, 0xed, 0x0a, 0xc1, 0x27, 0xf9, 0x05, 0xb3, 0x0d, 0x7c, 0xc9, 0x8d, 0x02,
	0xe6, 0x0d, 0xbc, 0xca, 0x5b, 0x7e, 0x63, 0xba, 0xd7, 0xfd, 0x80, 0x79, 0xca, 0xe7, 0x12, 0xc1,
	0x27, 0x43, 0xf1, 0xfe, 0x32, 0x3f, 0x8f, 0x21, 0x1d, 0x6a, 0xd4, 0xcc, 0x33, 0x3b, 0x38, 0x91,
	0xcd, 0x6f, 0x96, 0xa0, 0xb2, 0xcf, 0x7c, 0xf3, 0x18, 0xce, 0x69, 0x33, 0xf5, 0xcd, 0x19, 0xb1,
	0xf5, 0xc9, 0xd5, 0xda, 0x9a, 0x4b, 0x3d, 0xab, 0xdf, 0x92, 0xd9, 0x87, 0x25, 0x7d, 0xcc, 0xb5,
	0x0b, 0x7b, 0x12, 0xfa, 0xd6, 0x9d, 0xf9, 0xf4, 0x73, 0xa1, 0x7f, 0x34, 0xa0, 0x3e, 0x71, 0x22,
	0x7d, 0x67, 0xa6, 0xdb, 0x49, 0xa6, 0xd6, 0xf6, 0xa9, 0x4d, 0x75, 0x5e, 0xf4, 0xa1, 0x74, 0x36,
	0x2f, 0x9a, 0x7e, 0x01, 0x5e, 0xc6, 0x8f, 0xa2, 0x25, 0xf3, 0x5b, 0x03, 0x56, 0xc7, 0x4e, 0xa2,
	0xb3, 0x0f, 0x79, 0x9c, 0x99, 0xf5, 0xde, 0xa9, 0xcc, 0x74, 0x2e, 0xf4, 0x01, 0xd2, 0x2e, 0xe8,
	0x51, 0xe9, 0x17, 0xe0, 0x62, 0xfc, 0x20, 0x58, 0x32, 0xbf, 0x84, 0xe5, 0x91, 0x31, 0xb0, 0x35,
	0xd3, 0x97, 0x6e, 0x60, 0xdd, 0x9d, 0xd3, 0x20, 0x17, 0xfd, 0x2b, 0x58, 0x19, 0x1d, 0xaa, 0xde,
	0x9e, 0xe9, 0x6d, 0xc4, 0xc2, 0xba, 0x37, 0xaf, 0x85, 0xce, 0xbc, 0x3e, 0x1b, 0xcd, 0x66, 0x5e,
	0xd3, 0x2f, 0xc0, 0xfc, 0xf8, 0x99, 0x44, 0x86, 0xd6, 0x26, 0x12, 0xbb, 0x18, 0x8f, 0x03, 0xfd,
	0x22, 0xa1, 0xc7, 0xbd, 0xee, 0xf2, 0xd0, 0x47, 0x5e, 0xf0, 0x56, 0x41, 0x0e, 0xb3, 0xe0, 0x77,
	0xe7, 0x34, 0xd0, 0xa3, 0x8f, 0xbc, 0xe7, 0xb3, 0xa3, 0xeb, 0x06, 0x05, 0xa2, 0x8f, 0x7f, 0x9f,
	0x9b, 0x25, 0x33, 0x85, 0x73, 0xda, 0x0b, 0x7c, 0xb3, 0x60, 0xeb, 0x48, 0x75, 0x6b, 0x6b, 0x2e,
	0xf5, 0x41, 0xdc, 0x9d, 0x8f, 0x9e, 0xbe, 0x68, 0x18, 0xcf, 0x5e, 0x34, 0x8c, 0x3f, 0x5e, 0x34,
	0x8c, 0x27, 0x2f, 0x1b, 0xa5, 0x67, 0x2f, 0x1b, 0xa5, 0xe7, 0x2f, 0x1b, 0xa5, 0xcf, 0x36, 0xfd,
	0x20, 0x3d, 0xea, 0x75, 0x6c, 0x8f, 0x46, 0xad, 0x09, 0xff, 0x12, 0x1d, 0xdf, 0x6e, 0x3d, 0x1e,
	0xfc, 0x09, 0xd6, 0x8f, 0x31, 0xeb, 0x9c, 0x11, 0x7f, 0x15, 0xdd, 0xfe, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0x59, 0x79, 0xe6, 0x28, 0x31, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterName is message handler, handles registration of a new Dym-Name
	// or extends the ownership duration of an existing Dym-Name.
	RegisterName(ctx context.Context, in *MsgRegisterName, opts ...grpc.CallOption) (*MsgRegisterNameResponse, error)
	// RegisterAlias is message handler, handles registration of a new Alias for an existing RollApp.
	RegisterAlias(ctx context.Context, in *MsgRegisterAlias, opts ...grpc.CallOption) (*MsgRegisterAliasResponse, error)
	// TransferDymNameOwnership is message handler,
	// handles transfer of ownership of a Dym-Name, performed by the owner.
	TransferDymNameOwnership(ctx context.Context, in *MsgTransferDymNameOwnership, opts ...grpc.CallOption) (*MsgTransferDymNameOwnershipResponse, error)
	// SetController is message handler,
	// handles setting a controller for a Dym-Name, performed by the owner.
	SetController(ctx context.Context, in *MsgSetController, opts ...grpc.CallOption) (*MsgSetControllerResponse, error)
	// UpdateResolveAddress is message handler,
	// handles updating Dym-Name-Address resolution configuration, performed by the controller.
	UpdateResolveAddress(ctx context.Context, in *MsgUpdateResolveAddress, opts ...grpc.CallOption) (*MsgUpdateResolveAddressResponse, error)
	// UpdateDetails is message handler,
	// handles updating Dym-Name details, performed by the controller.
	UpdateDetails(ctx context.Context, in *MsgUpdateDetails, opts ...grpc.CallOption) (*MsgUpdateDetailsResponse, error)
	// PlaceSellOrder is message handler,
	// handles creating a Sell-Order that advertise a Dym-Name/Alias is for sale, performed by the owner.
	PlaceSellOrder(ctx context.Context, in *MsgPlaceSellOrder, opts ...grpc.CallOption) (*MsgPlaceSellOrderResponse, error)
	// CancelSellOrder is message handler,
	// handles canceling Sell-Order, performed by the owner.
	// This will stop the advertisement and remove the Dym-Name/Alias sale from the market.
	// Can only be performed if no one has placed a bid on the asset.
	CancelSellOrder(ctx context.Context, in *MsgCancelSellOrder, opts ...grpc.CallOption) (*MsgCancelSellOrderResponse, error)
	// PurchaseOrder is message handler,
	// handles purchasing a Dym-Name/Alias from a Sell-Order, performed by the buyer.
	PurchaseOrder(ctx context.Context, in *MsgPurchaseOrder, opts ...grpc.CallOption) (*MsgPurchaseOrderResponse, error)
	// PlaceBuyOrder is message handler,
	// handles creating an offer to buy a Dym-Name/Alias, performed by the buyer.
	PlaceBuyOrder(ctx context.Context, in *MsgPlaceBuyOrder, opts ...grpc.CallOption) (*MsgPlaceBuyOrderResponse, error)
	// CancelBuyOrder is message handler,
	// handles canceling a Buy-Order, performed by the buyer who placed the offer.
	CancelBuyOrder(ctx context.Context, in *MsgCancelBuyOrder, opts ...grpc.CallOption) (*MsgCancelBuyOrderResponse, error)
	// AcceptBuyOrder is message handler,
	// handles accepting a Buy-Order or raising the amount for negotiation,
	// performed by the owner of the asset.
	AcceptBuyOrder(ctx context.Context, in *MsgAcceptBuyOrder, opts ...grpc.CallOption) (*MsgAcceptBuyOrderResponse, error)
	// UpdateParams is used for updating module params.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterName(ctx context.Context, in *MsgRegisterName, opts ...grpc.CallOption) (*MsgRegisterNameResponse, error) {
	out := new(MsgRegisterNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/RegisterName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterAlias(ctx context.Context, in *MsgRegisterAlias, opts ...grpc.CallOption) (*MsgRegisterAliasResponse, error) {
	out := new(MsgRegisterAliasResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/RegisterAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferDymNameOwnership(ctx context.Context, in *MsgTransferDymNameOwnership, opts ...grpc.CallOption) (*MsgTransferDymNameOwnershipResponse, error) {
	out := new(MsgTransferDymNameOwnershipResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/TransferDymNameOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetController(ctx context.Context, in *MsgSetController, opts ...grpc.CallOption) (*MsgSetControllerResponse, error) {
	out := new(MsgSetControllerResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/SetController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateResolveAddress(ctx context.Context, in *MsgUpdateResolveAddress, opts ...grpc.CallOption) (*MsgUpdateResolveAddressResponse, error) {
	out := new(MsgUpdateResolveAddressResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/UpdateResolveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDetails(ctx context.Context, in *MsgUpdateDetails, opts ...grpc.CallOption) (*MsgUpdateDetailsResponse, error) {
	out := new(MsgUpdateDetailsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/UpdateDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlaceSellOrder(ctx context.Context, in *MsgPlaceSellOrder, opts ...grpc.CallOption) (*MsgPlaceSellOrderResponse, error) {
	out := new(MsgPlaceSellOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/PlaceSellOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSellOrder(ctx context.Context, in *MsgCancelSellOrder, opts ...grpc.CallOption) (*MsgCancelSellOrderResponse, error) {
	out := new(MsgCancelSellOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/CancelSellOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PurchaseOrder(ctx context.Context, in *MsgPurchaseOrder, opts ...grpc.CallOption) (*MsgPurchaseOrderResponse, error) {
	out := new(MsgPurchaseOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/PurchaseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlaceBuyOrder(ctx context.Context, in *MsgPlaceBuyOrder, opts ...grpc.CallOption) (*MsgPlaceBuyOrderResponse, error) {
	out := new(MsgPlaceBuyOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/PlaceBuyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelBuyOrder(ctx context.Context, in *MsgCancelBuyOrder, opts ...grpc.CallOption) (*MsgCancelBuyOrderResponse, error) {
	out := new(MsgCancelBuyOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/CancelBuyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcceptBuyOrder(ctx context.Context, in *MsgAcceptBuyOrder, opts ...grpc.CallOption) (*MsgAcceptBuyOrderResponse, error) {
	out := new(MsgAcceptBuyOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/AcceptBuyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterName is message handler, handles registration of a new Dym-Name
	// or extends the ownership duration of an existing Dym-Name.
	RegisterName(context.Context, *MsgRegisterName) (*MsgRegisterNameResponse, error)
	// RegisterAlias is message handler, handles registration of a new Alias for an existing RollApp.
	RegisterAlias(context.Context, *MsgRegisterAlias) (*MsgRegisterAliasResponse, error)
	// TransferDymNameOwnership is message handler,
	// handles transfer of ownership of a Dym-Name, performed by the owner.
	TransferDymNameOwnership(context.Context, *MsgTransferDymNameOwnership) (*MsgTransferDymNameOwnershipResponse, error)
	// SetController is message handler,
	// handles setting a controller for a Dym-Name, performed by the owner.
	SetController(context.Context, *MsgSetController) (*MsgSetControllerResponse, error)
	// UpdateResolveAddress is message handler,
	// handles updating Dym-Name-Address resolution configuration, performed by the controller.
	UpdateResolveAddress(context.Context, *MsgUpdateResolveAddress) (*MsgUpdateResolveAddressResponse, error)
	// UpdateDetails is message handler,
	// handles updating Dym-Name details, performed by the controller.
	UpdateDetails(context.Context, *MsgUpdateDetails) (*MsgUpdateDetailsResponse, error)
	// PlaceSellOrder is message handler,
	// handles creating a Sell-Order that advertise a Dym-Name/Alias is for sale, performed by the owner.
	PlaceSellOrder(context.Context, *MsgPlaceSellOrder) (*MsgPlaceSellOrderResponse, error)
	// CancelSellOrder is message handler,
	// handles canceling Sell-Order, performed by the owner.
	// This will stop the advertisement and remove the Dym-Name/Alias sale from the market.
	// Can only be performed if no one has placed a bid on the asset.
	CancelSellOrder(context.Context, *MsgCancelSellOrder) (*MsgCancelSellOrderResponse, error)
	// PurchaseOrder is message handler,
	// handles purchasing a Dym-Name/Alias from a Sell-Order, performed by the buyer.
	PurchaseOrder(context.Context, *MsgPurchaseOrder) (*MsgPurchaseOrderResponse, error)
	// PlaceBuyOrder is message handler,
	// handles creating an offer to buy a Dym-Name/Alias, performed by the buyer.
	PlaceBuyOrder(context.Context, *MsgPlaceBuyOrder) (*MsgPlaceBuyOrderResponse, error)
	// CancelBuyOrder is message handler,
	// handles canceling a Buy-Order, performed by the buyer who placed the offer.
	CancelBuyOrder(context.Context, *MsgCancelBuyOrder) (*MsgCancelBuyOrderResponse, error)
	// AcceptBuyOrder is message handler,
	// handles accepting a Buy-Order or raising the amount for negotiation,
	// performed by the owner of the asset.
	AcceptBuyOrder(context.Context, *MsgAcceptBuyOrder) (*MsgAcceptBuyOrderResponse, error)
	// UpdateParams is used for updating module params.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterName(ctx context.Context, req *MsgRegisterName) (*MsgRegisterNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterName not implemented")
}
func (*UnimplementedMsgServer) RegisterAlias(ctx context.Context, req *MsgRegisterAlias) (*MsgRegisterAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAlias not implemented")
}
func (*UnimplementedMsgServer) TransferDymNameOwnership(ctx context.Context, req *MsgTransferDymNameOwnership) (*MsgTransferDymNameOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferDymNameOwnership not implemented")
}
func (*UnimplementedMsgServer) SetController(ctx context.Context, req *MsgSetController) (*MsgSetControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetController not implemented")
}
func (*UnimplementedMsgServer) UpdateResolveAddress(ctx context.Context, req *MsgUpdateResolveAddress) (*MsgUpdateResolveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResolveAddress not implemented")
}
func (*UnimplementedMsgServer) UpdateDetails(ctx context.Context, req *MsgUpdateDetails) (*MsgUpdateDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDetails not implemented")
}
func (*UnimplementedMsgServer) PlaceSellOrder(ctx context.Context, req *MsgPlaceSellOrder) (*MsgPlaceSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceSellOrder not implemented")
}
func (*UnimplementedMsgServer) CancelSellOrder(ctx context.Context, req *MsgCancelSellOrder) (*MsgCancelSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSellOrder not implemented")
}
func (*UnimplementedMsgServer) PurchaseOrder(ctx context.Context, req *MsgPurchaseOrder) (*MsgPurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseOrder not implemented")
}
func (*UnimplementedMsgServer) PlaceBuyOrder(ctx context.Context, req *MsgPlaceBuyOrder) (*MsgPlaceBuyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBuyOrder not implemented")
}
func (*UnimplementedMsgServer) CancelBuyOrder(ctx context.Context, req *MsgCancelBuyOrder) (*MsgCancelBuyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBuyOrder not implemented")
}
func (*UnimplementedMsgServer) AcceptBuyOrder(ctx context.Context, req *MsgAcceptBuyOrder) (*MsgAcceptBuyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptBuyOrder not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/RegisterName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterName(ctx, req.(*MsgRegisterName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAlias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/RegisterAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAlias(ctx, req.(*MsgRegisterAlias))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferDymNameOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferDymNameOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferDymNameOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/TransferDymNameOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferDymNameOwnership(ctx, req.(*MsgTransferDymNameOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetController)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/SetController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetController(ctx, req.(*MsgSetController))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateResolveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateResolveAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateResolveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/UpdateResolveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateResolveAddress(ctx, req.(*MsgUpdateResolveAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/UpdateDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDetails(ctx, req.(*MsgUpdateDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlaceSellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlaceSellOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlaceSellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/PlaceSellOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlaceSellOrder(ctx, req.(*MsgPlaceSellOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSellOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/CancelSellOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSellOrder(ctx, req.(*MsgCancelSellOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPurchaseOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/PurchaseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PurchaseOrder(ctx, req.(*MsgPurchaseOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlaceBuyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlaceBuyOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlaceBuyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/PlaceBuyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlaceBuyOrder(ctx, req.(*MsgPlaceBuyOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelBuyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelBuyOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelBuyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/CancelBuyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelBuyOrder(ctx, req.(*MsgCancelBuyOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcceptBuyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptBuyOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptBuyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/AcceptBuyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptBuyOrder(ctx, req.(*MsgAcceptBuyOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.dymns.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterName",
			Handler:    _Msg_RegisterName_Handler,
		},
		{
			MethodName: "RegisterAlias",
			Handler:    _Msg_RegisterAlias_Handler,
		},
		{
			MethodName: "TransferDymNameOwnership",
			Handler:    _Msg_TransferDymNameOwnership_Handler,
		},
		{
			MethodName: "SetController",
			Handler:    _Msg_SetController_Handler,
		},
		{
			MethodName: "UpdateResolveAddress",
			Handler:    _Msg_UpdateResolveAddress_Handler,
		},
		{
			MethodName: "UpdateDetails",
			Handler:    _Msg_UpdateDetails_Handler,
		},
		{
			MethodName: "PlaceSellOrder",
			Handler:    _Msg_PlaceSellOrder_Handler,
		},
		{
			MethodName: "CancelSellOrder",
			Handler:    _Msg_CancelSellOrder_Handler,
		},
		{
			MethodName: "PurchaseOrder",
			Handler:    _Msg_PurchaseOrder_Handler,
		},
		{
			MethodName: "PlaceBuyOrder",
			Handler:    _Msg_PlaceBuyOrder_Handler,
		},
		{
			MethodName: "CancelBuyOrder",
			Handler:    _Msg_CancelBuyOrder_Handler,
		},
		{
			MethodName: "AcceptBuyOrder",
			Handler:    _Msg_AcceptBuyOrder_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/dymns/tx.proto",
}

func (m *MsgRegisterName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contact) > 0 {
		i -= len(m.Contact)
		copy(dAtA[i:], m.Contact)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contact)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.ConfirmPayment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAlias) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAlias) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAlias) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ConfirmPayment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAliasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAliasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAliasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferDymNameOwnership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferDymNameOwnership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferDymNameOwnership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferDymNameOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferDymNameOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferDymNameOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetController) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetController) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetController) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetControllerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetControllerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetControllerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateResolveAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateResolveAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateResolveAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResolveTo) > 0 {
		i -= len(m.ResolveTo)
		copy(dAtA[i:], m.ResolveTo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ResolveTo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SubName) > 0 {
		i -= len(m.SubName)
		copy(dAtA[i:], m.SubName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateResolveAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateResolveAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateResolveAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClearConfigs {
		i--
		if m.ClearConfigs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Contact) > 0 {
		i -= len(m.Contact)
		copy(dAtA[i:], m.Contact)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contact)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPlaceSellOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceSellOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceSellOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellPrice != nil {
		{
			size, err := m.SellPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.MinPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AssetType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceSellOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceSellOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceSellOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelSellOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSellOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSellOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AssetType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSellOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSellOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSellOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPurchaseOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPurchaseOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPurchaseOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Offer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Params[iNdEx])
			copy(dAtA[i:], m.Params[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Params[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.AssetType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPurchaseOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPurchaseOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPurchaseOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPlaceBuyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceBuyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceBuyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Offer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.ContinueOrderId) > 0 {
		i -= len(m.ContinueOrderId)
		copy(dAtA[i:], m.ContinueOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContinueOrderId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Params[iNdEx])
			copy(dAtA[i:], m.Params[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Params[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.AssetType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceBuyOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceBuyOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceBuyOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelBuyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelBuyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelBuyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelBuyOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelBuyOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelBuyOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAcceptBuyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptBuyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptBuyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinAccept.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptBuyOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptBuyOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptBuyOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Accepted {
		i--
		if m.Accepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewMiscParams != nil {
		{
			size, err := m.NewMiscParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.NewChainsParams != nil {
		{
			size, err := m.NewChainsParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NewPriceParams != nil {
		{
			size, err := m.NewPriceParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	l = m.ConfirmPayment.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Contact)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterAlias) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ConfirmPayment.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRegisterAliasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferDymNameOwnership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferDymNameOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetController) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetControllerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateResolveAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ResolveTo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateResolveAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contact)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClearConfigs {
		n += 2
	}
	return n
}

func (m *MsgUpdateDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPlaceSellOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AssetType != 0 {
		n += 1 + sovTx(uint64(m.AssetType))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.SellPrice != nil {
		l = m.SellPrice.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPlaceSellOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelSellOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AssetType != 0 {
		n += 1 + sovTx(uint64(m.AssetType))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelSellOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPurchaseOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AssetType != 0 {
		n += 1 + sovTx(uint64(m.AssetType))
	}
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Offer.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPurchaseOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPlaceBuyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AssetType != 0 {
		n += 1 + sovTx(uint64(m.AssetType))
	}
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContinueOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Offer.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPlaceBuyOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelBuyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelBuyOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAcceptBuyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinAccept.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAcceptBuyOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Accepted {
		n += 2
	}
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewPriceParams != nil {
		l = m.NewPriceParams.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewChainsParams != nil {
		l = m.NewChainsParams.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewMiscParams != nil {
		l = m.NewMiscParams.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConfirmPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAlias) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAlias: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAlias: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConfirmPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAliasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAliasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAliasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferDymNameOwnership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferDymNameOwnership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferDymNameOwnership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferDymNameOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferDymNameOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferDymNameOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetController) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetController: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetController: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetControllerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetControllerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetControllerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateResolveAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateResolveAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateResolveAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolveTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateResolveAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateResolveAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateResolveAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearConfigs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearConfigs = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceSellOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceSellOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceSellOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SellPrice == nil {
				m.SellPrice = &types.Coin{}
			}
			if err := m.SellPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceSellOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceSellOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceSellOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSellOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSellOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSellOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSellOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSellOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSellOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPurchaseOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPurchaseOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPurchaseOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Offer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPurchaseOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPurchaseOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPurchaseOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceBuyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceBuyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceBuyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinueOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContinueOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Offer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceBuyOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceBuyOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceBuyOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelBuyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelBuyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelBuyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelBuyOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelBuyOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelBuyOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptBuyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptBuyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptBuyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAccept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinAccept.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptBuyOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptBuyOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptBuyOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accepted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPriceParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewPriceParams == nil {
				m.NewPriceParams = &PriceParams{}
			}
			if err := m.NewPriceParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewChainsParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewChainsParams == nil {
				m.NewChainsParams = &ChainsParams{}
			}
			if err := m.NewChainsParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMiscParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewMiscParams == nil {
				m.NewMiscParams = &MiscParams{}
			}
			if err := m.NewMiscParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
