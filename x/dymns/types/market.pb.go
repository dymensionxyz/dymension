// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/dymns/market.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AssetType present type of the asset of the Buy/Sell order.
type AssetType int32

const (
	AssetType_AT_UNKNOWN  AssetType = 0
	AssetType_AT_DYM_NAME AssetType = 1
	AssetType_AT_ALIAS    AssetType = 2
)

var AssetType_name = map[int32]string{
	0: "AT_UNKNOWN",
	1: "AT_DYM_NAME",
	2: "AT_ALIAS",
}

var AssetType_value = map[string]int32{
	"AT_UNKNOWN":  0,
	"AT_DYM_NAME": 1,
	"AT_ALIAS":    2,
}

func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}

func (AssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ddf761d4919b968f, []int{0}
}

// SellOrder defines a sell order, placed by owner, to sell a Dym-Name/Alias.
// Sell-Order has an expiry date.
// After expiry date, if no one has placed a bid, this Sell-Order will be closed, no change.
// If there is a bid, the highest bid will win, and the Dym-Name/Alias ownership will be transferred to the winner.
// If the bid matches the sell price, the Dym-Name/Alias ownership will be transferred to the bidder immediately.
type SellOrder struct {
	// asset_id is the Dym-Name/Alias being opened to be sold.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// asset_type is the type of the asset of the order, is Dym-Name/Alias.
	AssetType AssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=dymensionxyz.dymension.dymns.AssetType" json:"asset_type,omitempty"`
	// expire_at is the last effective date of this SO
	ExpireAt int64 `protobuf:"varint,3,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	// min_price is the minimum price that the owner is willing to accept for the asset.
	MinPrice types.Coin `protobuf:"bytes,4,opt,name=min_price,json=minPrice,proto3" json:"min_price"`
	// sell_price is the price that the owner is willing to sell the Dym-Name/Alias for,
	// the SO will be completed when the price is met, ownership transferred.
	// If the sell price is zero, the SO will be closed when the expire_at is reached and the highest bidder wins.
	SellPrice *types.Coin `protobuf:"bytes,5,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	// highest_bid is the highest bid on the SO, if any. Price must be greater than or equal to the min_price.
	HighestBid *SellOrderBid `protobuf:"bytes,6,opt,name=highest_bid,json=highestBid,proto3" json:"highest_bid,omitempty"`
}

func (m *SellOrder) Reset()         { *m = SellOrder{} }
func (m *SellOrder) String() string { return proto.CompactTextString(m) }
func (*SellOrder) ProtoMessage()    {}
func (*SellOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddf761d4919b968f, []int{0}
}
func (m *SellOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SellOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SellOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SellOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellOrder.Merge(m, src)
}
func (m *SellOrder) XXX_Size() int {
	return m.Size()
}
func (m *SellOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SellOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SellOrder proto.InternalMessageInfo

func (m *SellOrder) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *SellOrder) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_AT_UNKNOWN
}

func (m *SellOrder) GetExpireAt() int64 {
	if m != nil {
		return m.ExpireAt
	}
	return 0
}

func (m *SellOrder) GetMinPrice() types.Coin {
	if m != nil {
		return m.MinPrice
	}
	return types.Coin{}
}

func (m *SellOrder) GetSellPrice() *types.Coin {
	if m != nil {
		return m.SellPrice
	}
	return nil
}

func (m *SellOrder) GetHighestBid() *SellOrderBid {
	if m != nil {
		return m.HighestBid
	}
	return nil
}

// ActiveSellOrdersExpiration contains list of active SOs, store expiration date mapped by asset identity.
// Used by hook to find out expired SO instead of iterating through all records.
type ActiveSellOrdersExpiration struct {
	Records []ActiveSellOrdersExpirationRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
}

func (m *ActiveSellOrdersExpiration) Reset()         { *m = ActiveSellOrdersExpiration{} }
func (m *ActiveSellOrdersExpiration) String() string { return proto.CompactTextString(m) }
func (*ActiveSellOrdersExpiration) ProtoMessage()    {}
func (*ActiveSellOrdersExpiration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddf761d4919b968f, []int{1}
}
func (m *ActiveSellOrdersExpiration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveSellOrdersExpiration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveSellOrdersExpiration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveSellOrdersExpiration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveSellOrdersExpiration.Merge(m, src)
}
func (m *ActiveSellOrdersExpiration) XXX_Size() int {
	return m.Size()
}
func (m *ActiveSellOrdersExpiration) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveSellOrdersExpiration.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveSellOrdersExpiration proto.InternalMessageInfo

func (m *ActiveSellOrdersExpiration) GetRecords() []ActiveSellOrdersExpirationRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

// ActiveSellOrdersExpirationRecord contains the expiration date of an active Sell-Order.
type ActiveSellOrdersExpirationRecord struct {
	// asset_id is the Dym-Name/Alias being opened to be sold.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// expire_at is the last effective date of this Sell-Order.
	ExpireAt int64 `protobuf:"varint,2,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (m *ActiveSellOrdersExpirationRecord) Reset()         { *m = ActiveSellOrdersExpirationRecord{} }
func (m *ActiveSellOrdersExpirationRecord) String() string { return proto.CompactTextString(m) }
func (*ActiveSellOrdersExpirationRecord) ProtoMessage()    {}
func (*ActiveSellOrdersExpirationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddf761d4919b968f, []int{2}
}
func (m *ActiveSellOrdersExpirationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveSellOrdersExpirationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveSellOrdersExpirationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveSellOrdersExpirationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveSellOrdersExpirationRecord.Merge(m, src)
}
func (m *ActiveSellOrdersExpirationRecord) XXX_Size() int {
	return m.Size()
}
func (m *ActiveSellOrdersExpirationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveSellOrdersExpirationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveSellOrdersExpirationRecord proto.InternalMessageInfo

func (m *ActiveSellOrdersExpirationRecord) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *ActiveSellOrdersExpirationRecord) GetExpireAt() int64 {
	if m != nil {
		return m.ExpireAt
	}
	return 0
}

// SellOrderBid defines a bid placed by an account on a Sell-Order.
type SellOrderBid struct {
	// bidder is the account address of the account which placed the bid.
	Bidder string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	// price is the amount of coin offered by the bidder.
	Price types.Coin `protobuf:"bytes,2,opt,name=price,proto3" json:"price"`
	// params is the list of parameters of the bid.
	// It is empty for asset type Dym-Name.
	// It has one element for asset type Alias, which is the rollapp_id to assigned for.
	Params []string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (m *SellOrderBid) Reset()         { *m = SellOrderBid{} }
func (m *SellOrderBid) String() string { return proto.CompactTextString(m) }
func (*SellOrderBid) ProtoMessage()    {}
func (*SellOrderBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddf761d4919b968f, []int{3}
}
func (m *SellOrderBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SellOrderBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SellOrderBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SellOrderBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellOrderBid.Merge(m, src)
}
func (m *SellOrderBid) XXX_Size() int {
	return m.Size()
}
func (m *SellOrderBid) XXX_DiscardUnknown() {
	xxx_messageInfo_SellOrderBid.DiscardUnknown(m)
}

var xxx_messageInfo_SellOrderBid proto.InternalMessageInfo

func (m *SellOrderBid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *SellOrderBid) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

func (m *SellOrderBid) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

// BuyOrder defines an offer to buy a Dym-Name/Alias, placed by buyer.
// Buyer will need to deposit the offer amount to the module account.
// When the owner of the Dym-Name/Alias accepts the offer, deposited amount will be transferred to the owner.
// When the buyer cancels the offer, deposited amount will be refunded to the buyer.
type BuyOrder struct {
	// id is the unique identifier of the order. Generated by the module.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// asset_id of the Dym-Name/Alias willing to buy.
	AssetId string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// asset_type is type of the asset of the order, is Dym-Name/Alias
	AssetType AssetType `protobuf:"varint,3,opt,name=asset_type,json=assetType,proto3,enum=dymensionxyz.dymension.dymns.AssetType" json:"asset_type,omitempty"`
	// params is the list of parameters of the Buy-Order.
	// It is empty for asset type Dym-Name.
	// It has one element for asset type Alias, which is the rollapp_id to assigned for.
	Params []string `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
	// buyer is bech32 address of the account which placed the order.
	Buyer string `protobuf:"bytes,5,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// offer_price is the amount of coins that buyer willing to pay for the asset.
	// This amount is deposited to the module account upon placing the offer.
	OfferPrice types.Coin `protobuf:"bytes,6,opt,name=offer_price,json=offerPrice,proto3" json:"offer_price"`
	// counterparty_offer_price is the price that the Dym-Name/Alias owner is willing to sell for.
	// This is used for counterparty price negotiation and for information only.
	// The transaction can only be executed when the owner accepts the offer with exact offer_price.
	CounterpartyOfferPrice *types.Coin `protobuf:"bytes,7,opt,name=counterparty_offer_price,json=counterpartyOfferPrice,proto3" json:"counterparty_offer_price,omitempty"`
}

func (m *BuyOrder) Reset()         { *m = BuyOrder{} }
func (m *BuyOrder) String() string { return proto.CompactTextString(m) }
func (*BuyOrder) ProtoMessage()    {}
func (*BuyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddf761d4919b968f, []int{4}
}
func (m *BuyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrder.Merge(m, src)
}
func (m *BuyOrder) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrder proto.InternalMessageInfo

func (m *BuyOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BuyOrder) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *BuyOrder) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_AT_UNKNOWN
}

func (m *BuyOrder) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *BuyOrder) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *BuyOrder) GetOfferPrice() types.Coin {
	if m != nil {
		return m.OfferPrice
	}
	return types.Coin{}
}

func (m *BuyOrder) GetCounterpartyOfferPrice() *types.Coin {
	if m != nil {
		return m.CounterpartyOfferPrice
	}
	return nil
}

// ReverseLookupBuyOrderIds contains a list of Buy-Orders IDs for reverse lookup.
type ReverseLookupBuyOrderIds struct {
	// order_ids is a list of Buy-Order IDs of the Buy-Orders linked to the reverse-lookup record.
	OrderIds []string `protobuf:"bytes,1,rep,name=order_ids,json=orderIds,proto3" json:"order_ids,omitempty"`
}

func (m *ReverseLookupBuyOrderIds) Reset()         { *m = ReverseLookupBuyOrderIds{} }
func (m *ReverseLookupBuyOrderIds) String() string { return proto.CompactTextString(m) }
func (*ReverseLookupBuyOrderIds) ProtoMessage()    {}
func (*ReverseLookupBuyOrderIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddf761d4919b968f, []int{5}
}
func (m *ReverseLookupBuyOrderIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReverseLookupBuyOrderIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReverseLookupBuyOrderIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReverseLookupBuyOrderIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseLookupBuyOrderIds.Merge(m, src)
}
func (m *ReverseLookupBuyOrderIds) XXX_Size() int {
	return m.Size()
}
func (m *ReverseLookupBuyOrderIds) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseLookupBuyOrderIds.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseLookupBuyOrderIds proto.InternalMessageInfo

func (m *ReverseLookupBuyOrderIds) GetOrderIds() []string {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

func init() {
	proto.RegisterEnum("dymensionxyz.dymension.dymns.AssetType", AssetType_name, AssetType_value)
	proto.RegisterType((*SellOrder)(nil), "dymensionxyz.dymension.dymns.SellOrder")
	proto.RegisterType((*ActiveSellOrdersExpiration)(nil), "dymensionxyz.dymension.dymns.ActiveSellOrdersExpiration")
	proto.RegisterType((*ActiveSellOrdersExpirationRecord)(nil), "dymensionxyz.dymension.dymns.ActiveSellOrdersExpirationRecord")
	proto.RegisterType((*SellOrderBid)(nil), "dymensionxyz.dymension.dymns.SellOrderBid")
	proto.RegisterType((*BuyOrder)(nil), "dymensionxyz.dymension.dymns.BuyOrder")
	proto.RegisterType((*ReverseLookupBuyOrderIds)(nil), "dymensionxyz.dymension.dymns.ReverseLookupBuyOrderIds")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/dymns/market.proto", fileDescriptor_ddf761d4919b968f)
}

var fileDescriptor_ddf761d4919b968f = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x4f, 0xdb, 0x4e,
	0x10, 0x8d, 0x1d, 0x08, 0xf1, 0x04, 0xf1, 0x43, 0x2b, 0x84, 0x0c, 0xbf, 0xca, 0xb5, 0x72, 0x69,
	0xca, 0xc1, 0x16, 0x41, 0x55, 0xab, 0xaa, 0xaa, 0xea, 0xb4, 0x54, 0x42, 0x40, 0xa8, 0x4c, 0xaa,
	0xaa, 0x1c, 0x6a, 0xf9, 0xcf, 0x12, 0x56, 0xc4, 0x5e, 0x6b, 0x77, 0x13, 0xe1, 0xaa, 0x1f, 0xa2,
	0x9f, 0xa9, 0x27, 0x8e, 0x1c, 0x7b, 0xaa, 0x2a, 0xf8, 0x22, 0x95, 0xbd, 0xc6, 0x0d, 0x07, 0x12,
	0xd4, 0xdb, 0x8c, 0x3d, 0xef, 0x69, 0xde, 0xbc, 0xa7, 0x85, 0xa7, 0x51, 0x16, 0xe3, 0x84, 0x13,
	0x9a, 0x5c, 0x64, 0x5f, 0xed, 0xaa, 0xc9, 0xab, 0x84, 0xdb, 0xb1, 0xcf, 0xce, 0xb1, 0xb0, 0x52,
	0x46, 0x05, 0x45, 0x8f, 0xa6, 0x47, 0xad, 0xaa, 0xb1, 0x8a, 0xd1, 0xcd, 0xb5, 0x21, 0x1d, 0xd2,
	0x62, 0xd0, 0xce, 0x2b, 0x89, 0xd9, 0x34, 0x42, 0xca, 0x63, 0xca, 0xed, 0xc0, 0xe7, 0xd8, 0x9e,
	0x6c, 0x07, 0x58, 0xf8, 0xdb, 0x76, 0x48, 0x49, 0x22, 0xff, 0xb7, 0xaf, 0x54, 0xd0, 0x8e, 0xf1,
	0x68, 0x74, 0xc4, 0x22, 0xcc, 0xd0, 0x06, 0x34, 0x7d, 0xce, 0xb1, 0xf0, 0x48, 0xa4, 0x2b, 0xa6,
	0xd2, 0xd1, 0xdc, 0xa5, 0xa2, 0xdf, 0x8b, 0xd0, 0x7b, 0x00, 0xf9, 0x4b, 0x64, 0x29, 0xd6, 0x55,
	0x53, 0xe9, 0xac, 0x74, 0x9f, 0x58, 0xb3, 0x36, 0xb2, 0x9c, 0x7c, 0x7e, 0x90, 0xa5, 0xd8, 0xd5,
	0xfc, 0xdb, 0x12, 0xfd, 0x0f, 0x1a, 0xbe, 0x48, 0x09, 0xc3, 0x9e, 0x2f, 0xf4, 0xba, 0xa9, 0x74,
	0xea, 0x6e, 0x53, 0x7e, 0x70, 0x04, 0x7a, 0x05, 0x5a, 0x4c, 0x12, 0x2f, 0x65, 0x24, 0xc4, 0xfa,
	0x82, 0xa9, 0x74, 0x5a, 0xdd, 0x0d, 0x4b, 0x2a, 0xb0, 0x72, 0x05, 0x56, 0xa9, 0xc0, 0x7a, 0x4b,
	0x49, 0xd2, 0x5b, 0xb8, 0xfc, 0xf5, 0xb8, 0xe6, 0x36, 0x63, 0x92, 0x7c, 0xc8, 0x01, 0xe8, 0x05,
	0x00, 0xc7, 0xa3, 0x51, 0x09, 0x5f, 0x9c, 0x03, 0x77, 0xb5, 0x7c, 0x58, 0x22, 0xf7, 0xa1, 0x75,
	0x46, 0x86, 0x67, 0x98, 0x0b, 0x2f, 0x20, 0x91, 0xde, 0x28, 0xa0, 0x5b, 0xb3, 0xd5, 0x55, 0x57,
	0xeb, 0x91, 0xc8, 0x85, 0x12, 0xde, 0x23, 0x51, 0xfb, 0x1b, 0x6c, 0x3a, 0xa1, 0x20, 0x13, 0x5c,
	0x4d, 0xf0, 0xdd, 0x5c, 0xa0, 0x2f, 0x08, 0x4d, 0xd0, 0x17, 0x58, 0x62, 0x38, 0xa4, 0x2c, 0xe2,
	0xba, 0x62, 0xd6, 0x3b, 0xad, 0xee, 0xeb, 0x39, 0x47, 0xbc, 0x97, 0xca, 0x2d, 0x68, 0xca, 0x2b,
	0xdc, 0x92, 0xb6, 0x4f, 0xc0, 0x9c, 0x07, 0x99, 0x65, 0xf3, 0x1d, 0x7b, 0xd4, 0xbb, 0xf6, 0xb4,
	0xc7, 0xb0, 0x3c, 0xad, 0x1a, 0xad, 0x43, 0x23, 0x20, 0x51, 0x84, 0x59, 0xc9, 0x52, 0x76, 0xe8,
	0x19, 0x2c, 0x4a, 0x0f, 0xd4, 0x87, 0x59, 0x28, 0xa7, 0x73, 0xba, 0xd4, 0x67, 0x7e, 0xcc, 0xf5,
	0xba, 0x59, 0xcf, 0xe9, 0x64, 0xd7, 0xfe, 0xa1, 0x42, 0xb3, 0x37, 0xce, 0x64, 0x44, 0x57, 0x40,
	0xad, 0xb6, 0x56, 0xc9, 0x5d, 0x2d, 0xea, 0xac, 0xc8, 0xd6, 0xff, 0x39, 0xb2, 0x7f, 0xf7, 0x5a,
	0x98, 0xde, 0x0b, 0xad, 0xc1, 0x62, 0x30, 0xce, 0x30, 0x2b, 0xa2, 0xa6, 0xb9, 0xb2, 0x41, 0x6f,
	0xa0, 0x45, 0x4f, 0x4f, 0x31, 0x2b, 0x63, 0xd8, 0x78, 0xd8, 0x09, 0xa0, 0xc0, 0xc8, 0x34, 0x1e,
	0x83, 0x1e, 0xd2, 0x71, 0x22, 0x30, 0x4b, 0x7d, 0x26, 0x32, 0x6f, 0x9a, 0x6e, 0x69, 0x5e, 0xaa,
	0xd7, 0xa7, 0xa1, 0x47, 0x15, 0x69, 0xfb, 0x39, 0xe8, 0x2e, 0x9e, 0x60, 0xc6, 0xf1, 0x01, 0xa5,
	0xe7, 0xe3, 0xf4, 0xf6, 0xa0, 0x7b, 0x11, 0xcf, 0x4d, 0xa7, 0x79, 0xed, 0x91, 0x32, 0x95, 0x9a,
	0xdb, 0xa4, 0xe5, 0xcf, 0xad, 0x97, 0xa0, 0x55, 0x57, 0x41, 0x2b, 0x00, 0xce, 0xc0, 0xfb, 0xd8,
	0xdf, 0xef, 0x1f, 0x7d, 0xea, 0xaf, 0xd6, 0xd0, 0x7f, 0xd0, 0x72, 0x06, 0xde, 0xbb, 0xcf, 0x87,
	0x5e, 0xdf, 0x39, 0xdc, 0x5d, 0x55, 0xd0, 0x32, 0x34, 0x9d, 0x81, 0xe7, 0x1c, 0xec, 0x39, 0xc7,
	0xab, 0x6a, 0xef, 0xe0, 0xf2, 0xda, 0x50, 0xae, 0xae, 0x0d, 0xe5, 0xf7, 0xb5, 0xa1, 0x7c, 0xbf,
	0x31, 0x6a, 0x57, 0x37, 0x46, 0xed, 0xe7, 0x8d, 0x51, 0x3b, 0xe9, 0x0e, 0x89, 0x38, 0x1b, 0x07,
	0x56, 0x48, 0x63, 0xfb, 0x9e, 0x17, 0x70, 0xb2, 0x63, 0x5f, 0x94, 0xcf, 0x60, 0x6e, 0x20, 0x0f,
	0x1a, 0xc5, 0x93, 0xb5, 0xf3, 0x27, 0x00, 0x00, 0xff, 0xff, 0x62, 0x23, 0xac, 0x0b, 0x33, 0x05,
	0x00, 0x00,
}

func (m *SellOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SellOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SellOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HighestBid != nil {
		{
			size, err := m.HighestBid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SellPrice != nil {
		{
			size, err := m.SellPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.MinPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ExpireAt != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.ExpireAt))
		i--
		dAtA[i] = 0x18
	}
	if m.AssetType != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActiveSellOrdersExpiration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveSellOrdersExpiration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveSellOrdersExpiration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMarket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActiveSellOrdersExpirationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveSellOrdersExpirationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveSellOrdersExpirationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpireAt != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.ExpireAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SellOrderBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SellOrderBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SellOrderBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Params[iNdEx])
			copy(dAtA[i:], m.Params[iNdEx])
			i = encodeVarintMarket(dAtA, i, uint64(len(m.Params[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CounterpartyOfferPrice != nil {
		{
			size, err := m.CounterpartyOfferPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.OfferPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Params[iNdEx])
			copy(dAtA[i:], m.Params[iNdEx])
			i = encodeVarintMarket(dAtA, i, uint64(len(m.Params[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AssetType != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReverseLookupBuyOrderIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReverseLookupBuyOrderIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReverseLookupBuyOrderIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		for iNdEx := len(m.OrderIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderIds[iNdEx])
			copy(dAtA[i:], m.OrderIds[iNdEx])
			i = encodeVarintMarket(dAtA, i, uint64(len(m.OrderIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SellOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.AssetType != 0 {
		n += 1 + sovMarket(uint64(m.AssetType))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovMarket(uint64(m.ExpireAt))
	}
	l = m.MinPrice.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.SellPrice != nil {
		l = m.SellPrice.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.HighestBid != nil {
		l = m.HighestBid.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *ActiveSellOrdersExpiration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovMarket(uint64(l))
		}
	}
	return n
}

func (m *ActiveSellOrdersExpirationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovMarket(uint64(m.ExpireAt))
	}
	return n
}

func (m *SellOrderBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovMarket(uint64(l))
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovMarket(uint64(l))
		}
	}
	return n
}

func (m *BuyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.AssetType != 0 {
		n += 1 + sovMarket(uint64(m.AssetType))
	}
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovMarket(uint64(l))
		}
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.OfferPrice.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.CounterpartyOfferPrice != nil {
		l = m.CounterpartyOfferPrice.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *ReverseLookupBuyOrderIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		for _, s := range m.OrderIds {
			l = len(s)
			n += 1 + l + sovMarket(uint64(l))
		}
	}
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SellOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SellPrice == nil {
				m.SellPrice = &types.Coin{}
			}
			if err := m.SellPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HighestBid == nil {
				m.HighestBid = &SellOrderBid{}
			}
			if err := m.HighestBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveSellOrdersExpiration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveSellOrdersExpiration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveSellOrdersExpiration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, ActiveSellOrdersExpirationRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveSellOrdersExpirationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveSellOrdersExpirationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveSellOrdersExpirationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SellOrderBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellOrderBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellOrderBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OfferPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyOfferPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CounterpartyOfferPrice == nil {
				m.CounterpartyOfferPrice = &types.Coin{}
			}
			if err := m.CounterpartyOfferPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReverseLookupBuyOrderIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReverseLookupBuyOrderIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReverseLookupBuyOrderIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderIds = append(m.OrderIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
