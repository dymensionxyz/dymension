// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/eibc/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgFulfillOrder defines the FulfillOrder request type.
type MsgFulfillOrder struct {
	// fulfiller_address is the bech32-encoded address of the account which the
	// message was sent from.
	FulfillerAddress string `protobuf:"bytes,1,opt,name=fulfiller_address,json=fulfillerAddress,proto3" json:"fulfiller_address,omitempty"`
	// order_id is the unique identifier of the order to be fulfilled.
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// expected_fee is the nominal fee set in the order. Fulfiller will generally
	// make less profit (after deducting bridge fee)
	ExpectedFee string `protobuf:"bytes,3,opt,name=expected_fee,json=expectedFee,proto3" json:"expected_fee,omitempty"`
}

func (m *MsgFulfillOrder) Reset()         { *m = MsgFulfillOrder{} }
func (m *MsgFulfillOrder) String() string { return proto.CompactTextString(m) }
func (*MsgFulfillOrder) ProtoMessage()    {}
func (*MsgFulfillOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{0}
}
func (m *MsgFulfillOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFulfillOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFulfillOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFulfillOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFulfillOrder.Merge(m, src)
}
func (m *MsgFulfillOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgFulfillOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFulfillOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFulfillOrder proto.InternalMessageInfo

func (m *MsgFulfillOrder) GetFulfillerAddress() string {
	if m != nil {
		return m.FulfillerAddress
	}
	return ""
}

func (m *MsgFulfillOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgFulfillOrder) GetExpectedFee() string {
	if m != nil {
		return m.ExpectedFee
	}
	return ""
}

// MsgFulfillOrderResponse defines the FulfillOrder response type.
type MsgFulfillOrderResponse struct {
}

func (m *MsgFulfillOrderResponse) Reset()         { *m = MsgFulfillOrderResponse{} }
func (m *MsgFulfillOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFulfillOrderResponse) ProtoMessage()    {}
func (*MsgFulfillOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{1}
}
func (m *MsgFulfillOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFulfillOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFulfillOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFulfillOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFulfillOrderResponse.Merge(m, src)
}
func (m *MsgFulfillOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFulfillOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFulfillOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFulfillOrderResponse proto.InternalMessageInfo

// MsgFulfillOrderAuthorized defines the FulfillOrderAuthorized request type.
type MsgFulfillOrderAuthorized struct {
	// order_id is the unique identifier of the order to be fulfilled.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// rollapp_id is the unique identifier of the rollapp that the order is
	// associated with.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// price is the price of the demand order
	Price github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
	// amount is the amount of the IBC transfer
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int,castrepeated=cosmossdk.io/math.Int" json:"amount"`
	// lp_address is the bech32-encoded address of the account which the
	// authorization was granted from. This account will receive the price amount
	// at the finalization phase.
	LpAddress string `protobuf:"bytes,5,opt,name=lp_address,json=lpAddress,proto3" json:"lp_address,omitempty"`
	// operator_fee_address is an optional bech32-encoded address of an account
	// that would collect the operator_fee_part if it's empty, the
	// operator_fee_part will go to the operator_address
	OperatorFeeAddress string `protobuf:"bytes,6,opt,name=operator_fee_address,json=operatorFeeAddress,proto3" json:"operator_fee_address,omitempty"`
	// expected_fee is the nominal fee set in the order.
	ExpectedFee string `protobuf:"bytes,7,opt,name=expected_fee,json=expectedFee,proto3" json:"expected_fee,omitempty"`
	// operator_fee_share is the share of the fee earnings that goes to the
	// operator it will be deduced from the fee of the demand order and paid out
	// immediately
	OperatorFeeShare cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=operator_fee_share,json=operatorFeeShare,proto3,customtype=cosmossdk.io/math.LegacyDec,castrepeated=cosmossdk.io/math.LegacyDec" json:"operator_fee_share"`
	// settlement_validated signals if the block behind the demand order needs to
	// be "settlement validated" or not
	SettlementValidated bool `protobuf:"varint,9,opt,name=settlement_validated,json=settlementValidated,proto3" json:"settlement_validated,omitempty"`
}

func (m *MsgFulfillOrderAuthorized) Reset()         { *m = MsgFulfillOrderAuthorized{} }
func (m *MsgFulfillOrderAuthorized) String() string { return proto.CompactTextString(m) }
func (*MsgFulfillOrderAuthorized) ProtoMessage()    {}
func (*MsgFulfillOrderAuthorized) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{2}
}
func (m *MsgFulfillOrderAuthorized) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFulfillOrderAuthorized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFulfillOrderAuthorized.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFulfillOrderAuthorized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFulfillOrderAuthorized.Merge(m, src)
}
func (m *MsgFulfillOrderAuthorized) XXX_Size() int {
	return m.Size()
}
func (m *MsgFulfillOrderAuthorized) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFulfillOrderAuthorized.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFulfillOrderAuthorized proto.InternalMessageInfo

func (m *MsgFulfillOrderAuthorized) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgFulfillOrderAuthorized) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *MsgFulfillOrderAuthorized) GetPrice() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *MsgFulfillOrderAuthorized) GetLpAddress() string {
	if m != nil {
		return m.LpAddress
	}
	return ""
}

func (m *MsgFulfillOrderAuthorized) GetOperatorFeeAddress() string {
	if m != nil {
		return m.OperatorFeeAddress
	}
	return ""
}

func (m *MsgFulfillOrderAuthorized) GetExpectedFee() string {
	if m != nil {
		return m.ExpectedFee
	}
	return ""
}

func (m *MsgFulfillOrderAuthorized) GetSettlementValidated() bool {
	if m != nil {
		return m.SettlementValidated
	}
	return false
}

type MsgFulfillOrderAuthorizedResponse struct {
}

func (m *MsgFulfillOrderAuthorizedResponse) Reset()         { *m = MsgFulfillOrderAuthorizedResponse{} }
func (m *MsgFulfillOrderAuthorizedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFulfillOrderAuthorizedResponse) ProtoMessage()    {}
func (*MsgFulfillOrderAuthorizedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{3}
}
func (m *MsgFulfillOrderAuthorizedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFulfillOrderAuthorizedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFulfillOrderAuthorizedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFulfillOrderAuthorizedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFulfillOrderAuthorizedResponse.Merge(m, src)
}
func (m *MsgFulfillOrderAuthorizedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFulfillOrderAuthorizedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFulfillOrderAuthorizedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFulfillOrderAuthorizedResponse proto.InternalMessageInfo

type MsgUpdateDemandOrder struct {
	// owner_address is the bech32-encoded address of the account owns the order.
	// This is expected to be the address of the order recipient.
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// order_id is the unique identifier of the order to be updated.
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// new_fee is the new fee amount to be set in the order.
	NewFee string `protobuf:"bytes,3,opt,name=new_fee,json=newFee,proto3" json:"new_fee,omitempty"`
}

func (m *MsgUpdateDemandOrder) Reset()         { *m = MsgUpdateDemandOrder{} }
func (m *MsgUpdateDemandOrder) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDemandOrder) ProtoMessage()    {}
func (*MsgUpdateDemandOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{4}
}
func (m *MsgUpdateDemandOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDemandOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDemandOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDemandOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDemandOrder.Merge(m, src)
}
func (m *MsgUpdateDemandOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDemandOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDemandOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDemandOrder proto.InternalMessageInfo

func (m *MsgUpdateDemandOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgUpdateDemandOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgUpdateDemandOrder) GetNewFee() string {
	if m != nil {
		return m.NewFee
	}
	return ""
}

type MsgUpdateDemandOrderResponse struct {
}

func (m *MsgUpdateDemandOrderResponse) Reset()         { *m = MsgUpdateDemandOrderResponse{} }
func (m *MsgUpdateDemandOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDemandOrderResponse) ProtoMessage()    {}
func (*MsgUpdateDemandOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{5}
}
func (m *MsgUpdateDemandOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDemandOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDemandOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDemandOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDemandOrderResponse.Merge(m, src)
}
func (m *MsgUpdateDemandOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDemandOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDemandOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDemandOrderResponse proto.InternalMessageInfo

// try find an on-demand-fulfiller to fulfill the order immediately
type MsgFindFulfiller struct {
	Signer  string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// rng to choose fulfiller from eligible randomly
	Rng int64 `protobuf:"varint,3,opt,name=rng,proto3" json:"rng,omitempty"`
}

func (m *MsgFindFulfiller) Reset()         { *m = MsgFindFulfiller{} }
func (m *MsgFindFulfiller) String() string { return proto.CompactTextString(m) }
func (*MsgFindFulfiller) ProtoMessage()    {}
func (*MsgFindFulfiller) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{6}
}
func (m *MsgFindFulfiller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFindFulfiller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFindFulfiller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFindFulfiller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFindFulfiller.Merge(m, src)
}
func (m *MsgFindFulfiller) XXX_Size() int {
	return m.Size()
}
func (m *MsgFindFulfiller) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFindFulfiller.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFindFulfiller proto.InternalMessageInfo

func (m *MsgFindFulfiller) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgFindFulfiller) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgFindFulfiller) GetRng() int64 {
	if m != nil {
		return m.Rng
	}
	return 0
}

type MsgFindFulfillerResponse struct {
}

func (m *MsgFindFulfillerResponse) Reset()         { *m = MsgFindFulfillerResponse{} }
func (m *MsgFindFulfillerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFindFulfillerResponse) ProtoMessage()    {}
func (*MsgFindFulfillerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{7}
}
func (m *MsgFindFulfillerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFindFulfillerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFindFulfillerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFindFulfillerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFindFulfillerResponse.Merge(m, src)
}
func (m *MsgFindFulfillerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFindFulfillerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFindFulfillerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFindFulfillerResponse proto.InternalMessageInfo

type MsgCreateOnDemandLP struct {
	Lp *OnDemandLP `protobuf:"bytes,2,opt,name=lp,proto3" json:"lp,omitempty"`
}

func (m *MsgCreateOnDemandLP) Reset()         { *m = MsgCreateOnDemandLP{} }
func (m *MsgCreateOnDemandLP) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOnDemandLP) ProtoMessage()    {}
func (*MsgCreateOnDemandLP) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{8}
}
func (m *MsgCreateOnDemandLP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOnDemandLP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOnDemandLP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOnDemandLP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOnDemandLP.Merge(m, src)
}
func (m *MsgCreateOnDemandLP) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOnDemandLP) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOnDemandLP.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOnDemandLP proto.InternalMessageInfo

func (m *MsgCreateOnDemandLP) GetLp() *OnDemandLP {
	if m != nil {
		return m.Lp
	}
	return nil
}

type MsgCreateOnDemandLPResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateOnDemandLPResponse) Reset()         { *m = MsgCreateOnDemandLPResponse{} }
func (m *MsgCreateOnDemandLPResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOnDemandLPResponse) ProtoMessage()    {}
func (*MsgCreateOnDemandLPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{9}
}
func (m *MsgCreateOnDemandLPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOnDemandLPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOnDemandLPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOnDemandLPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOnDemandLPResponse.Merge(m, src)
}
func (m *MsgCreateOnDemandLPResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOnDemandLPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOnDemandLPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOnDemandLPResponse proto.InternalMessageInfo

func (m *MsgCreateOnDemandLPResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgDeleteOnDemandLP struct {
	Signer string   `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Ids    []uint64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *MsgDeleteOnDemandLP) Reset()         { *m = MsgDeleteOnDemandLP{} }
func (m *MsgDeleteOnDemandLP) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteOnDemandLP) ProtoMessage()    {}
func (*MsgDeleteOnDemandLP) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{10}
}
func (m *MsgDeleteOnDemandLP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteOnDemandLP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteOnDemandLP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteOnDemandLP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteOnDemandLP.Merge(m, src)
}
func (m *MsgDeleteOnDemandLP) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteOnDemandLP) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteOnDemandLP.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteOnDemandLP proto.InternalMessageInfo

func (m *MsgDeleteOnDemandLP) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgDeleteOnDemandLP) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type MsgDeleteOnDemandLPResponse struct {
}

func (m *MsgDeleteOnDemandLPResponse) Reset()         { *m = MsgDeleteOnDemandLPResponse{} }
func (m *MsgDeleteOnDemandLPResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteOnDemandLPResponse) ProtoMessage()    {}
func (*MsgDeleteOnDemandLPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47537f11f512b254, []int{11}
}
func (m *MsgDeleteOnDemandLPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteOnDemandLPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteOnDemandLPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteOnDemandLPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteOnDemandLPResponse.Merge(m, src)
}
func (m *MsgDeleteOnDemandLPResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteOnDemandLPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteOnDemandLPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteOnDemandLPResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgFulfillOrder)(nil), "dymensionxyz.dymension.eibc.MsgFulfillOrder")
	proto.RegisterType((*MsgFulfillOrderResponse)(nil), "dymensionxyz.dymension.eibc.MsgFulfillOrderResponse")
	proto.RegisterType((*MsgFulfillOrderAuthorized)(nil), "dymensionxyz.dymension.eibc.MsgFulfillOrderAuthorized")
	proto.RegisterType((*MsgFulfillOrderAuthorizedResponse)(nil), "dymensionxyz.dymension.eibc.MsgFulfillOrderAuthorizedResponse")
	proto.RegisterType((*MsgUpdateDemandOrder)(nil), "dymensionxyz.dymension.eibc.MsgUpdateDemandOrder")
	proto.RegisterType((*MsgUpdateDemandOrderResponse)(nil), "dymensionxyz.dymension.eibc.MsgUpdateDemandOrderResponse")
	proto.RegisterType((*MsgFindFulfiller)(nil), "dymensionxyz.dymension.eibc.MsgFindFulfiller")
	proto.RegisterType((*MsgFindFulfillerResponse)(nil), "dymensionxyz.dymension.eibc.MsgFindFulfillerResponse")
	proto.RegisterType((*MsgCreateOnDemandLP)(nil), "dymensionxyz.dymension.eibc.MsgCreateOnDemandLP")
	proto.RegisterType((*MsgCreateOnDemandLPResponse)(nil), "dymensionxyz.dymension.eibc.MsgCreateOnDemandLPResponse")
	proto.RegisterType((*MsgDeleteOnDemandLP)(nil), "dymensionxyz.dymension.eibc.MsgDeleteOnDemandLP")
	proto.RegisterType((*MsgDeleteOnDemandLPResponse)(nil), "dymensionxyz.dymension.eibc.MsgDeleteOnDemandLPResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/eibc/tx.proto", fileDescriptor_47537f11f512b254)
}

var fileDescriptor_47537f11f512b254 = []byte{
	// 921 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0x17, 0x25, 0x5b, 0xb6, 0xd7, 0xce, 0x3f, 0x0a, 0xe3, 0xbf, 0x2d, 0xd1, 0x8d, 0xec, 0x30,
	0x05, 0x2a, 0xa4, 0x35, 0x69, 0x39, 0xfd, 0xf4, 0xa1, 0x40, 0x1c, 0xc1, 0x80, 0x51, 0x1b, 0x09,
	0x58, 0xb4, 0x87, 0xa2, 0x80, 0x40, 0x71, 0xc7, 0x34, 0x11, 0x6a, 0x97, 0xe0, 0xae, 0xfc, 0x91,
	0x43, 0x11, 0x34, 0x2f, 0x50, 0x14, 0x3d, 0xf6, 0x09, 0x7c, 0xca, 0xa1, 0x0f, 0x91, 0x53, 0x11,
	0xf4, 0x54, 0xf4, 0x10, 0x17, 0xf6, 0x21, 0xaf, 0x51, 0x2c, 0xb9, 0xa2, 0x48, 0x2a, 0x92, 0xaa,
	0x9e, 0xc8, 0xf9, 0xf8, 0xcd, 0xfc, 0x66, 0x66, 0x87, 0x5c, 0xf4, 0x3e, 0x3e, 0xef, 0x02, 0x61,
	0x1e, 0x25, 0x67, 0xe7, 0xcf, 0xcc, 0x44, 0x30, 0xc1, 0xeb, 0x38, 0x26, 0x3f, 0x33, 0x82, 0x90,
	0x72, 0xaa, 0xae, 0xa5, 0xbd, 0x8c, 0x44, 0x30, 0x84, 0x97, 0xb6, 0xea, 0x50, 0xd6, 0xa5, 0xcc,
	0xec, 0x32, 0xd7, 0x3c, 0x69, 0x8a, 0x47, 0x8c, 0xd2, 0x6a, 0xb1, 0xa1, 0x1d, 0x49, 0x66, 0x2c,
	0x48, 0xd3, 0xb2, 0x4b, 0x5d, 0x1a, 0xeb, 0xc5, 0x9b, 0xd4, 0xd6, 0x65, 0xa4, 0x8e, 0xcd, 0xc0,
	0x3c, 0x69, 0x76, 0x80, 0xdb, 0x4d, 0xd3, 0xa1, 0x1e, 0x91, 0xf6, 0xb1, 0x64, 0xfd, 0x20, 0xf6,
	0xd2, 0x7f, 0x51, 0xd0, 0xcd, 0x43, 0xe6, 0xee, 0xf5, 0xfc, 0x23, 0xcf, 0xf7, 0x1f, 0x87, 0x18,
	0x42, 0xf5, 0x43, 0x74, 0xeb, 0x28, 0x96, 0x21, 0x6c, 0xdb, 0x18, 0x87, 0xc0, 0x58, 0x55, 0xd9,
	0x50, 0x1a, 0x0b, 0x56, 0x25, 0x31, 0x3c, 0x8c, 0xf5, 0x6a, 0x0d, 0xcd, 0x53, 0x81, 0x6a, 0x7b,
	0xb8, 0x5a, 0x8c, 0x7c, 0xe6, 0x22, 0x79, 0x1f, 0xab, 0x77, 0xd1, 0x12, 0x9c, 0x05, 0xe0, 0x70,
	0xc0, 0xed, 0x23, 0x80, 0x6a, 0x29, 0x32, 0x2f, 0xf6, 0x75, 0x7b, 0x00, 0x3b, 0x2b, 0x3f, 0xbe,
	0x7d, 0x79, 0x7f, 0x38, 0x9b, 0x5e, 0x43, 0xab, 0x39, 0x56, 0x16, 0xb0, 0x80, 0x12, 0x06, 0xfa,
	0xef, 0x33, 0xa8, 0x96, 0xb3, 0x3d, 0xec, 0xf1, 0x63, 0x1a, 0x7a, 0xcf, 0x00, 0x67, 0xe8, 0x28,
	0x59, 0x3a, 0x77, 0x10, 0x0a, 0xa9, 0xef, 0xdb, 0x41, 0x30, 0xe0, 0xba, 0x20, 0x35, 0xfb, 0x58,
	0xb5, 0xd1, 0x6c, 0x10, 0x7a, 0x8e, 0xa0, 0x59, 0x6a, 0x2c, 0x6e, 0xd7, 0x0c, 0x39, 0x03, 0xd1,
	0x5f, 0x43, 0xf6, 0xd7, 0x78, 0x44, 0x3d, 0xb2, 0xbb, 0xf5, 0xea, 0xcd, 0x7a, 0xe1, 0xe2, 0x72,
	0xbd, 0xe1, 0x7a, 0xfc, 0xb8, 0xd7, 0x31, 0x1c, 0xda, 0x95, 0x03, 0x93, 0x8f, 0x4d, 0x86, 0x9f,
	0x9a, 0xfc, 0x3c, 0x00, 0x16, 0x01, 0x98, 0x15, 0x47, 0x56, 0xbf, 0x47, 0x65, 0xbb, 0x4b, 0x7b,
	0x84, 0x57, 0x67, 0x44, 0xf6, 0xdd, 0x96, 0x08, 0xf4, 0xd7, 0x9b, 0xf5, 0xff, 0xc7, 0x30, 0x86,
	0x9f, 0x1a, 0x1e, 0x35, 0xbb, 0x36, 0x3f, 0x36, 0xf6, 0x09, 0xbf, 0xb8, 0x1c, 0x61, 0xf8, 0xe3,
	0xb7, 0x4d, 0x24, 0xc9, 0xed, 0x13, 0x6e, 0xc9, 0x98, 0xa2, 0x3e, 0x3f, 0x48, 0xe6, 0x35, 0x1b,
	0xd7, 0xe7, 0x07, 0xfd, 0x41, 0x6d, 0xa1, 0x65, 0x1a, 0x40, 0x68, 0x73, 0x1a, 0x8a, 0x69, 0x24,
	0x8e, 0xe5, 0xc8, 0x51, 0xed, 0xdb, 0xf6, 0x00, 0xfa, 0x88, 0xfc, 0xfc, 0xe6, 0x86, 0xe6, 0xa7,
	0xfe, 0x80, 0xd4, 0x4c, 0x50, 0x76, 0x6c, 0x87, 0x50, 0x9d, 0x8f, 0xaa, 0x7b, 0x22, 0xab, 0x5b,
	0x1b, 0x2e, 0xe2, 0x00, 0x5c, 0xdb, 0x39, 0x6f, 0x81, 0x73, 0x71, 0x39, 0xd6, 0x9c, 0xaa, 0xb4,
	0x05, 0x8e, 0x55, 0x49, 0x91, 0xfc, 0x5a, 0x64, 0x52, 0x9b, 0x68, 0x99, 0x01, 0xe7, 0x3e, 0x74,
	0x81, 0xf0, 0xf6, 0x89, 0xed, 0x7b, 0xd8, 0xe6, 0x80, 0xab, 0x0b, 0x1b, 0x4a, 0x63, 0xde, 0xba,
	0x3d, 0xb0, 0x7d, 0xdb, 0x37, 0xed, 0xdc, 0x14, 0x47, 0x2e, 0xd5, 0x29, 0xfd, 0x1e, 0xba, 0x3b,
	0xf2, 0x3c, 0x25, 0xa7, 0xee, 0x85, 0x82, 0x96, 0x0f, 0x99, 0xfb, 0x4d, 0x20, 0x82, 0xb4, 0xa0,
	0x6b, 0x13, 0x1c, 0x2f, 0xcb, 0x3d, 0x74, 0x83, 0x9e, 0x92, 0xa1, 0x45, 0x59, 0x8a, 0x94, 0xff,
	0x62, 0x49, 0x56, 0xd1, 0x1c, 0x81, 0xd3, 0xd4, 0x7e, 0x94, 0x09, 0x9c, 0x8a, 0xd5, 0x50, 0x05,
	0xcf, 0x6c, 0x6c, 0xbd, 0x8e, 0xde, 0x7b, 0x17, 0x89, 0x84, 0x25, 0x46, 0x15, 0x51, 0x8a, 0x47,
	0xf0, 0x5e, 0x7f, 0xa5, 0xd4, 0x15, 0x54, 0x66, 0x9e, 0x4b, 0x20, 0x94, 0x99, 0xa5, 0x34, 0x6e,
	0x53, 0x2a, 0xa8, 0x14, 0x12, 0x37, 0xe2, 0x53, 0xb2, 0xc4, 0xeb, 0xce, 0xa2, 0x20, 0x23, 0x91,
	0xba, 0x86, 0xaa, 0xf9, 0x2c, 0x09, 0x83, 0x0e, 0xba, 0x7d, 0xc8, 0xdc, 0x47, 0x21, 0xd8, 0x1c,
	0x1e, 0x93, 0x98, 0xe3, 0xc1, 0x13, 0xf5, 0x33, 0x54, 0xf4, 0x83, 0x88, 0xc0, 0xe2, 0xf6, 0x07,
	0xc6, 0x98, 0x0f, 0xa4, 0x31, 0x00, 0x59, 0x45, 0x3f, 0x90, 0x5d, 0xf0, 0x03, 0xe3, 0xa8, 0x47,
	0x30, 0x8b, 0x1a, 0xa1, 0x6f, 0xa2, 0xb5, 0x77, 0xe4, 0xe8, 0x53, 0x50, 0xff, 0x87, 0x8a, 0xb2,
	0xa4, 0x19, 0xab, 0xe8, 0x61, 0xfd, 0x20, 0xa2, 0xd4, 0x02, 0x1f, 0x32, 0x94, 0x06, 0x7d, 0x51,
	0x32, 0x7d, 0xa9, 0xa0, 0x92, 0x87, 0x59, 0xb5, 0xb8, 0x51, 0x6a, 0xcc, 0x58, 0xe2, 0x35, 0x5b,
	0xfc, 0x9d, 0x28, 0x79, 0x3e, 0x5a, 0x3f, 0xf9, 0xf6, 0xaf, 0x65, 0x54, 0x3a, 0x64, 0xae, 0x7a,
	0x8a, 0x6e, 0x64, 0xc7, 0xb0, 0x39, 0xb6, 0xea, 0x7c, 0x3f, 0xb5, 0x4f, 0xa6, 0x72, 0x4f, 0xda,
	0x5f, 0x50, 0x39, 0x5a, 0xca, 0x7c, 0xcc, 0x3f, 0x9a, 0x18, 0x28, 0xe5, 0xad, 0x7d, 0x3c, 0x8d,
	0x77, 0x2a, 0xeb, 0xcf, 0x0a, 0x5a, 0x19, 0xf1, 0x45, 0xfe, 0x74, 0x9a, 0x90, 0x03, 0x9c, 0xf6,
	0xe5, 0x7f, 0xc3, 0xa5, 0x48, 0xbd, 0x50, 0xd0, 0xad, 0xe1, 0x85, 0x6d, 0x4e, 0x8a, 0x3b, 0x04,
	0xd1, 0xbe, 0x98, 0x1a, 0x92, 0x62, 0xf1, 0x5c, 0x41, 0x95, 0xa1, 0x7d, 0xd8, 0x9a, 0x14, 0x31,
	0x8f, 0xd0, 0x3e, 0x9f, 0x16, 0x91, 0xa3, 0x30, 0x74, 0xfe, 0x27, 0x52, 0xc8, 0x23, 0x26, 0x53,
	0x18, 0xb5, 0x15, 0x7a, 0x41, 0x9b, 0x7d, 0xfe, 0xf6, 0xe5, 0x7d, 0x65, 0xf7, 0xab, 0x57, 0x57,
	0x75, 0xe5, 0xf5, 0x55, 0x5d, 0xf9, 0xfb, 0xaa, 0xae, 0xfc, 0x74, 0x5d, 0x2f, 0xbc, 0xbe, 0xae,
	0x17, 0xfe, 0xbc, 0xae, 0x17, 0xbe, 0x6b, 0xa6, 0x7e, 0xa6, 0x23, 0x6e, 0x2e, 0x27, 0x0f, 0xcc,
	0x33, 0x79, 0xd7, 0x12, 0xff, 0xd6, 0x4e, 0x39, 0xba, 0xc2, 0x3c, 0xf8, 0x27, 0x00, 0x00, 0xff,
	0xff, 0xd7, 0x98, 0x15, 0x4b, 0x97, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	FindFulfiller(ctx context.Context, in *MsgFindFulfiller, opts ...grpc.CallOption) (*MsgFindFulfillerResponse, error)
	FulfillOrder(ctx context.Context, in *MsgFulfillOrder, opts ...grpc.CallOption) (*MsgFulfillOrderResponse, error)
	FulfillOrderAuthorized(ctx context.Context, in *MsgFulfillOrderAuthorized, opts ...grpc.CallOption) (*MsgFulfillOrderAuthorizedResponse, error)
	UpdateDemandOrder(ctx context.Context, in *MsgUpdateDemandOrder, opts ...grpc.CallOption) (*MsgUpdateDemandOrderResponse, error)
	CreateOnDemandLP(ctx context.Context, in *MsgCreateOnDemandLP, opts ...grpc.CallOption) (*MsgCreateOnDemandLPResponse, error)
	DeleteOnDemandLP(ctx context.Context, in *MsgDeleteOnDemandLP, opts ...grpc.CallOption) (*MsgDeleteOnDemandLPResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) FindFulfiller(ctx context.Context, in *MsgFindFulfiller, opts ...grpc.CallOption) (*MsgFindFulfillerResponse, error) {
	out := new(MsgFindFulfillerResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.eibc.Msg/FindFulfiller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FulfillOrder(ctx context.Context, in *MsgFulfillOrder, opts ...grpc.CallOption) (*MsgFulfillOrderResponse, error) {
	out := new(MsgFulfillOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.eibc.Msg/FulfillOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FulfillOrderAuthorized(ctx context.Context, in *MsgFulfillOrderAuthorized, opts ...grpc.CallOption) (*MsgFulfillOrderAuthorizedResponse, error) {
	out := new(MsgFulfillOrderAuthorizedResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.eibc.Msg/FulfillOrderAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDemandOrder(ctx context.Context, in *MsgUpdateDemandOrder, opts ...grpc.CallOption) (*MsgUpdateDemandOrderResponse, error) {
	out := new(MsgUpdateDemandOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.eibc.Msg/UpdateDemandOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateOnDemandLP(ctx context.Context, in *MsgCreateOnDemandLP, opts ...grpc.CallOption) (*MsgCreateOnDemandLPResponse, error) {
	out := new(MsgCreateOnDemandLPResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.eibc.Msg/CreateOnDemandLP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteOnDemandLP(ctx context.Context, in *MsgDeleteOnDemandLP, opts ...grpc.CallOption) (*MsgDeleteOnDemandLPResponse, error) {
	out := new(MsgDeleteOnDemandLPResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.eibc.Msg/DeleteOnDemandLP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	FindFulfiller(context.Context, *MsgFindFulfiller) (*MsgFindFulfillerResponse, error)
	FulfillOrder(context.Context, *MsgFulfillOrder) (*MsgFulfillOrderResponse, error)
	FulfillOrderAuthorized(context.Context, *MsgFulfillOrderAuthorized) (*MsgFulfillOrderAuthorizedResponse, error)
	UpdateDemandOrder(context.Context, *MsgUpdateDemandOrder) (*MsgUpdateDemandOrderResponse, error)
	CreateOnDemandLP(context.Context, *MsgCreateOnDemandLP) (*MsgCreateOnDemandLPResponse, error)
	DeleteOnDemandLP(context.Context, *MsgDeleteOnDemandLP) (*MsgDeleteOnDemandLPResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) FindFulfiller(ctx context.Context, req *MsgFindFulfiller) (*MsgFindFulfillerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFulfiller not implemented")
}
func (*UnimplementedMsgServer) FulfillOrder(ctx context.Context, req *MsgFulfillOrder) (*MsgFulfillOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FulfillOrder not implemented")
}
func (*UnimplementedMsgServer) FulfillOrderAuthorized(ctx context.Context, req *MsgFulfillOrderAuthorized) (*MsgFulfillOrderAuthorizedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FulfillOrderAuthorized not implemented")
}
func (*UnimplementedMsgServer) UpdateDemandOrder(ctx context.Context, req *MsgUpdateDemandOrder) (*MsgUpdateDemandOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDemandOrder not implemented")
}
func (*UnimplementedMsgServer) CreateOnDemandLP(ctx context.Context, req *MsgCreateOnDemandLP) (*MsgCreateOnDemandLPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOnDemandLP not implemented")
}
func (*UnimplementedMsgServer) DeleteOnDemandLP(ctx context.Context, req *MsgDeleteOnDemandLP) (*MsgDeleteOnDemandLPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOnDemandLP not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_FindFulfiller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFindFulfiller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FindFulfiller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.eibc.Msg/FindFulfiller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FindFulfiller(ctx, req.(*MsgFindFulfiller))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FulfillOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFulfillOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FulfillOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.eibc.Msg/FulfillOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FulfillOrder(ctx, req.(*MsgFulfillOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FulfillOrderAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFulfillOrderAuthorized)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FulfillOrderAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.eibc.Msg/FulfillOrderAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FulfillOrderAuthorized(ctx, req.(*MsgFulfillOrderAuthorized))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDemandOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDemandOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDemandOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.eibc.Msg/UpdateDemandOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDemandOrder(ctx, req.(*MsgUpdateDemandOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateOnDemandLP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateOnDemandLP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateOnDemandLP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.eibc.Msg/CreateOnDemandLP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateOnDemandLP(ctx, req.(*MsgCreateOnDemandLP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteOnDemandLP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteOnDemandLP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteOnDemandLP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.eibc.Msg/DeleteOnDemandLP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteOnDemandLP(ctx, req.(*MsgDeleteOnDemandLP))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.eibc.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindFulfiller",
			Handler:    _Msg_FindFulfiller_Handler,
		},
		{
			MethodName: "FulfillOrder",
			Handler:    _Msg_FulfillOrder_Handler,
		},
		{
			MethodName: "FulfillOrderAuthorized",
			Handler:    _Msg_FulfillOrderAuthorized_Handler,
		},
		{
			MethodName: "UpdateDemandOrder",
			Handler:    _Msg_UpdateDemandOrder_Handler,
		},
		{
			MethodName: "CreateOnDemandLP",
			Handler:    _Msg_CreateOnDemandLP_Handler,
		},
		{
			MethodName: "DeleteOnDemandLP",
			Handler:    _Msg_DeleteOnDemandLP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/eibc/tx.proto",
}

func (m *MsgFulfillOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFulfillOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedFee) > 0 {
		i -= len(m.ExpectedFee)
		copy(dAtA[i:], m.ExpectedFee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExpectedFee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FulfillerAddress) > 0 {
		i -= len(m.FulfillerAddress)
		copy(dAtA[i:], m.FulfillerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FulfillerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFulfillOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFulfillOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFulfillOrderAuthorized) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFulfillOrderAuthorized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillOrderAuthorized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SettlementValidated {
		i--
		if m.SettlementValidated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.OperatorFeeShare.Size()
		i -= size
		if _, err := m.OperatorFeeShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ExpectedFee) > 0 {
		i -= len(m.ExpectedFee)
		copy(dAtA[i:], m.ExpectedFee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExpectedFee)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OperatorFeeAddress) > 0 {
		i -= len(m.OperatorFeeAddress)
		copy(dAtA[i:], m.OperatorFeeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorFeeAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LpAddress) > 0 {
		i -= len(m.LpAddress)
		copy(dAtA[i:], m.LpAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LpAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFulfillOrderAuthorizedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFulfillOrderAuthorizedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillOrderAuthorizedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDemandOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDemandOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDemandOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewFee) > 0 {
		i -= len(m.NewFee)
		copy(dAtA[i:], m.NewFee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewFee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDemandOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDemandOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDemandOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFindFulfiller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFindFulfiller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFindFulfiller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rng != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Rng))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFindFulfillerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFindFulfillerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFindFulfillerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateOnDemandLP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOnDemandLP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOnDemandLP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lp != nil {
		{
			size, err := m.Lp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateOnDemandLPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOnDemandLPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOnDemandLPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteOnDemandLP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteOnDemandLP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteOnDemandLP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA3 := make([]byte, len(m.Ids)*10)
		var j2 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTx(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteOnDemandLPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteOnDemandLPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteOnDemandLPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgFulfillOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FulfillerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExpectedFee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFulfillOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFulfillOrderAuthorized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.LpAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorFeeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExpectedFee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.OperatorFeeShare.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.SettlementValidated {
		n += 2
	}
	return n
}

func (m *MsgFulfillOrderAuthorizedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDemandOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewFee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateDemandOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFindFulfiller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Rng != 0 {
		n += 1 + sovTx(uint64(m.Rng))
	}
	return n
}

func (m *MsgFindFulfillerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateOnDemandLP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lp != nil {
		l = m.Lp.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateOnDemandLPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgDeleteOnDemandLP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgDeleteOnDemandLPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgFulfillOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFulfillOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFulfillOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FulfillerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FulfillerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFulfillOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFulfillOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFulfillOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFulfillOrderAuthorized) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFulfillOrderAuthorized: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFulfillOrderAuthorized: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorFeeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorFeeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorFeeShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorFeeShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementValidated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementValidated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFulfillOrderAuthorizedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFulfillOrderAuthorizedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFulfillOrderAuthorizedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDemandOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDemandOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDemandOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDemandOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDemandOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDemandOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFindFulfiller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFindFulfiller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFindFulfiller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rng", wireType)
			}
			m.Rng = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rng |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFindFulfillerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFindFulfillerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFindFulfillerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateOnDemandLP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOnDemandLP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOnDemandLP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lp == nil {
				m.Lp = &OnDemandLP{}
			}
			if err := m.Lp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateOnDemandLPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOnDemandLPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOnDemandLPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteOnDemandLP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteOnDemandLP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteOnDemandLP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteOnDemandLPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteOnDemandLPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteOnDemandLPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
