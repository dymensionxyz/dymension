// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/eibc/lp.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/dymensionxyz/dymension/v3/x/common/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OnDemandLP struct {
	// where funds come from, bech32-encoded
	FundsAddr string `protobuf:"bytes,3,opt,name=funds_addr,json=fundsAddr,proto3" json:"funds_addr,omitempty"`
	Rollapp   string `protobuf:"bytes,4,opt,name=rollapp,proto3" json:"rollapp,omitempty"`
	Denom     string `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
	// will not fulfill if price is above this
	MaxPrice cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=maxPrice,proto3,customtype=cosmossdk.io/math.Int" json:"maxPrice"`
	// will not fulfill if fee is below this
	MinFee cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=minFee,proto3,customtype=cosmossdk.io/math.Int" json:"minFee"`
	// will not fulfill if brings spends above limit
	SpendLimit cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=spendLimit,proto3,customtype=cosmossdk.io/math.Int" json:"spendLimit"`
	// will not fulfill orders which were created fewer than this blocks in the past
	// e.g. compatibility check occurs at height 7, order existed since block 4,
	//      then fulfill if this field is 3 or less
	OrderMinAgeBlocks uint64 `protobuf:"varint,9,opt,name=orderMinAgeBlocks,proto3" json:"orderMinAgeBlocks,omitempty"`
}

func (m *OnDemandLP) Reset()         { *m = OnDemandLP{} }
func (m *OnDemandLP) String() string { return proto.CompactTextString(m) }
func (*OnDemandLP) ProtoMessage()    {}
func (*OnDemandLP) Descriptor() ([]byte, []int) {
	return fileDescriptor_13de3de2ae42eb80, []int{0}
}
func (m *OnDemandLP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnDemandLP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnDemandLP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnDemandLP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnDemandLP.Merge(m, src)
}
func (m *OnDemandLP) XXX_Size() int {
	return m.Size()
}
func (m *OnDemandLP) XXX_DiscardUnknown() {
	xxx_messageInfo_OnDemandLP.DiscardUnknown(m)
}

var xxx_messageInfo_OnDemandLP proto.InternalMessageInfo

func (m *OnDemandLP) GetFundsAddr() string {
	if m != nil {
		return m.FundsAddr
	}
	return ""
}

func (m *OnDemandLP) GetRollapp() string {
	if m != nil {
		return m.Rollapp
	}
	return ""
}

func (m *OnDemandLP) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *OnDemandLP) GetOrderMinAgeBlocks() uint64 {
	if m != nil {
		return m.OrderMinAgeBlocks
	}
	return 0
}

type OnDemandLPRecord struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// amt spent so far
	Spent cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=spent,proto3,customtype=cosmossdk.io/math.Int" json:"spent"`
	Lp    *OnDemandLP           `protobuf:"bytes,3,opt,name=lp,proto3" json:"lp,omitempty"`
}

func (m *OnDemandLPRecord) Reset()         { *m = OnDemandLPRecord{} }
func (m *OnDemandLPRecord) String() string { return proto.CompactTextString(m) }
func (*OnDemandLPRecord) ProtoMessage()    {}
func (*OnDemandLPRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_13de3de2ae42eb80, []int{1}
}
func (m *OnDemandLPRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnDemandLPRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnDemandLPRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnDemandLPRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnDemandLPRecord.Merge(m, src)
}
func (m *OnDemandLPRecord) XXX_Size() int {
	return m.Size()
}
func (m *OnDemandLPRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OnDemandLPRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OnDemandLPRecord proto.InternalMessageInfo

func (m *OnDemandLPRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OnDemandLPRecord) GetLp() *OnDemandLP {
	if m != nil {
		return m.Lp
	}
	return nil
}

func init() {
	proto.RegisterType((*OnDemandLP)(nil), "dymensionxyz.dymension.eibc.OnDemandLP")
	proto.RegisterType((*OnDemandLPRecord)(nil), "dymensionxyz.dymension.eibc.OnDemandLPRecord")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/eibc/lp.proto", fileDescriptor_13de3de2ae42eb80)
}

var fileDescriptor_13de3de2ae42eb80 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdf, 0x6a, 0x13, 0x41,
	0x18, 0xc5, 0xb3, 0x6b, 0x93, 0x36, 0x23, 0x88, 0x0e, 0x15, 0xc6, 0x8a, 0xdb, 0x52, 0x04, 0x8b,
	0x7f, 0x76, 0x48, 0x7b, 0xe1, 0x75, 0xa2, 0x28, 0xa5, 0x15, 0x4b, 0x2e, 0xbd, 0x09, 0xb3, 0x33,
	0x63, 0x3a, 0x64, 0x67, 0xbe, 0x61, 0x67, 0x52, 0x12, 0x9f, 0xc2, 0x27, 0xf0, 0x29, 0x7c, 0x88,
	0x5e, 0x16, 0xaf, 0xc4, 0x8b, 0x22, 0x89, 0x0f, 0x22, 0xbb, 0xb3, 0xc6, 0x40, 0x69, 0x20, 0x77,
	0x7b, 0xe6, 0x9c, 0xdf, 0xb7, 0x87, 0xdd, 0x6f, 0xd0, 0x53, 0x31, 0xd5, 0xd2, 0x38, 0x05, 0x66,
	0x32, 0xfd, 0x42, 0x17, 0x82, 0x4a, 0x95, 0x71, 0x9a, 0xdb, 0xd4, 0x16, 0xe0, 0x01, 0x3f, 0x5e,
	0x4e, 0xa5, 0x0b, 0x91, 0x96, 0xa9, 0x9d, 0xed, 0x21, 0x0c, 0xa1, 0xca, 0xd1, 0xf2, 0x29, 0x20,
	0x3b, 0xcf, 0x6f, 0x19, 0xcc, 0x41, 0x6b, 0x30, 0xd4, 0x79, 0xe6, 0xc7, 0xae, 0xce, 0x1e, 0xae,
	0xce, 0x16, 0x90, 0xe7, 0xcc, 0xda, 0x81, 0x65, 0x7c, 0x24, 0x7d, 0xcd, 0x24, 0x1c, 0x9c, 0x06,
	0x47, 0x33, 0xe6, 0x24, 0xbd, 0xe8, 0x64, 0xd2, 0xb3, 0x0e, 0xe5, 0xa0, 0x4c, 0xed, 0x3f, 0x0a,
	0xfe, 0x20, 0x14, 0x0b, 0x22, 0x58, 0xfb, 0x7f, 0x62, 0x84, 0x3e, 0x9a, 0xb7, 0x52, 0x33, 0x23,
	0x4e, 0xcf, 0xf0, 0x13, 0x84, 0x3e, 0x8f, 0x8d, 0x70, 0x03, 0x26, 0x44, 0x41, 0xee, 0xec, 0x45,
	0x07, 0xed, 0x7e, 0xbb, 0x3a, 0xe9, 0x0a, 0x51, 0x60, 0x82, 0x36, 0xeb, 0x02, 0x64, 0xa3, 0xf2,
	0xfe, 0x49, 0xbc, 0x8d, 0x9a, 0x42, 0x1a, 0xd0, 0xa4, 0x59, 0x9d, 0x07, 0x81, 0xdf, 0xa3, 0x2d,
	0xcd, 0x26, 0x67, 0x85, 0xe2, 0x92, 0xb4, 0x4a, 0xa3, 0xf7, 0xe2, 0xf2, 0x7a, 0xb7, 0xf1, 0xeb,
	0x7a, 0xf7, 0x61, 0x68, 0xe1, 0xc4, 0x28, 0x55, 0x40, 0x35, 0xf3, 0xe7, 0xe9, 0xb1, 0xf1, 0x3f,
	0xbe, 0xbf, 0x42, 0x75, 0xbd, 0x63, 0xe3, 0xfb, 0x0b, 0x18, 0xbf, 0x41, 0x2d, 0xad, 0xcc, 0x3b,
	0x29, 0xc9, 0xe6, 0xfa, 0x63, 0x6a, 0x14, 0x9f, 0x20, 0xe4, 0xac, 0x34, 0xe2, 0x54, 0x69, 0xe5,
	0xc9, 0xd6, 0xfa, 0x83, 0x96, 0x70, 0xfc, 0x12, 0x3d, 0x80, 0x42, 0xc8, 0xe2, 0x83, 0x32, 0xdd,
	0xa1, 0xec, 0xe5, 0xc0, 0x47, 0x8e, 0xb4, 0xf7, 0xa2, 0x83, 0x8d, 0xfe, 0x4d, 0x63, 0xff, 0x5b,
	0x84, 0xee, 0xff, 0xff, 0xcc, 0x7d, 0xc9, 0xa1, 0x10, 0xf8, 0x1e, 0x8a, 0x95, 0x20, 0x51, 0xc5,
	0xc4, 0x4a, 0xe0, 0x2e, 0x6a, 0x96, 0x2f, 0xf0, 0x24, 0x5e, 0xbf, 0x5a, 0x20, 0xf1, 0x6b, 0x14,
	0xe7, 0xb6, 0xfa, 0x6f, 0x77, 0x0f, 0x9f, 0xa5, 0x2b, 0x36, 0x35, 0x5d, 0x6a, 0x13, 0xe7, 0xb6,
	0x77, 0x72, 0x39, 0x4b, 0xa2, 0xab, 0x59, 0x12, 0xfd, 0x9e, 0x25, 0xd1, 0xd7, 0x79, 0xd2, 0xb8,
	0x9a, 0x27, 0x8d, 0x9f, 0xf3, 0xa4, 0xf1, 0xa9, 0x33, 0x54, 0xfe, 0x7c, 0x9c, 0xa5, 0x1c, 0x34,
	0xbd, 0x65, 0x37, 0x2f, 0x8e, 0xe8, 0x24, 0xdc, 0x12, 0x3f, 0xb5, 0xd2, 0x65, 0xad, 0x6a, 0xb7,
	0x8e, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x82, 0xf5, 0x7b, 0x51, 0x03, 0x00, 0x00,
}

func (m *OnDemandLP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnDemandLP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnDemandLP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderMinAgeBlocks != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.OrderMinAgeBlocks))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.SpendLimit.Size()
		i -= size
		if _, err := m.SpendLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.MinFee.Size()
		i -= size
		if _, err := m.MinFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.MaxPrice.Size()
		i -= size
		if _, err := m.MaxPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLp(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Rollapp) > 0 {
		i -= len(m.Rollapp)
		copy(dAtA[i:], m.Rollapp)
		i = encodeVarintLp(dAtA, i, uint64(len(m.Rollapp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FundsAddr) > 0 {
		i -= len(m.FundsAddr)
		copy(dAtA[i:], m.FundsAddr)
		i = encodeVarintLp(dAtA, i, uint64(len(m.FundsAddr)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *OnDemandLPRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnDemandLPRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnDemandLPRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lp != nil {
		{
			size, err := m.Lp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Spent.Size()
		i -= size
		if _, err := m.Spent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLp(dAtA []byte, offset int, v uint64) int {
	offset -= sovLp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OnDemandLP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FundsAddr)
	if l > 0 {
		n += 1 + l + sovLp(uint64(l))
	}
	l = len(m.Rollapp)
	if l > 0 {
		n += 1 + l + sovLp(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLp(uint64(l))
	}
	l = m.MaxPrice.Size()
	n += 1 + l + sovLp(uint64(l))
	l = m.MinFee.Size()
	n += 1 + l + sovLp(uint64(l))
	l = m.SpendLimit.Size()
	n += 1 + l + sovLp(uint64(l))
	if m.OrderMinAgeBlocks != 0 {
		n += 1 + sovLp(uint64(m.OrderMinAgeBlocks))
	}
	return n
}

func (m *OnDemandLPRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLp(uint64(m.Id))
	}
	l = m.Spent.Size()
	n += 1 + l + sovLp(uint64(l))
	if m.Lp != nil {
		l = m.Lp.Size()
		n += 1 + l + sovLp(uint64(l))
	}
	return n
}

func sovLp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLp(x uint64) (n int) {
	return sovLp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OnDemandLP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnDemandLP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnDemandLP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundsAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FundsAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollapp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rollapp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpendLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderMinAgeBlocks", wireType)
			}
			m.OrderMinAgeBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderMinAgeBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnDemandLPRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnDemandLPRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnDemandLPRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lp == nil {
				m.Lp = &OnDemandLP{}
			}
			if err := m.Lp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLp = fmt.Errorf("proto: unexpected end of group")
)
