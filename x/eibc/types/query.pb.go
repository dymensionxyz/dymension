// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/eibc/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/dymensionxyz/dymension/v3/x/common/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FulfillmentState int32

const (
	FulfillmentState_UNDEFINED   FulfillmentState = 0
	FulfillmentState_FULFILLED   FulfillmentState = 1
	FulfillmentState_UNFULFILLED FulfillmentState = 2
)

var FulfillmentState_name = map[int32]string{
	0: "UNDEFINED",
	1: "FULFILLED",
	2: "UNFULFILLED",
}

var FulfillmentState_value = map[string]int32{
	"UNDEFINED":   0,
	"FULFILLED":   1,
	"UNFULFILLED": 2,
}

func (x FulfillmentState) String() string {
	return proto.EnumName(FulfillmentState_name, int32(x))
}

func (FulfillmentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d85bfe71ceb5f8dc, []int{0}
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d85bfe71ceb5f8dc, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d85bfe71ceb5f8dc, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetDemandOrderRequest is the request type for the Query/GetDemandOrder RPC method.
type QueryGetDemandOrderRequest struct {
	// id of the demand order to get
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDemandOrderRequest) Reset()         { *m = QueryGetDemandOrderRequest{} }
func (m *QueryGetDemandOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDemandOrderRequest) ProtoMessage()    {}
func (*QueryGetDemandOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d85bfe71ceb5f8dc, []int{2}
}
func (m *QueryGetDemandOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDemandOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDemandOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDemandOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDemandOrderRequest.Merge(m, src)
}
func (m *QueryGetDemandOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDemandOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDemandOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDemandOrderRequest proto.InternalMessageInfo

func (m *QueryGetDemandOrderRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryDemandOrdersByStatusRequest is the request type for the Query/GetDemandOrdersByStatus RPC method.
type QueryDemandOrdersByStatusRequest struct {
	// status of the demand order
	Status types.Status `protobuf:"varint,1,opt,name=status,proto3,enum=dymensionxyz.dymension.common.Status" json:"status,omitempty"`
	// optional type
	Type types.RollappPacket_Type `protobuf:"varint,2,opt,name=type,proto3,enum=dymensionxyz.dymension.common.RollappPacket_Type" json:"type,omitempty"`
	// optional rollapp_id
	RollappId string `protobuf:"bytes,3,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// optional limit
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// optional fulfillment state
	FulfillmentState FulfillmentState `protobuf:"varint,5,opt,name=fulfillment_state,json=fulfillmentState,proto3,enum=dymensionxyz.dymension.eibc.FulfillmentState" json:"fulfillment_state,omitempty"`
	// optional fulfiller address
	Fulfiller string `protobuf:"bytes,6,opt,name=fulfiller,proto3" json:"fulfiller,omitempty"`
	// optional denom
	Denom string `protobuf:"bytes,7,opt,name=denom,proto3" json:"denom,omitempty"`
	// optional recipient address
	Recipient  string             `protobuf:"bytes,8,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,9,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDemandOrdersByStatusRequest) Reset()         { *m = QueryDemandOrdersByStatusRequest{} }
func (m *QueryDemandOrdersByStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDemandOrdersByStatusRequest) ProtoMessage()    {}
func (*QueryDemandOrdersByStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d85bfe71ceb5f8dc, []int{3}
}
func (m *QueryDemandOrdersByStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDemandOrdersByStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDemandOrdersByStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDemandOrdersByStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDemandOrdersByStatusRequest.Merge(m, src)
}
func (m *QueryDemandOrdersByStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDemandOrdersByStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDemandOrdersByStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDemandOrdersByStatusRequest proto.InternalMessageInfo

func (m *QueryDemandOrdersByStatusRequest) GetStatus() types.Status {
	if m != nil {
		return m.Status
	}
	return types.Status_PENDING
}

func (m *QueryDemandOrdersByStatusRequest) GetType() types.RollappPacket_Type {
	if m != nil {
		return m.Type
	}
	return types.RollappPacket_ON_RECV
}

func (m *QueryDemandOrdersByStatusRequest) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *QueryDemandOrdersByStatusRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryDemandOrdersByStatusRequest) GetFulfillmentState() FulfillmentState {
	if m != nil {
		return m.FulfillmentState
	}
	return FulfillmentState_UNDEFINED
}

func (m *QueryDemandOrdersByStatusRequest) GetFulfiller() string {
	if m != nil {
		return m.Fulfiller
	}
	return ""
}

func (m *QueryDemandOrdersByStatusRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryDemandOrdersByStatusRequest) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *QueryDemandOrdersByStatusRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetDemandOrderResponse is the response type for the Query/GetDemandOrder RPC method.
type QueryGetDemandOrderResponse struct {
	// demand order with the given id
	DemandOrder *DemandOrder `protobuf:"bytes,1,opt,name=demand_order,json=demandOrder,proto3" json:"demand_order,omitempty"`
}

func (m *QueryGetDemandOrderResponse) Reset()         { *m = QueryGetDemandOrderResponse{} }
func (m *QueryGetDemandOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDemandOrderResponse) ProtoMessage()    {}
func (*QueryGetDemandOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d85bfe71ceb5f8dc, []int{4}
}
func (m *QueryGetDemandOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDemandOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDemandOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDemandOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDemandOrderResponse.Merge(m, src)
}
func (m *QueryGetDemandOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDemandOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDemandOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDemandOrderResponse proto.InternalMessageInfo

func (m *QueryGetDemandOrderResponse) GetDemandOrder() *DemandOrder {
	if m != nil {
		return m.DemandOrder
	}
	return nil
}

// QueryDemandOrdersByStatusResponse is the response type for the Query/GetDemandOrdersByStatus RPC method.
type QueryDemandOrdersByStatusResponse struct {
	// A list of demand orders with the given status
	DemandOrders []*DemandOrder      `protobuf:"bytes,1,rep,name=demand_orders,json=demandOrders,proto3" json:"demand_orders,omitempty"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDemandOrdersByStatusResponse) Reset()         { *m = QueryDemandOrdersByStatusResponse{} }
func (m *QueryDemandOrdersByStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDemandOrdersByStatusResponse) ProtoMessage()    {}
func (*QueryDemandOrdersByStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d85bfe71ceb5f8dc, []int{5}
}
func (m *QueryDemandOrdersByStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDemandOrdersByStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDemandOrdersByStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDemandOrdersByStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDemandOrdersByStatusResponse.Merge(m, src)
}
func (m *QueryDemandOrdersByStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDemandOrdersByStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDemandOrdersByStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDemandOrdersByStatusResponse proto.InternalMessageInfo

func (m *QueryDemandOrdersByStatusResponse) GetDemandOrders() []*DemandOrder {
	if m != nil {
		return m.DemandOrders
	}
	return nil
}

func (m *QueryDemandOrdersByStatusResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOnDemandLPsRequest struct {
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *QueryOnDemandLPsRequest) Reset()         { *m = QueryOnDemandLPsRequest{} }
func (m *QueryOnDemandLPsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOnDemandLPsRequest) ProtoMessage()    {}
func (*QueryOnDemandLPsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d85bfe71ceb5f8dc, []int{6}
}
func (m *QueryOnDemandLPsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOnDemandLPsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOnDemandLPsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOnDemandLPsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOnDemandLPsRequest.Merge(m, src)
}
func (m *QueryOnDemandLPsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOnDemandLPsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOnDemandLPsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOnDemandLPsRequest proto.InternalMessageInfo

func (m *QueryOnDemandLPsRequest) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type QueryOnDemandLPsResponse struct {
	Lps []*OnDemandLPRecord `protobuf:"bytes,1,rep,name=lps,proto3" json:"lps,omitempty"`
}

func (m *QueryOnDemandLPsResponse) Reset()         { *m = QueryOnDemandLPsResponse{} }
func (m *QueryOnDemandLPsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOnDemandLPsResponse) ProtoMessage()    {}
func (*QueryOnDemandLPsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d85bfe71ceb5f8dc, []int{7}
}
func (m *QueryOnDemandLPsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOnDemandLPsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOnDemandLPsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOnDemandLPsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOnDemandLPsResponse.Merge(m, src)
}
func (m *QueryOnDemandLPsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOnDemandLPsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOnDemandLPsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOnDemandLPsResponse proto.InternalMessageInfo

func (m *QueryOnDemandLPsResponse) GetLps() []*OnDemandLPRecord {
	if m != nil {
		return m.Lps
	}
	return nil
}

type QueryOnDemandLPsByAddrRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *QueryOnDemandLPsByAddrRequest) Reset()         { *m = QueryOnDemandLPsByAddrRequest{} }
func (m *QueryOnDemandLPsByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOnDemandLPsByAddrRequest) ProtoMessage()    {}
func (*QueryOnDemandLPsByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d85bfe71ceb5f8dc, []int{8}
}
func (m *QueryOnDemandLPsByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOnDemandLPsByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOnDemandLPsByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOnDemandLPsByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOnDemandLPsByAddrRequest.Merge(m, src)
}
func (m *QueryOnDemandLPsByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOnDemandLPsByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOnDemandLPsByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOnDemandLPsByAddrRequest proto.InternalMessageInfo

func (m *QueryOnDemandLPsByAddrRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type QueryOnDemandLPsByAddrResponse struct {
	Lps []*OnDemandLPRecord `protobuf:"bytes,1,rep,name=lps,proto3" json:"lps,omitempty"`
}

func (m *QueryOnDemandLPsByAddrResponse) Reset()         { *m = QueryOnDemandLPsByAddrResponse{} }
func (m *QueryOnDemandLPsByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOnDemandLPsByAddrResponse) ProtoMessage()    {}
func (*QueryOnDemandLPsByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d85bfe71ceb5f8dc, []int{9}
}
func (m *QueryOnDemandLPsByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOnDemandLPsByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOnDemandLPsByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOnDemandLPsByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOnDemandLPsByAddrResponse.Merge(m, src)
}
func (m *QueryOnDemandLPsByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOnDemandLPsByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOnDemandLPsByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOnDemandLPsByAddrResponse proto.InternalMessageInfo

func (m *QueryOnDemandLPsByAddrResponse) GetLps() []*OnDemandLPRecord {
	if m != nil {
		return m.Lps
	}
	return nil
}

func init() {
	proto.RegisterEnum("dymensionxyz.dymension.eibc.FulfillmentState", FulfillmentState_name, FulfillmentState_value)
	proto.RegisterType((*QueryParamsRequest)(nil), "dymensionxyz.dymension.eibc.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dymensionxyz.dymension.eibc.QueryParamsResponse")
	proto.RegisterType((*QueryGetDemandOrderRequest)(nil), "dymensionxyz.dymension.eibc.QueryGetDemandOrderRequest")
	proto.RegisterType((*QueryDemandOrdersByStatusRequest)(nil), "dymensionxyz.dymension.eibc.QueryDemandOrdersByStatusRequest")
	proto.RegisterType((*QueryGetDemandOrderResponse)(nil), "dymensionxyz.dymension.eibc.QueryGetDemandOrderResponse")
	proto.RegisterType((*QueryDemandOrdersByStatusResponse)(nil), "dymensionxyz.dymension.eibc.QueryDemandOrdersByStatusResponse")
	proto.RegisterType((*QueryOnDemandLPsRequest)(nil), "dymensionxyz.dymension.eibc.QueryOnDemandLPsRequest")
	proto.RegisterType((*QueryOnDemandLPsResponse)(nil), "dymensionxyz.dymension.eibc.QueryOnDemandLPsResponse")
	proto.RegisterType((*QueryOnDemandLPsByAddrRequest)(nil), "dymensionxyz.dymension.eibc.QueryOnDemandLPsByAddrRequest")
	proto.RegisterType((*QueryOnDemandLPsByAddrResponse)(nil), "dymensionxyz.dymension.eibc.QueryOnDemandLPsByAddrResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/eibc/query.proto", fileDescriptor_d85bfe71ceb5f8dc)
}

var fileDescriptor_d85bfe71ceb5f8dc = []byte{
	// 928 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5d, 0x6f, 0x1b, 0x45,
	0x14, 0xf5, 0xda, 0x8e, 0x8b, 0x6f, 0xfa, 0x61, 0xa6, 0x91, 0x58, 0xb9, 0xad, 0x09, 0x5b, 0x4a,
	0xa3, 0x16, 0x76, 0x12, 0x87, 0x96, 0x88, 0xaa, 0x45, 0xb1, 0x12, 0x57, 0x51, 0x43, 0x1a, 0x16,
	0x22, 0xa1, 0xf2, 0x60, 0xad, 0x3d, 0x13, 0x33, 0xb0, 0xbb, 0xb3, 0xdd, 0x5d, 0x57, 0x35, 0x51,
	0x5e, 0xf8, 0x05, 0x48, 0xbc, 0xf0, 0x43, 0x78, 0x03, 0xf1, 0xdc, 0x27, 0x54, 0xd1, 0x17, 0x9e,
	0x10, 0x4a, 0xf8, 0x21, 0x68, 0x3e, 0x6c, 0xaf, 0xf3, 0xb1, 0x8e, 0xab, 0xbe, 0x44, 0x3b, 0xe3,
	0x7b, 0xee, 0x3d, 0xe7, 0xce, 0x3d, 0x33, 0x81, 0x9b, 0xa4, 0xef, 0xd3, 0x20, 0x66, 0x3c, 0x78,
	0xde, 0xff, 0x01, 0x0f, 0x17, 0x98, 0xb2, 0x76, 0x07, 0x3f, 0xed, 0xd1, 0xa8, 0x6f, 0x87, 0x11,
	0x4f, 0x38, 0xba, 0x92, 0x0e, 0xb4, 0x87, 0x0b, 0x5b, 0x04, 0x56, 0xe7, 0xba, 0xbc, 0xcb, 0x65,
	0x1c, 0x16, 0x5f, 0x0a, 0x52, 0xbd, 0xda, 0xe5, 0xbc, 0xeb, 0x51, 0xec, 0x86, 0x0c, 0xbb, 0x41,
	0xc0, 0x13, 0x37, 0x61, 0x3c, 0x88, 0xf5, 0xaf, 0xb7, 0x3a, 0x3c, 0xf6, 0x79, 0x8c, 0xdb, 0x6e,
	0x4c, 0x55, 0x25, 0xfc, 0x6c, 0xa9, 0x4d, 0x13, 0x77, 0x09, 0x87, 0x6e, 0x97, 0x05, 0x32, 0x58,
	0xc7, 0x2e, 0x64, 0xb1, 0x0c, 0xdd, 0xc8, 0xf5, 0x07, 0x59, 0xed, 0xac, 0x48, 0x42, 0x7d, 0x37,
	0x20, 0x2d, 0x1e, 0x11, 0x1a, 0x0d, 0x58, 0x9c, 0x12, 0xdf, 0xe1, 0xbe, 0xcf, 0x03, 0x1c, 0x27,
	0x6e, 0xd2, 0x1b, 0xe4, 0xae, 0x67, 0xc7, 0x46, 0xdc, 0xf3, 0xdc, 0x30, 0x6c, 0x85, 0x6e, 0xe7,
	0x7b, 0x9a, 0x68, 0xcc, 0xfb, 0x59, 0x7c, 0xbc, 0x50, 0x45, 0x59, 0x73, 0x80, 0xbe, 0x10, 0x1d,
	0xd8, 0x96, 0x52, 0x1c, 0xfa, 0xb4, 0x47, 0xe3, 0xc4, 0xfa, 0x1a, 0x2e, 0x8f, 0xed, 0xc6, 0x21,
	0x0f, 0x62, 0x8a, 0x56, 0xa1, 0xa4, 0x24, 0x9b, 0xc6, 0xbc, 0xb1, 0x30, 0x5b, 0xbf, 0x6e, 0x67,
	0x1c, 0x8d, 0xad, 0xc0, 0x8d, 0xe2, 0x8b, 0x7f, 0xde, 0xcd, 0x39, 0x1a, 0x68, 0x7d, 0x08, 0x55,
	0x99, 0xf9, 0x21, 0x4d, 0xd6, 0x64, 0x4f, 0x1e, 0x8b, 0x96, 0xe8, 0xba, 0xe8, 0x22, 0xe4, 0x19,
	0x91, 0xc9, 0xcb, 0x4e, 0x9e, 0x11, 0xeb, 0x55, 0x01, 0xe6, 0x65, 0x78, 0x2a, 0x36, 0x6e, 0xf4,
	0xbf, 0x94, 0xbd, 0x19, 0x80, 0xee, 0x43, 0x49, 0x35, 0x4b, 0x02, 0x2f, 0xd6, 0x6f, 0x9c, 0xc6,
	0x4a, 0x75, 0xcb, 0xd6, 0x68, 0x0d, 0x42, 0xeb, 0x50, 0x4c, 0xfa, 0x21, 0x35, 0xf3, 0x12, 0xbc,
	0x34, 0x01, 0xec, 0xa8, 0x56, 0x6f, 0xab, 0x4e, 0x7f, 0xd5, 0x0f, 0xa9, 0x23, 0xe1, 0xe8, 0x1a,
	0xc0, 0xe0, 0x18, 0x18, 0x31, 0x0b, 0x52, 0x42, 0x59, 0xef, 0x6c, 0x10, 0x34, 0x07, 0x33, 0x1e,
	0xf3, 0x59, 0x62, 0x16, 0xe7, 0x8d, 0x85, 0x19, 0x47, 0x2d, 0xd0, 0x13, 0x78, 0x7b, 0xb7, 0xe7,
	0xed, 0x32, 0xcf, 0xf3, 0x69, 0x90, 0xb4, 0x04, 0x23, 0x6a, 0xce, 0x48, 0x22, 0x1f, 0x65, 0xf6,
	0xb6, 0x39, 0x42, 0x09, 0x39, 0xd4, 0xa9, 0xec, 0x1e, 0xd9, 0x41, 0x57, 0xa1, 0xac, 0xf7, 0x68,
	0x64, 0x96, 0x14, 0x9f, 0xe1, 0x86, 0xe0, 0x43, 0x68, 0xc0, 0x7d, 0xf3, 0x9c, 0xfc, 0x45, 0x2d,
	0x04, 0x26, 0xa2, 0x1d, 0x16, 0x32, 0x1a, 0x24, 0xe6, 0x5b, 0x5a, 0xc3, 0x60, 0x03, 0x35, 0x01,
	0x46, 0xfe, 0x30, 0xcb, 0x72, 0x04, 0x3e, 0xb0, 0x95, 0x99, 0x6c, 0x61, 0x26, 0x5b, 0xd9, 0x56,
	0x9b, 0xc9, 0xde, 0x76, 0xbb, 0x54, 0x1f, 0x92, 0x93, 0x42, 0x5a, 0xdf, 0xc1, 0x95, 0x13, 0x67,
	0x40, 0x4f, 0xd9, 0x23, 0x38, 0x9f, 0xb6, 0x8b, 0x9e, 0xb5, 0x85, 0xcc, 0x7e, 0xa4, 0xf3, 0xcc,
	0x92, 0xd1, 0xc2, 0xfa, 0xcd, 0x80, 0xf7, 0x32, 0x26, 0x48, 0x97, 0xfc, 0x1c, 0x2e, 0xa4, 0x4b,
	0x8a, 0x49, 0x2a, 0x4c, 0x55, 0xf3, 0x7c, 0xaa, 0x66, 0x8c, 0x1e, 0x8e, 0x35, 0x2a, 0x2f, 0xf9,
	0xdf, 0x9c, 0xd8, 0x28, 0xc5, 0x65, 0xac, 0x53, 0xb7, 0xe1, 0x1d, 0x49, 0xfe, 0x71, 0xa0, 0x8a,
	0x6d, 0x6e, 0x0f, 0xa7, 0xbe, 0x02, 0x05, 0x46, 0x14, 0xd1, 0xa2, 0x23, 0x3e, 0xad, 0x6f, 0xc0,
	0x3c, 0x1e, 0xac, 0x05, 0x7e, 0x06, 0x05, 0x2f, 0x1c, 0xc8, 0xca, 0x1e, 0xad, 0x11, 0xdc, 0xa1,
	0x1d, 0x1e, 0x11, 0x47, 0x20, 0xad, 0x65, 0xb8, 0x76, 0x34, 0x79, 0xa3, 0xbf, 0x4a, 0xc8, 0xd0,
	0xba, 0x08, 0x8a, 0x2e, 0x21, 0x91, 0x36, 0xaf, 0xfc, 0xb6, 0x5c, 0xa8, 0x9d, 0x06, 0x7a, 0x43,
	0xbc, 0x6e, 0xad, 0x42, 0xe5, 0xa8, 0x17, 0xd0, 0x05, 0x28, 0xef, 0x6c, 0xad, 0xad, 0x37, 0x37,
	0xb6, 0xd6, 0xd7, 0x2a, 0x39, 0xb1, 0x6c, 0xee, 0x6c, 0x36, 0x37, 0x36, 0x37, 0xd7, 0xd7, 0x2a,
	0x06, 0xba, 0x04, 0xb3, 0x3b, 0x5b, 0xa3, 0x8d, 0x7c, 0xfd, 0x8f, 0x73, 0x30, 0x23, 0x69, 0xa2,
	0x5f, 0x0c, 0x28, 0xa9, 0x5b, 0x0b, 0xe1, 0x4c, 0x2e, 0xc7, 0xaf, 0xcc, 0xea, 0xe2, 0xd9, 0x01,
	0x4a, 0xbb, 0x75, 0xfb, 0xc7, 0x57, 0xff, 0xfd, 0x9c, 0xbf, 0x81, 0xae, 0xe3, 0xc9, 0x6f, 0x0c,
	0xfa, 0xdd, 0x80, 0x4b, 0xa9, 0x81, 0x6b, 0xf4, 0x37, 0x08, 0xfa, 0x64, 0x72, 0xc9, 0x13, 0xaf,
	0xd9, 0xea, 0xca, 0xf4, 0x40, 0xcd, 0xf9, 0xae, 0xe4, 0xbc, 0x88, 0x6c, 0x7c, 0xd6, 0xd7, 0x0e,
	0xef, 0x31, 0xb2, 0x8f, 0xfe, 0x32, 0x60, 0xee, 0x24, 0x07, 0xa2, 0xfb, 0x93, 0xa9, 0x64, 0xdc,
	0xfd, 0xd5, 0x07, 0xaf, 0x0b, 0xd7, 0x7a, 0xee, 0x49, 0x3d, 0x77, 0xd0, 0xf2, 0x99, 0xf5, 0xc4,
	0x78, 0x4f, 0x3d, 0x1c, 0xfb, 0xe8, 0x57, 0x03, 0x66, 0x53, 0xa3, 0x8d, 0x3e, 0x9e, 0x4c, 0xe6,
	0xb8, 0x91, 0xab, 0x77, 0xa6, 0x44, 0x69, 0xe6, 0x2b, 0x92, 0x79, 0x1d, 0x2d, 0x66, 0x32, 0xe7,
	0x41, 0x4b, 0x93, 0xf7, 0xc2, 0x58, 0x1c, 0x45, 0xbc, 0x8f, 0xfe, 0x34, 0xe0, 0xf2, 0x98, 0x23,
	0x95, 0x27, 0xd1, 0xa7, 0x53, 0x11, 0x19, 0x73, 0x7f, 0xf5, 0xde, 0x6b, 0x61, 0xb5, 0x94, 0x07,
	0x52, 0xca, 0x0a, 0xba, 0x7b, 0x76, 0x29, 0x2d, 0x71, 0xbf, 0xe0, 0x3d, 0xf1, 0x77, 0xbf, 0xf1,
	0xe8, 0xc5, 0x41, 0xcd, 0x78, 0x79, 0x50, 0x33, 0xfe, 0x3d, 0xa8, 0x19, 0x3f, 0x1d, 0xd6, 0x72,
	0x2f, 0x0f, 0x6b, 0xb9, 0xbf, 0x0f, 0x6b, 0xb9, 0x27, 0x4b, 0x5d, 0x96, 0x7c, 0xdb, 0x6b, 0x8b,
	0xc7, 0xfb, 0xb4, 0xdc, 0xcf, 0x96, 0xf1, 0x73, 0x55, 0x40, 0x3c, 0xe3, 0x71, 0xbb, 0x24, 0xff,
	0x2f, 0x5a, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x50, 0x51, 0x0a, 0x35, 0x9f, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Demand Order by id.
	DemandOrderById(ctx context.Context, in *QueryGetDemandOrderRequest, opts ...grpc.CallOption) (*QueryGetDemandOrderResponse, error)
	// Queries a list of demand orders by status.
	DemandOrdersByStatus(ctx context.Context, in *QueryDemandOrdersByStatusRequest, opts ...grpc.CallOption) (*QueryDemandOrdersByStatusResponse, error)
	OnDemandLPs(ctx context.Context, in *QueryOnDemandLPsRequest, opts ...grpc.CallOption) (*QueryOnDemandLPsResponse, error)
	OnDemandLPsByByAddr(ctx context.Context, in *QueryOnDemandLPsByAddrRequest, opts ...grpc.CallOption) (*QueryOnDemandLPsByAddrResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.eibc.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DemandOrderById(ctx context.Context, in *QueryGetDemandOrderRequest, opts ...grpc.CallOption) (*QueryGetDemandOrderResponse, error) {
	out := new(QueryGetDemandOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.eibc.Query/DemandOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DemandOrdersByStatus(ctx context.Context, in *QueryDemandOrdersByStatusRequest, opts ...grpc.CallOption) (*QueryDemandOrdersByStatusResponse, error) {
	out := new(QueryDemandOrdersByStatusResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.eibc.Query/DemandOrdersByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OnDemandLPs(ctx context.Context, in *QueryOnDemandLPsRequest, opts ...grpc.CallOption) (*QueryOnDemandLPsResponse, error) {
	out := new(QueryOnDemandLPsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.eibc.Query/OnDemandLPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OnDemandLPsByByAddr(ctx context.Context, in *QueryOnDemandLPsByAddrRequest, opts ...grpc.CallOption) (*QueryOnDemandLPsByAddrResponse, error) {
	out := new(QueryOnDemandLPsByAddrResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.eibc.Query/OnDemandLPsByByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Demand Order by id.
	DemandOrderById(context.Context, *QueryGetDemandOrderRequest) (*QueryGetDemandOrderResponse, error)
	// Queries a list of demand orders by status.
	DemandOrdersByStatus(context.Context, *QueryDemandOrdersByStatusRequest) (*QueryDemandOrdersByStatusResponse, error)
	OnDemandLPs(context.Context, *QueryOnDemandLPsRequest) (*QueryOnDemandLPsResponse, error)
	OnDemandLPsByByAddr(context.Context, *QueryOnDemandLPsByAddrRequest) (*QueryOnDemandLPsByAddrResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DemandOrderById(ctx context.Context, req *QueryGetDemandOrderRequest) (*QueryGetDemandOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemandOrderById not implemented")
}
func (*UnimplementedQueryServer) DemandOrdersByStatus(ctx context.Context, req *QueryDemandOrdersByStatusRequest) (*QueryDemandOrdersByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemandOrdersByStatus not implemented")
}
func (*UnimplementedQueryServer) OnDemandLPs(ctx context.Context, req *QueryOnDemandLPsRequest) (*QueryOnDemandLPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnDemandLPs not implemented")
}
func (*UnimplementedQueryServer) OnDemandLPsByByAddr(ctx context.Context, req *QueryOnDemandLPsByAddrRequest) (*QueryOnDemandLPsByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnDemandLPsByByAddr not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.eibc.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DemandOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDemandOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DemandOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.eibc.Query/DemandOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DemandOrderById(ctx, req.(*QueryGetDemandOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DemandOrdersByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDemandOrdersByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DemandOrdersByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.eibc.Query/DemandOrdersByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DemandOrdersByStatus(ctx, req.(*QueryDemandOrdersByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OnDemandLPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOnDemandLPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OnDemandLPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.eibc.Query/OnDemandLPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OnDemandLPs(ctx, req.(*QueryOnDemandLPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OnDemandLPsByByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOnDemandLPsByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OnDemandLPsByByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.eibc.Query/OnDemandLPsByByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OnDemandLPsByByAddr(ctx, req.(*QueryOnDemandLPsByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.eibc.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DemandOrderById",
			Handler:    _Query_DemandOrderById_Handler,
		},
		{
			MethodName: "DemandOrdersByStatus",
			Handler:    _Query_DemandOrdersByStatus_Handler,
		},
		{
			MethodName: "OnDemandLPs",
			Handler:    _Query_OnDemandLPs_Handler,
		},
		{
			MethodName: "OnDemandLPsByByAddr",
			Handler:    _Query_OnDemandLPsByByAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/eibc/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetDemandOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDemandOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDemandOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDemandOrdersByStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDemandOrdersByStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDemandOrdersByStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Fulfiller) > 0 {
		i -= len(m.Fulfiller)
		copy(dAtA[i:], m.Fulfiller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Fulfiller)))
		i--
		dAtA[i] = 0x32
	}
	if m.FulfillmentState != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FulfillmentState))
		i--
		dAtA[i] = 0x28
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDemandOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDemandOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDemandOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DemandOrder != nil {
		{
			size, err := m.DemandOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDemandOrdersByStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDemandOrdersByStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDemandOrdersByStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DemandOrders) > 0 {
		for iNdEx := len(m.DemandOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DemandOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOnDemandLPsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOnDemandLPsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOnDemandLPsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA6 := make([]byte, len(m.Ids)*10)
		var j5 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintQuery(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOnDemandLPsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOnDemandLPsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOnDemandLPsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lps) > 0 {
		for iNdEx := len(m.Lps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOnDemandLPsByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOnDemandLPsByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOnDemandLPsByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOnDemandLPsByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOnDemandLPsByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOnDemandLPsByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lps) > 0 {
		for iNdEx := len(m.Lps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetDemandOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDemandOrdersByStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Type != 0 {
		n += 1 + sovQuery(uint64(m.Type))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	if m.FulfillmentState != 0 {
		n += 1 + sovQuery(uint64(m.FulfillmentState))
	}
	l = len(m.Fulfiller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDemandOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DemandOrder != nil {
		l = m.DemandOrder.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDemandOrdersByStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DemandOrders) > 0 {
		for _, e := range m.DemandOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOnDemandLPsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryOnDemandLPsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lps) > 0 {
		for _, e := range m.Lps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOnDemandLPsByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOnDemandLPsByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lps) > 0 {
		for _, e := range m.Lps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDemandOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDemandOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDemandOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDemandOrdersByStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDemandOrdersByStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDemandOrdersByStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types.Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= types.RollappPacket_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FulfillmentState", wireType)
			}
			m.FulfillmentState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FulfillmentState |= FulfillmentState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fulfiller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fulfiller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDemandOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDemandOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDemandOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DemandOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DemandOrder == nil {
				m.DemandOrder = &DemandOrder{}
			}
			if err := m.DemandOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDemandOrdersByStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDemandOrdersByStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDemandOrdersByStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DemandOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DemandOrders = append(m.DemandOrders, &DemandOrder{})
			if err := m.DemandOrders[len(m.DemandOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOnDemandLPsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOnDemandLPsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOnDemandLPsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOnDemandLPsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOnDemandLPsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOnDemandLPsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lps = append(m.Lps, &OnDemandLPRecord{})
			if err := m.Lps[len(m.Lps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOnDemandLPsByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOnDemandLPsByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOnDemandLPsByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOnDemandLPsByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOnDemandLPsByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOnDemandLPsByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lps = append(m.Lps, &OnDemandLPRecord{})
			if err := m.Lps[len(m.Lps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
