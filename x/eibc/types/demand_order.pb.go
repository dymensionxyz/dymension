// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/eibc/demand_order.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/dymensionxyz/dymension/v3/x/common/types"
	types2 "github.com/dymensionxyz/dymension/v3/x/transfer/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DemandOrder struct {
	// id is a hash of the form generated by GetRollappPacketKey,
	// e.g
	// status/rollappid/packetProofHeight/packetDestinationChannel-PacketSequence
	// which guarantees uniqueness
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// tracking_packet_key is the key of the packet that is being tracked.
	// This key can change depends on the packet status.
	TrackingPacketKey string `protobuf:"bytes,2,opt,name=tracking_packet_key,json=trackingPacketKey,proto3" json:"tracking_packet_key,omitempty"`
	// price is the amount that the fulfiller sends to original eibc transfer
	// recipient
	Price github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
	// fee is the effective profit made by the fulfiller because they pay price
	// and receive fee + price
	Fee       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=fee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee"`
	Recipient string                                   `protobuf:"bytes,5,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Deprecated: use DemandOrder.IsFulfilled method instead.
	// Only used for backwards compatibility.
	DeprecatedIsFulfilled bool                      `protobuf:"varint,6,opt,name=deprecated_is_fulfilled,json=deprecatedIsFulfilled,proto3" json:"deprecated_is_fulfilled,omitempty"` // Deprecated: Do not use.
	TrackingPacketStatus  types1.Status             `protobuf:"varint,8,opt,name=tracking_packet_status,json=trackingPacketStatus,proto3,enum=dymensionxyz.dymension.common.Status" json:"tracking_packet_status,omitempty"`
	RollappId             string                    `protobuf:"bytes,9,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	Type                  types1.RollappPacket_Type `protobuf:"varint,10,opt,name=type,proto3,enum=dymensionxyz.dymension.common.RollappPacket_Type" json:"type,omitempty"`
	// fulfiller_address is the bech32-encoded address of the account which
	// fulfilled the order.
	FulfillerAddress string `protobuf:"bytes,11,opt,name=fulfiller_address,json=fulfillerAddress,proto3" json:"fulfiller_address,omitempty"`
	// creation_height is the height of the block on the hub when order was
	// created.
	CreationHeight uint64 `protobuf:"varint,12,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty"`
	// an optional hook which uses the funds when the order is fulfilled
	CompletionHookCall *types2.CompletionHookCall `protobuf:"bytes,13,opt,name=completion_hook_call,json=completionHookCall,proto3" json:"completion_hook_call,omitempty"`
}

func (m *DemandOrder) Reset()         { *m = DemandOrder{} }
func (m *DemandOrder) String() string { return proto.CompactTextString(m) }
func (*DemandOrder) ProtoMessage()    {}
func (*DemandOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc99140861fbacd, []int{0}
}
func (m *DemandOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DemandOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DemandOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DemandOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DemandOrder.Merge(m, src)
}
func (m *DemandOrder) XXX_Size() int {
	return m.Size()
}
func (m *DemandOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_DemandOrder.DiscardUnknown(m)
}

var xxx_messageInfo_DemandOrder proto.InternalMessageInfo

func (m *DemandOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DemandOrder) GetTrackingPacketKey() string {
	if m != nil {
		return m.TrackingPacketKey
	}
	return ""
}

func (m *DemandOrder) GetPrice() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *DemandOrder) GetFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *DemandOrder) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

// Deprecated: Do not use.
func (m *DemandOrder) GetDeprecatedIsFulfilled() bool {
	if m != nil {
		return m.DeprecatedIsFulfilled
	}
	return false
}

func (m *DemandOrder) GetTrackingPacketStatus() types1.Status {
	if m != nil {
		return m.TrackingPacketStatus
	}
	return types1.Status_PENDING
}

func (m *DemandOrder) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *DemandOrder) GetType() types1.RollappPacket_Type {
	if m != nil {
		return m.Type
	}
	return types1.RollappPacket_ON_RECV
}

func (m *DemandOrder) GetFulfillerAddress() string {
	if m != nil {
		return m.FulfillerAddress
	}
	return ""
}

func (m *DemandOrder) GetCreationHeight() uint64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *DemandOrder) GetCompletionHookCall() *types2.CompletionHookCall {
	if m != nil {
		return m.CompletionHookCall
	}
	return nil
}

func init() {
	proto.RegisterType((*DemandOrder)(nil), "dymensionxyz.dymension.eibc.DemandOrder")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/eibc/demand_order.proto", fileDescriptor_2fc99140861fbacd)
}

var fileDescriptor_2fc99140861fbacd = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd4, 0x30,
	0x18, 0xdc, 0x6c, 0x7f, 0xd4, 0x7a, 0xa1, 0x50, 0x53, 0xc0, 0x14, 0x48, 0x57, 0x48, 0x88, 0x08,
	0x84, 0xc3, 0x6e, 0xc5, 0x85, 0x1b, 0x2d, 0xa0, 0x56, 0x3d, 0x80, 0x02, 0x27, 0x10, 0x8a, 0xbc,
	0xf6, 0xb7, 0x5b, 0x6b, 0xb3, 0x71, 0x64, 0xbb, 0x55, 0xc3, 0x53, 0xf0, 0x1c, 0x3c, 0x49, 0x8f,
	0x3d, 0x72, 0x02, 0xd4, 0x9e, 0x78, 0x0b, 0x14, 0x3b, 0x69, 0x4b, 0xd1, 0xc2, 0x85, 0x53, 0x9c,
	0xf1, 0x8c, 0xbf, 0xef, 0x9b, 0x8c, 0x83, 0xa8, 0x28, 0x27, 0x90, 0x1b, 0xa9, 0xf2, 0x83, 0xf2,
	0x53, 0x7c, 0xfa, 0x12, 0x83, 0x1c, 0xf0, 0x58, 0xc0, 0x84, 0xe5, 0x22, 0x55, 0x5a, 0x80, 0xa6,
	0x85, 0x56, 0x56, 0xe1, 0xdb, 0xe7, 0xf9, 0x67, 0x62, 0x5a, 0xf1, 0x57, 0x43, 0xae, 0xcc, 0x44,
	0x99, 0x78, 0xc0, 0x0c, 0xc4, 0xfb, 0xbd, 0x01, 0x58, 0xd6, 0x8b, 0xb9, 0x92, 0xb9, 0x17, 0xaf,
	0xf6, 0xa7, 0x14, 0xe3, 0x6a, 0x32, 0x51, 0x79, 0xac, 0x55, 0x96, 0xb1, 0xa2, 0x48, 0x0b, 0xc6,
	0xc7, 0x60, 0x6b, 0xcd, 0xc3, 0xbf, 0x6b, 0x8c, 0x65, 0x76, 0xcf, 0xd4, 0xdc, 0xa7, 0x53, 0xb8,
	0x56, 0xb3, 0xdc, 0x0c, 0x41, 0x57, 0xa2, 0x22, 0x03, 0x2b, 0x55, 0x9e, 0xee, 0x2a, 0x35, 0xae,
	0x65, 0x2b, 0x23, 0x35, 0x52, 0x6e, 0x19, 0x57, 0x2b, 0x8f, 0xde, 0xfb, 0x39, 0x87, 0x3a, 0x2f,
	0x9c, 0x01, 0xaf, 0xab, 0xf9, 0xf1, 0x12, 0x6a, 0x4b, 0x41, 0x82, 0x6e, 0x10, 0x2d, 0x26, 0x6d,
	0x29, 0x30, 0x45, 0xd7, 0xac, 0x66, 0x7c, 0x2c, 0xf3, 0x51, 0xdd, 0x71, 0x3a, 0x86, 0x92, 0xb4,
	0x1d, 0x61, 0xb9, 0xd9, 0x7a, 0xe3, 0x76, 0x76, 0xa0, 0xc4, 0x0c, 0xcd, 0x15, 0x5a, 0x72, 0x20,
	0x33, 0xdd, 0x99, 0xa8, 0xd3, 0xbf, 0x45, 0xbd, 0x59, 0xb4, 0x32, 0x8b, 0xd6, 0x66, 0xd1, 0x4d,
	0x25, 0xf3, 0x8d, 0x27, 0x87, 0xdf, 0xd6, 0x5a, 0x5f, 0xbe, 0xaf, 0x45, 0x23, 0x69, 0x77, 0xf7,
	0x06, 0x94, 0xab, 0x49, 0x5c, 0x3b, 0xeb, 0x1f, 0x8f, 0x8d, 0x18, 0xc7, 0xb6, 0x2c, 0xc0, 0x38,
	0x81, 0x49, 0xfc, 0xc9, 0xf8, 0x23, 0x9a, 0x19, 0x02, 0x90, 0xd9, 0xff, 0x5f, 0xa0, 0x3a, 0x17,
	0xdf, 0x41, 0x8b, 0x1a, 0xb8, 0x2c, 0x24, 0xe4, 0x96, 0xcc, 0xb9, 0x39, 0xcf, 0x00, 0xfc, 0x0c,
	0xdd, 0x14, 0x50, 0x68, 0xe0, 0xcc, 0x82, 0x48, 0xa5, 0x49, 0x87, 0x7b, 0xd9, 0x50, 0x66, 0x19,
	0x08, 0x32, 0xdf, 0x0d, 0xa2, 0x85, 0x8d, 0x36, 0x09, 0x92, 0xeb, 0x67, 0x94, 0x6d, 0xf3, 0xaa,
	0x21, 0xe0, 0x0f, 0xe8, 0xc6, 0x45, 0x2f, 0xfd, 0x87, 0x25, 0x0b, 0xdd, 0x20, 0x5a, 0xea, 0xdf,
	0xa7, 0x53, 0x62, 0xe7, 0x53, 0x40, 0xdf, 0x3a, 0x72, 0xb2, 0xf2, 0xbb, 0xeb, 0x1e, 0xc5, 0x77,
	0x11, 0x6a, 0x92, 0x25, 0x05, 0x59, 0xac, 0xfb, 0xf6, 0xc8, 0xb6, 0xc0, 0x2f, 0xd1, 0x6c, 0x35,
	0x29, 0x41, 0xae, 0x52, 0xef, 0x1f, 0x95, 0x12, 0xaf, 0xf3, 0x05, 0xe8, 0xbb, 0xb2, 0x80, 0xc4,
	0xc9, 0xf1, 0x23, 0xb4, 0xdc, 0x0c, 0xac, 0x53, 0x26, 0x84, 0x06, 0x63, 0x48, 0xc7, 0x15, 0xbb,
	0x7a, 0xba, 0xf1, 0xdc, 0xe3, 0xf8, 0x01, 0xba, 0xc2, 0x35, 0x30, 0x1f, 0x44, 0x90, 0xa3, 0x5d,
	0x4b, 0x2e, 0x75, 0x83, 0x68, 0x36, 0x59, 0x6a, 0xe0, 0x2d, 0x87, 0x62, 0x40, 0x2b, 0x17, 0x32,
	0x9b, 0x72, 0x96, 0x65, 0xe4, 0x72, 0x37, 0x88, 0x3a, 0xfd, 0xf5, 0x69, 0xcd, 0x36, 0x81, 0xa7,
	0x9b, 0xa7, 0xe2, 0x2d, 0xa5, 0xc6, 0x9b, 0x2c, 0xcb, 0x12, 0xcc, 0xff, 0xc0, 0x36, 0x76, 0x0e,
	0x8f, 0xc3, 0xe0, 0xe8, 0x38, 0x0c, 0x7e, 0x1c, 0x87, 0xc1, 0xe7, 0x93, 0xb0, 0x75, 0x74, 0x12,
	0xb6, 0xbe, 0x9e, 0x84, 0xad, 0xf7, 0xbd, 0x73, 0x11, 0x99, 0x72, 0xbb, 0xf6, 0xd7, 0xe3, 0x03,
	0xff, 0xbf, 0x70, 0x89, 0x19, 0xcc, 0xbb, 0xfb, 0xb3, 0xfe, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xe6,
	0x6c, 0xac, 0x6f, 0x5b, 0x04, 0x00, 0x00,
}

func (m *DemandOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DemandOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DemandOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompletionHookCall != nil {
		{
			size, err := m.CompletionHookCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDemandOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CreationHeight != 0 {
		i = encodeVarintDemandOrder(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x60
	}
	if len(m.FulfillerAddress) > 0 {
		i -= len(m.FulfillerAddress)
		copy(dAtA[i:], m.FulfillerAddress)
		i = encodeVarintDemandOrder(dAtA, i, uint64(len(m.FulfillerAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Type != 0 {
		i = encodeVarintDemandOrder(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintDemandOrder(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TrackingPacketStatus != 0 {
		i = encodeVarintDemandOrder(dAtA, i, uint64(m.TrackingPacketStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.DeprecatedIsFulfilled {
		i--
		if m.DeprecatedIsFulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintDemandOrder(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Fee) > 0 {
		for iNdEx := len(m.Fee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDemandOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDemandOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TrackingPacketKey) > 0 {
		i -= len(m.TrackingPacketKey)
		copy(dAtA[i:], m.TrackingPacketKey)
		i = encodeVarintDemandOrder(dAtA, i, uint64(len(m.TrackingPacketKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDemandOrder(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDemandOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovDemandOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DemandOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDemandOrder(uint64(l))
	}
	l = len(m.TrackingPacketKey)
	if l > 0 {
		n += 1 + l + sovDemandOrder(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovDemandOrder(uint64(l))
		}
	}
	if len(m.Fee) > 0 {
		for _, e := range m.Fee {
			l = e.Size()
			n += 1 + l + sovDemandOrder(uint64(l))
		}
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovDemandOrder(uint64(l))
	}
	if m.DeprecatedIsFulfilled {
		n += 2
	}
	if m.TrackingPacketStatus != 0 {
		n += 1 + sovDemandOrder(uint64(m.TrackingPacketStatus))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovDemandOrder(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovDemandOrder(uint64(m.Type))
	}
	l = len(m.FulfillerAddress)
	if l > 0 {
		n += 1 + l + sovDemandOrder(uint64(l))
	}
	if m.CreationHeight != 0 {
		n += 1 + sovDemandOrder(uint64(m.CreationHeight))
	}
	if m.CompletionHookCall != nil {
		l = m.CompletionHookCall.Size()
		n += 1 + l + sovDemandOrder(uint64(l))
	}
	return n
}

func sovDemandOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDemandOrder(x uint64) (n int) {
	return sovDemandOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DemandOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDemandOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DemandOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DemandOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemandOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemandOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingPacketKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemandOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemandOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackingPacketKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDemandOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDemandOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDemandOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDemandOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = append(m.Fee, types.Coin{})
			if err := m.Fee[len(m.Fee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemandOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemandOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedIsFulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeprecatedIsFulfilled = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingPacketStatus", wireType)
			}
			m.TrackingPacketStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrackingPacketStatus |= types1.Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemandOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemandOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= types1.RollappPacket_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FulfillerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemandOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemandOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FulfillerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionHookCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDemandOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDemandOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletionHookCall == nil {
				m.CompletionHookCall = &types2.CompletionHookCall{}
			}
			if err := m.CompletionHookCall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDemandOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDemandOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDemandOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDemandOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDemandOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDemandOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDemandOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDemandOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDemandOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDemandOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDemandOrder = fmt.Errorf("proto: unexpected end of group")
)
