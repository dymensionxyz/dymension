// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/eibc/authz.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FulfillOrderAuthorization allows the grantee to fulfill eIBC demand orders from the granter's account.
type FulfillOrderAuthorization struct {
	// rollapps is an optional list of rollapp IDs that the grantee can fulfill demand orders from
	Rollapps []string `protobuf:"bytes,1,rep,name=rollapps,proto3" json:"rollapps,omitempty"`
	// denoms is an optional list of denoms that the grantee can fulfill demand orders for
	Denoms []string `protobuf:"bytes,2,rep,name=denoms,proto3" json:"denoms,omitempty"`
	// min_lp_fee_percentage is the minimum fee earning percentage the LP is willing to get from a demand order
	MinLpFeePercentage types.DecProto `protobuf:"bytes,3,opt,name=min_lp_fee_percentage,json=minLpFeePercentage,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecProto" json:"min_lp_fee_percentage"`
	// max_price is the optional maximum order price acceptable to the granter
	MaxPrice github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=max_price,json=maxPrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"max_price"`
	// operator_fee_share is the share of the fee earnings willing to give to the operator
	OperatorFeeShare types.DecProto `protobuf:"bytes,5,opt,name=operator_fee_share,json=operatorFeeShare,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecProto" json:"operator_fee_share"`
	// settlement_validated is the flag to only fulfill demand orders that have been settlement validated
	SettlementValidated bool `protobuf:"varint,6,opt,name=settlement_validated,json=settlementValidated,proto3" json:"settlement_validated,omitempty"`
	// spend_limit is the optional maximum amount of coins that can be spent by the grantee
	SpendLimit github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=spend_limit,json=spendLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"spend_limit"`
}

func (m *FulfillOrderAuthorization) Reset()         { *m = FulfillOrderAuthorization{} }
func (m *FulfillOrderAuthorization) String() string { return proto.CompactTextString(m) }
func (*FulfillOrderAuthorization) ProtoMessage()    {}
func (*FulfillOrderAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67acbbd9757b985, []int{0}
}
func (m *FulfillOrderAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FulfillOrderAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FulfillOrderAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FulfillOrderAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FulfillOrderAuthorization.Merge(m, src)
}
func (m *FulfillOrderAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *FulfillOrderAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_FulfillOrderAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_FulfillOrderAuthorization proto.InternalMessageInfo

func (m *FulfillOrderAuthorization) GetRollapps() []string {
	if m != nil {
		return m.Rollapps
	}
	return nil
}

func (m *FulfillOrderAuthorization) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

func (m *FulfillOrderAuthorization) GetMinLpFeePercentage() types.DecProto {
	if m != nil {
		return m.MinLpFeePercentage
	}
	return types.DecProto{}
}

func (m *FulfillOrderAuthorization) GetMaxPrice() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MaxPrice
	}
	return nil
}

func (m *FulfillOrderAuthorization) GetOperatorFeeShare() types.DecProto {
	if m != nil {
		return m.OperatorFeeShare
	}
	return types.DecProto{}
}

func (m *FulfillOrderAuthorization) GetSettlementValidated() bool {
	if m != nil {
		return m.SettlementValidated
	}
	return false
}

func (m *FulfillOrderAuthorization) GetSpendLimit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.SpendLimit
	}
	return nil
}

func init() {
	proto.RegisterType((*FulfillOrderAuthorization)(nil), "dymensionxyz.dymension.eibc.FulfillOrderAuthorization")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/eibc/authz.proto", fileDescriptor_b67acbbd9757b985)
}

var fileDescriptor_b67acbbd9757b985 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x3d, 0x8f, 0x12, 0x41,
	0x18, 0x66, 0xc5, 0x43, 0x6e, 0x68, 0xcc, 0x78, 0xea, 0x82, 0x71, 0x8f, 0x5c, 0xa1, 0x24, 0xe6,
	0x76, 0xe4, 0xe8, 0xec, 0x44, 0x43, 0xe3, 0x25, 0x12, 0x4c, 0x2c, 0x6c, 0x36, 0xc3, 0xee, 0x7b,
	0x30, 0x71, 0xbe, 0x32, 0x33, 0x10, 0xa0, 0xb2, 0xb1, 0x34, 0xf1, 0x77, 0x58, 0xfb, 0x23, 0x2e,
	0x56, 0x57, 0x5a, 0xa9, 0x81, 0x3f, 0x62, 0x76, 0x77, 0xc0, 0x33, 0xd1, 0xc4, 0xc2, 0xab, 0x66,
	0x9f, 0x3c, 0xf3, 0x7c, 0xbc, 0x9b, 0x79, 0xd1, 0xc3, 0x6c, 0x29, 0x40, 0x5a, 0xa6, 0xe4, 0x62,
	0xb9, 0x22, 0x3b, 0x40, 0x80, 0x8d, 0x53, 0x42, 0x67, 0x6e, 0xba, 0x8a, 0xb5, 0x51, 0x4e, 0xe1,
	0x7b, 0x97, 0x2f, 0xc6, 0x3b, 0x10, 0xe7, 0x17, 0x5b, 0x07, 0x13, 0x35, 0x51, 0xc5, 0x3d, 0x92,
	0x7f, 0x95, 0x92, 0xd6, 0xdd, 0x54, 0x59, 0xa1, 0x2c, 0x11, 0x76, 0x42, 0xe6, 0xdd, 0xfc, 0xf0,
	0x44, 0xb3, 0x24, 0x92, 0x52, 0x51, 0x02, 0x4f, 0x45, 0x5e, 0x33, 0xa6, 0x16, 0xc8, 0xbc, 0x3b,
	0x06, 0x47, 0xbb, 0x24, 0x55, 0x4c, 0x96, 0xfc, 0xd1, 0x87, 0x3d, 0xd4, 0x1c, 0xcc, 0xf8, 0x19,
	0xe3, 0xfc, 0xa5, 0xc9, 0xc0, 0x3c, 0x9d, 0xb9, 0xa9, 0x32, 0x6c, 0x45, 0x1d, 0x53, 0x12, 0xb7,
	0x50, 0xdd, 0x28, 0xce, 0xa9, 0xd6, 0x36, 0x0c, 0xda, 0xd5, 0xce, 0xfe, 0x68, 0x87, 0xf1, 0x1d,
	0x54, 0xcb, 0x40, 0x2a, 0x61, 0xc3, 0x6b, 0x05, 0xe3, 0x11, 0x7e, 0x1f, 0xa0, 0xdb, 0x82, 0xc9,
	0x84, 0xeb, 0xe4, 0x0c, 0x20, 0xd1, 0x60, 0x52, 0x90, 0x8e, 0x4e, 0x20, 0xac, 0xb6, 0x83, 0x4e,
	0xe3, 0xe4, 0x7e, 0xec, 0x0b, 0xe6, 0x95, 0x62, 0x5f, 0x29, 0x7e, 0x0e, 0xe9, 0x30, 0x2f, 0xd4,
	0xef, 0x9d, 0x7f, 0x3b, 0xac, 0x7c, 0xfa, 0x7e, 0xf8, 0x68, 0xc2, 0xdc, 0x74, 0x36, 0x8e, 0x53,
	0x25, 0xfc, 0x44, 0xfe, 0x38, 0xb6, 0xd9, 0x5b, 0xe2, 0x96, 0x1a, 0xec, 0x4e, 0x34, 0xc2, 0x82,
	0xc9, 0x53, 0x3d, 0x00, 0x18, 0xee, 0xd2, 0xf0, 0x14, 0xed, 0x0b, 0xba, 0x48, 0xb4, 0x61, 0x29,
	0x84, 0xd7, 0xdb, 0xd5, 0x4e, 0xe3, 0xa4, 0xf9, 0xc7, 0xe8, 0x67, 0x8a, 0xc9, 0xfe, 0x63, 0x1f,
	0xdb, 0xf9, 0x87, 0xd8, 0x5c, 0x60, 0x47, 0x75, 0x41, 0x17, 0xc3, 0xdc, 0x1c, 0xbf, 0x0b, 0x10,
	0x56, 0x1a, 0x0c, 0x75, 0xca, 0x14, 0x33, 0xdb, 0x29, 0x35, 0x10, 0xee, 0x5d, 0xd9, 0xb8, 0x37,
	0xb7, 0x69, 0x03, 0x80, 0x57, 0x79, 0x16, 0xee, 0xa2, 0x03, 0x0b, 0xce, 0x71, 0x10, 0x20, 0x5d,
	0x32, 0xa7, 0x9c, 0x65, 0xd4, 0x41, 0x16, 0xd6, 0xda, 0x41, 0xa7, 0x3e, 0xba, 0xf5, 0x8b, 0x7b,
	0xbd, 0xa5, 0x30, 0x47, 0x0d, 0xab, 0x41, 0x66, 0x09, 0x67, 0x82, 0xb9, 0xf0, 0xc6, 0xff, 0xff,
	0x43, 0xa8, 0xf0, 0x3f, 0xcd, 0xed, 0x9f, 0x3c, 0xf8, 0xf2, 0xf9, 0xf8, 0xc8, 0x7b, 0x97, 0x6b,
	0xb0, 0x35, 0xff, 0xed, 0xc5, 0xf5, 0x5f, 0x9c, 0xaf, 0xa3, 0xe0, 0x62, 0x1d, 0x05, 0x3f, 0xd6,
	0x51, 0xf0, 0x71, 0x13, 0x55, 0x2e, 0x36, 0x51, 0xe5, 0xeb, 0x26, 0xaa, 0xbc, 0xe9, 0x5e, 0xca,
	0xfd, 0xcb, 0x92, 0xcd, 0x7b, 0x64, 0x51, 0x6e, 0x5a, 0x51, 0x63, 0x5c, 0x2b, 0xde, 0x78, 0xef,
	0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0x55, 0xd3, 0x96, 0x95, 0x03, 0x00, 0x00,
}

func (m *FulfillOrderAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FulfillOrderAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FulfillOrderAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpendLimit) > 0 {
		for iNdEx := len(m.SpendLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpendLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.SettlementValidated {
		i--
		if m.SettlementValidated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.OperatorFeeShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuthz(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.MaxPrice) > 0 {
		for iNdEx := len(m.MaxPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.MinLpFeePercentage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuthz(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Rollapps) > 0 {
		for iNdEx := len(m.Rollapps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Rollapps[iNdEx])
			copy(dAtA[i:], m.Rollapps[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.Rollapps[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthz(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FulfillOrderAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rollapps) > 0 {
		for _, s := range m.Rollapps {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	l = m.MinLpFeePercentage.Size()
	n += 1 + l + sovAuthz(uint64(l))
	if len(m.MaxPrice) > 0 {
		for _, e := range m.MaxPrice {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	l = m.OperatorFeeShare.Size()
	n += 1 + l + sovAuthz(uint64(l))
	if m.SettlementValidated {
		n += 2
	}
	if len(m.SpendLimit) > 0 {
		for _, e := range m.SpendLimit {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func sovAuthz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthz(x uint64) (n int) {
	return sovAuthz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FulfillOrderAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FulfillOrderAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FulfillOrderAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollapps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rollapps = append(m.Rollapps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLpFeePercentage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinLpFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPrice = append(m.MaxPrice, types.Coin{})
			if err := m.MaxPrice[len(m.MaxPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorFeeShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorFeeShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementValidated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementValidated = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpendLimit = append(m.SpendLimit, types.Coin{})
			if err := m.SpendLimit[len(m.SpendLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthz = fmt.Errorf("proto: unexpected end of group")
)
