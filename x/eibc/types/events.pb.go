// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/eibc/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/dymensionxyz/dymension/v3/x/common/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventDemandOrderCreated is emitted when the demand order is created.
type EventDemandOrderCreated struct {
	// order_id is the unique identifier of the demand order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// price is the price of the demand order.
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// fee is the fee of the demand order.
	Fee string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// Deprecated: orders cannot be created and fulfilled at the same time
	// is_fulfilled is the flag indicating whether the order is fulfilled.
	IsFulfilled bool `protobuf:"varint,4,opt,name=is_fulfilled,json=isFulfilled,proto3" json:"is_fulfilled,omitempty"` // Deprecated: Do not use.
	// packet_status is the status of the packet.
	PacketStatus string `protobuf:"bytes,5,opt,name=packet_status,json=packetStatus,proto3" json:"packet_status,omitempty"`
	// packet_key is the base64 encoded key of the packet.
	PacketKey string `protobuf:"bytes,6,opt,name=packet_key,json=packetKey,proto3" json:"packet_key,omitempty"`
	// rollapp_id is the id of the rollapp.
	RollappId string `protobuf:"bytes,7,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// recipient is the address of the recipient.
	Recipient string `protobuf:"bytes,8,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// packet_type is the type of the packet.
	PacketType string `protobuf:"bytes,9,opt,name=packet_type,json=packetType,proto3" json:"packet_type,omitempty"`
	// proof_height is the height of the block when order was created.
	ProofHeight uint64 `protobuf:"varint,10,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height,omitempty"`
}

func (m *EventDemandOrderCreated) Reset()         { *m = EventDemandOrderCreated{} }
func (m *EventDemandOrderCreated) String() string { return proto.CompactTextString(m) }
func (*EventDemandOrderCreated) ProtoMessage()    {}
func (*EventDemandOrderCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_87abe4479c806cf7, []int{0}
}
func (m *EventDemandOrderCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDemandOrderCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDemandOrderCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDemandOrderCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDemandOrderCreated.Merge(m, src)
}
func (m *EventDemandOrderCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventDemandOrderCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDemandOrderCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventDemandOrderCreated proto.InternalMessageInfo

func (m *EventDemandOrderCreated) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *EventDemandOrderCreated) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *EventDemandOrderCreated) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

// Deprecated: Do not use.
func (m *EventDemandOrderCreated) GetIsFulfilled() bool {
	if m != nil {
		return m.IsFulfilled
	}
	return false
}

func (m *EventDemandOrderCreated) GetPacketStatus() string {
	if m != nil {
		return m.PacketStatus
	}
	return ""
}

func (m *EventDemandOrderCreated) GetPacketKey() string {
	if m != nil {
		return m.PacketKey
	}
	return ""
}

func (m *EventDemandOrderCreated) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *EventDemandOrderCreated) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *EventDemandOrderCreated) GetPacketType() string {
	if m != nil {
		return m.PacketType
	}
	return ""
}

func (m *EventDemandOrderCreated) GetProofHeight() uint64 {
	if m != nil {
		return m.ProofHeight
	}
	return 0
}

// EventDemandOrderPacketStatusUpdate is emitted when the status of the related packet is updated.
type EventDemandOrderPacketStatusUpdated struct {
	// order_id is the unique identifier of the demand order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// new_packet_status is the status of the packet after the update.
	NewPacketStatus types.Status `protobuf:"varint,2,opt,name=new_packet_status,json=newPacketStatus,proto3,enum=dymensionxyz.dymension.common.Status" json:"new_packet_status,omitempty"`
	// is_fulfilled is the flag indicating whether the order is fulfilled.
	IsFulfilled bool `protobuf:"varint,3,opt,name=is_fulfilled,json=isFulfilled,proto3" json:"is_fulfilled,omitempty"`
}

func (m *EventDemandOrderPacketStatusUpdated) Reset()         { *m = EventDemandOrderPacketStatusUpdated{} }
func (m *EventDemandOrderPacketStatusUpdated) String() string { return proto.CompactTextString(m) }
func (*EventDemandOrderPacketStatusUpdated) ProtoMessage()    {}
func (*EventDemandOrderPacketStatusUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_87abe4479c806cf7, []int{1}
}
func (m *EventDemandOrderPacketStatusUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDemandOrderPacketStatusUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDemandOrderPacketStatusUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDemandOrderPacketStatusUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDemandOrderPacketStatusUpdated.Merge(m, src)
}
func (m *EventDemandOrderPacketStatusUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventDemandOrderPacketStatusUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDemandOrderPacketStatusUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventDemandOrderPacketStatusUpdated proto.InternalMessageInfo

func (m *EventDemandOrderPacketStatusUpdated) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *EventDemandOrderPacketStatusUpdated) GetNewPacketStatus() types.Status {
	if m != nil {
		return m.NewPacketStatus
	}
	return types.Status_PENDING
}

func (m *EventDemandOrderPacketStatusUpdated) GetIsFulfilled() bool {
	if m != nil {
		return m.IsFulfilled
	}
	return false
}

// EventDemandOrderFeeUpdate is emitted when the fee of the demand order is updated.
type EventDemandOrderFeeUpdated struct {
	// order_id is the unique identifier of the demand order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// new_fee is the new fee amount set in the order.
	NewFee string `protobuf:"bytes,2,opt,name=new_fee,json=newFee,proto3" json:"new_fee,omitempty"`
	// price is the price of the demand order.
	Price string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	// packet_status is the status of the packet.
	PacketStatus string `protobuf:"bytes,4,opt,name=packet_status,json=packetStatus,proto3" json:"packet_status,omitempty"`
	// rollapp_id is the id of the rollapp.
	RollappId string `protobuf:"bytes,5,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// proof_height is the height of the block when order was created.
	ProofHeight uint64 `protobuf:"varint,6,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height,omitempty"`
}

func (m *EventDemandOrderFeeUpdated) Reset()         { *m = EventDemandOrderFeeUpdated{} }
func (m *EventDemandOrderFeeUpdated) String() string { return proto.CompactTextString(m) }
func (*EventDemandOrderFeeUpdated) ProtoMessage()    {}
func (*EventDemandOrderFeeUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_87abe4479c806cf7, []int{2}
}
func (m *EventDemandOrderFeeUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDemandOrderFeeUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDemandOrderFeeUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDemandOrderFeeUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDemandOrderFeeUpdated.Merge(m, src)
}
func (m *EventDemandOrderFeeUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventDemandOrderFeeUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDemandOrderFeeUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventDemandOrderFeeUpdated proto.InternalMessageInfo

func (m *EventDemandOrderFeeUpdated) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *EventDemandOrderFeeUpdated) GetNewFee() string {
	if m != nil {
		return m.NewFee
	}
	return ""
}

func (m *EventDemandOrderFeeUpdated) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *EventDemandOrderFeeUpdated) GetPacketStatus() string {
	if m != nil {
		return m.PacketStatus
	}
	return ""
}

func (m *EventDemandOrderFeeUpdated) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *EventDemandOrderFeeUpdated) GetProofHeight() uint64 {
	if m != nil {
		return m.ProofHeight
	}
	return 0
}

// EventDemandOrderFulfilled is emitted when the demand order is fulfilled.
type EventDemandOrderFulfilled struct {
	// order_id is the unique identifier of the demand order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// fulfillment_id is the unique identifier of the fulfillment.
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// fulfillment_amount is the amount of the fulfillment.
	Fee string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// is_fulfilled is the flag indicating whether the order is fulfilled.
	IsFulfilled bool `protobuf:"varint,4,opt,name=is_fulfilled,json=isFulfilled,proto3" json:"is_fulfilled,omitempty"`
	// packet_status is the status of the packet.
	PacketStatus string `protobuf:"bytes,5,opt,name=packet_status,json=packetStatus,proto3" json:"packet_status,omitempty"`
	// fulfiller is the address of the fulfiller.
	Fulfiller string `protobuf:"bytes,9,opt,name=fulfiller,proto3" json:"fulfiller,omitempty"`
	// packet_type is the type of the packet.
	PacketType string `protobuf:"bytes,10,opt,name=packet_type,json=packetType,proto3" json:"packet_type,omitempty"`
}

func (m *EventDemandOrderFulfilled) Reset()         { *m = EventDemandOrderFulfilled{} }
func (m *EventDemandOrderFulfilled) String() string { return proto.CompactTextString(m) }
func (*EventDemandOrderFulfilled) ProtoMessage()    {}
func (*EventDemandOrderFulfilled) Descriptor() ([]byte, []int) {
	return fileDescriptor_87abe4479c806cf7, []int{3}
}
func (m *EventDemandOrderFulfilled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDemandOrderFulfilled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDemandOrderFulfilled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDemandOrderFulfilled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDemandOrderFulfilled.Merge(m, src)
}
func (m *EventDemandOrderFulfilled) XXX_Size() int {
	return m.Size()
}
func (m *EventDemandOrderFulfilled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDemandOrderFulfilled.DiscardUnknown(m)
}

var xxx_messageInfo_EventDemandOrderFulfilled proto.InternalMessageInfo

func (m *EventDemandOrderFulfilled) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *EventDemandOrderFulfilled) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *EventDemandOrderFulfilled) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *EventDemandOrderFulfilled) GetIsFulfilled() bool {
	if m != nil {
		return m.IsFulfilled
	}
	return false
}

func (m *EventDemandOrderFulfilled) GetPacketStatus() string {
	if m != nil {
		return m.PacketStatus
	}
	return ""
}

func (m *EventDemandOrderFulfilled) GetFulfiller() string {
	if m != nil {
		return m.Fulfiller
	}
	return ""
}

func (m *EventDemandOrderFulfilled) GetPacketType() string {
	if m != nil {
		return m.PacketType
	}
	return ""
}

// EventDemandOrderFulfilledAuthorized is emitted when the demand order is fulfilled from an authorization.
type EventDemandOrderFulfilledAuthorized struct {
	// order_id is the unique identifier of the demand order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// fulfillment_id is the unique identifier of the fulfillment.
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// fulfillment_amount is the amount of the fulfillment.
	Fee string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// is_fulfilled is the flag indicating whether the order is fulfilled.
	IsFulfilled bool `protobuf:"varint,4,opt,name=is_fulfilled,json=isFulfilled,proto3" json:"is_fulfilled,omitempty"`
	// packet_status is the status of the packet.
	PacketStatus string `protobuf:"bytes,5,opt,name=packet_status,json=packetStatus,proto3" json:"packet_status,omitempty"`
	// fulfiller is the address of the fulfiller.
	Fulfiller string `protobuf:"bytes,9,opt,name=fulfiller,proto3" json:"fulfiller,omitempty"`
	// packet_type is the type of the packet.
	PacketType string `protobuf:"bytes,10,opt,name=packet_type,json=packetType,proto3" json:"packet_type,omitempty"`
	// creation_height is the height of the block when order was created.
	CreationHeight uint64 `protobuf:"varint,11,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty"`
	// lp_address is the address of the LP.
	LpAddress string `protobuf:"bytes,12,opt,name=lp_address,json=lpAddress,proto3" json:"lp_address,omitempty"`
}

func (m *EventDemandOrderFulfilledAuthorized) Reset()         { *m = EventDemandOrderFulfilledAuthorized{} }
func (m *EventDemandOrderFulfilledAuthorized) String() string { return proto.CompactTextString(m) }
func (*EventDemandOrderFulfilledAuthorized) ProtoMessage()    {}
func (*EventDemandOrderFulfilledAuthorized) Descriptor() ([]byte, []int) {
	return fileDescriptor_87abe4479c806cf7, []int{4}
}
func (m *EventDemandOrderFulfilledAuthorized) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDemandOrderFulfilledAuthorized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDemandOrderFulfilledAuthorized.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDemandOrderFulfilledAuthorized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDemandOrderFulfilledAuthorized.Merge(m, src)
}
func (m *EventDemandOrderFulfilledAuthorized) XXX_Size() int {
	return m.Size()
}
func (m *EventDemandOrderFulfilledAuthorized) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDemandOrderFulfilledAuthorized.DiscardUnknown(m)
}

var xxx_messageInfo_EventDemandOrderFulfilledAuthorized proto.InternalMessageInfo

func (m *EventDemandOrderFulfilledAuthorized) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *EventDemandOrderFulfilledAuthorized) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *EventDemandOrderFulfilledAuthorized) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *EventDemandOrderFulfilledAuthorized) GetIsFulfilled() bool {
	if m != nil {
		return m.IsFulfilled
	}
	return false
}

func (m *EventDemandOrderFulfilledAuthorized) GetPacketStatus() string {
	if m != nil {
		return m.PacketStatus
	}
	return ""
}

func (m *EventDemandOrderFulfilledAuthorized) GetFulfiller() string {
	if m != nil {
		return m.Fulfiller
	}
	return ""
}

func (m *EventDemandOrderFulfilledAuthorized) GetPacketType() string {
	if m != nil {
		return m.PacketType
	}
	return ""
}

func (m *EventDemandOrderFulfilledAuthorized) GetCreationHeight() uint64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *EventDemandOrderFulfilledAuthorized) GetLpAddress() string {
	if m != nil {
		return m.LpAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*EventDemandOrderCreated)(nil), "dymensionxyz.dymension.eibc.EventDemandOrderCreated")
	proto.RegisterType((*EventDemandOrderPacketStatusUpdated)(nil), "dymensionxyz.dymension.eibc.EventDemandOrderPacketStatusUpdated")
	proto.RegisterType((*EventDemandOrderFeeUpdated)(nil), "dymensionxyz.dymension.eibc.EventDemandOrderFeeUpdated")
	proto.RegisterType((*EventDemandOrderFulfilled)(nil), "dymensionxyz.dymension.eibc.EventDemandOrderFulfilled")
	proto.RegisterType((*EventDemandOrderFulfilledAuthorized)(nil), "dymensionxyz.dymension.eibc.EventDemandOrderFulfilledAuthorized")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/eibc/events.proto", fileDescriptor_87abe4479c806cf7)
}

var fileDescriptor_87abe4479c806cf7 = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0xf3, 0x9f, 0x4d, 0x68, 0xc1, 0xaa, 0x54, 0x37, 0x14, 0x93, 0xa6, 0xaa, 0x88, 0x38,
	0xd8, 0x82, 0x3e, 0x41, 0x0b, 0x44, 0x54, 0x3d, 0x00, 0x01, 0x2e, 0x5c, 0x2c, 0xc7, 0x3b, 0x49,
	0x56, 0x75, 0xbc, 0x2b, 0x7b, 0xd3, 0xd4, 0x7d, 0x0a, 0x9e, 0x06, 0x5e, 0xa1, 0x17, 0xa4, 0x1e,
	0x39, 0xa2, 0x44, 0xbc, 0x07, 0xda, 0x5d, 0x27, 0x4d, 0x9c, 0x06, 0x10, 0xe2, 0xd4, 0x9b, 0xf7,
	0x9b, 0xc9, 0xcc, 0x37, 0xf3, 0x7d, 0x19, 0xd4, 0xc2, 0xf1, 0x10, 0x82, 0x88, 0xd0, 0xe0, 0x22,
	0xbe, 0xb4, 0xe7, 0x0f, 0x1b, 0x48, 0xd7, 0xb3, 0xe1, 0x1c, 0x02, 0x1e, 0x59, 0x2c, 0xa4, 0x9c,
	0xea, 0x0f, 0x17, 0x33, 0xad, 0xf9, 0xc3, 0x12, 0x99, 0xf5, 0xad, 0x3e, 0xed, 0x53, 0x99, 0x67,
	0x8b, 0x2f, 0xf5, 0x93, 0xfa, 0xd3, 0x35, 0xc5, 0x3d, 0x3a, 0x1c, 0xd2, 0xc0, 0x8e, 0xb8, 0xcb,
	0x47, 0x49, 0xf9, 0xba, 0xf5, 0x3b, 0x22, 0x18, 0x86, 0x6e, 0x80, 0x1d, 0x1a, 0x62, 0x08, 0x55,
	0x7e, 0xf3, 0x2a, 0x8b, 0xb6, 0x5f, 0x09, 0x7e, 0x2f, 0x65, 0xec, 0x8d, 0x08, 0xbd, 0x08, 0xc1,
	0xe5, 0x80, 0xf5, 0x1d, 0x54, 0x96, 0xa9, 0x0e, 0xc1, 0x86, 0xd6, 0xd0, 0x5a, 0x95, 0x4e, 0x49,
	0xbe, 0x4f, 0xb0, 0xbe, 0x85, 0x0a, 0x2c, 0x24, 0x1e, 0x18, 0x59, 0x89, 0xab, 0x87, 0x7e, 0x1f,
	0xe5, 0x7a, 0x00, 0x46, 0x4e, 0x62, 0xe2, 0x53, 0x3f, 0x40, 0x35, 0x12, 0x39, 0xbd, 0x91, 0xdf,
	0x23, 0xbe, 0x0f, 0xd8, 0xc8, 0x37, 0xb4, 0x56, 0xf9, 0x38, 0x6b, 0x68, 0x9d, 0x2a, 0x89, 0xda,
	0x33, 0x58, 0xdf, 0x47, 0xf7, 0x98, 0xeb, 0x9d, 0x01, 0x77, 0xd4, 0x30, 0x46, 0x41, 0x96, 0xa8,
	0x29, 0xf0, 0xbd, 0xc4, 0xf4, 0x47, 0x08, 0x25, 0x49, 0x67, 0x10, 0x1b, 0x45, 0x99, 0x51, 0x51,
	0xc8, 0x29, 0xc4, 0x22, 0x1c, 0x52, 0xdf, 0x77, 0x19, 0x13, 0x7c, 0x4b, 0x2a, 0x9c, 0x20, 0x27,
	0x58, 0xdf, 0x45, 0x95, 0x10, 0x3c, 0xc2, 0x08, 0x04, 0xdc, 0x28, 0x27, 0xd1, 0x19, 0xa0, 0x3f,
	0x46, 0xd5, 0xa4, 0x36, 0x8f, 0x19, 0x18, 0x15, 0x19, 0x4f, 0xda, 0x7d, 0x88, 0x19, 0xe8, 0x7b,
	0xa8, 0xc6, 0x42, 0x4a, 0x7b, 0xce, 0x00, 0x48, 0x7f, 0xc0, 0x0d, 0xd4, 0xd0, 0x5a, 0xf9, 0x4e,
	0x55, 0x62, 0xaf, 0x25, 0xd4, 0xfc, 0xa2, 0xa1, 0xfd, 0xf4, 0x2a, 0xdf, 0x2e, 0x0c, 0xf0, 0x91,
	0xe1, 0x3f, 0xad, 0xf5, 0x1d, 0x7a, 0x10, 0xc0, 0xd8, 0x59, 0xde, 0x85, 0x58, 0xf1, 0xc6, 0xf3,
	0x03, 0x6b, 0x8d, 0x71, 0x94, 0x0b, 0x2c, 0xd5, 0xa3, 0xb3, 0x19, 0xc0, 0x78, 0xb1, 0xa9, 0x20,
	0xbe, 0xa4, 0x80, 0x10, 0xa7, 0xbc, 0xb4, 0xfd, 0xe6, 0x37, 0x0d, 0xd5, 0xd3, 0xc4, 0xdb, 0x00,
	0x7f, 0xc1, 0x77, 0x1b, 0x95, 0x04, 0x5f, 0x21, 0xba, 0x32, 0x42, 0x31, 0x80, 0x71, 0x1b, 0xe0,
	0xc6, 0x1f, 0xb9, 0x45, 0x7f, 0xac, 0xc8, 0x9c, 0xbf, 0x5d, 0xe6, 0x05, 0x1d, 0x0b, 0x69, 0x1d,
	0xd3, 0x42, 0x14, 0x57, 0x85, 0xf8, 0xa9, 0xa1, 0x9d, 0x95, 0x79, 0xe6, 0x5e, 0xfb, 0x0f, 0xae,
	0xde, 0xbb, 0xcd, 0xd5, 0xff, 0xe0, 0xe8, 0x5d, 0x54, 0x99, 0x15, 0x09, 0x13, 0xcf, 0xdd, 0x00,
	0x69, 0x4f, 0xa2, 0xb4, 0x27, 0x9b, 0x5f, 0xb3, 0xab, 0x86, 0x9b, 0x33, 0x38, 0x1a, 0xf1, 0x01,
	0x0d, 0xc9, 0xe5, 0x5d, 0x9a, 0x58, 0x7f, 0x82, 0x36, 0x3d, 0x71, 0x9c, 0x08, 0x0d, 0x66, 0xfa,
	0x57, 0xa5, 0xfe, 0x1b, 0x33, 0x58, 0x59, 0x40, 0x98, 0xc8, 0x67, 0x8e, 0x8b, 0x71, 0x08, 0x51,
	0x64, 0xd4, 0x54, 0x23, 0x9f, 0x1d, 0x29, 0xe0, 0xf8, 0xf4, 0x6a, 0x62, 0x6a, 0xd7, 0x13, 0x53,
	0xfb, 0x31, 0x31, 0xb5, 0xcf, 0x53, 0x33, 0x73, 0x3d, 0x35, 0x33, 0xdf, 0xa7, 0x66, 0xe6, 0xd3,
	0xb3, 0x3e, 0xe1, 0x83, 0x51, 0x57, 0xfc, 0xab, 0xec, 0x35, 0xa7, 0xf4, 0xfc, 0xd0, 0xbe, 0x50,
	0xf7, 0x54, 0xb0, 0x8c, 0xba, 0x45, 0x79, 0x49, 0x0f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x61,
	0xc7, 0xe1, 0x79, 0x04, 0x06, 0x00, 0x00,
}

func (m *EventDemandOrderCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDemandOrderCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDemandOrderCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProofHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ProofHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.PacketType) > 0 {
		i -= len(m.PacketType)
		copy(dAtA[i:], m.PacketType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PacketType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PacketKey) > 0 {
		i -= len(m.PacketKey)
		copy(dAtA[i:], m.PacketKey)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PacketKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PacketStatus) > 0 {
		i -= len(m.PacketStatus)
		copy(dAtA[i:], m.PacketStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PacketStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsFulfilled {
		i--
		if m.IsFulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDemandOrderPacketStatusUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDemandOrderPacketStatusUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDemandOrderPacketStatusUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsFulfilled {
		i--
		if m.IsFulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NewPacketStatus != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewPacketStatus))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDemandOrderFeeUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDemandOrderFeeUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDemandOrderFeeUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProofHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ProofHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PacketStatus) > 0 {
		i -= len(m.PacketStatus)
		copy(dAtA[i:], m.PacketStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PacketStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewFee) > 0 {
		i -= len(m.NewFee)
		copy(dAtA[i:], m.NewFee)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewFee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDemandOrderFulfilled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDemandOrderFulfilled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDemandOrderFulfilled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PacketType) > 0 {
		i -= len(m.PacketType)
		copy(dAtA[i:], m.PacketType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PacketType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Fulfiller) > 0 {
		i -= len(m.Fulfiller)
		copy(dAtA[i:], m.Fulfiller)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Fulfiller)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PacketStatus) > 0 {
		i -= len(m.PacketStatus)
		copy(dAtA[i:], m.PacketStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PacketStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsFulfilled {
		i--
		if m.IsFulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDemandOrderFulfilledAuthorized) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDemandOrderFulfilledAuthorized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDemandOrderFulfilledAuthorized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LpAddress) > 0 {
		i -= len(m.LpAddress)
		copy(dAtA[i:], m.LpAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LpAddress)))
		i--
		dAtA[i] = 0x62
	}
	if m.CreationHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x58
	}
	if len(m.PacketType) > 0 {
		i -= len(m.PacketType)
		copy(dAtA[i:], m.PacketType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PacketType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Fulfiller) > 0 {
		i -= len(m.Fulfiller)
		copy(dAtA[i:], m.Fulfiller)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Fulfiller)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PacketStatus) > 0 {
		i -= len(m.PacketStatus)
		copy(dAtA[i:], m.PacketStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PacketStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsFulfilled {
		i--
		if m.IsFulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventDemandOrderCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IsFulfilled {
		n += 2
	}
	l = len(m.PacketStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PacketKey)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PacketType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ProofHeight != 0 {
		n += 1 + sovEvents(uint64(m.ProofHeight))
	}
	return n
}

func (m *EventDemandOrderPacketStatusUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.NewPacketStatus != 0 {
		n += 1 + sovEvents(uint64(m.NewPacketStatus))
	}
	if m.IsFulfilled {
		n += 2
	}
	return n
}

func (m *EventDemandOrderFeeUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewFee)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PacketStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ProofHeight != 0 {
		n += 1 + sovEvents(uint64(m.ProofHeight))
	}
	return n
}

func (m *EventDemandOrderFulfilled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IsFulfilled {
		n += 2
	}
	l = len(m.PacketStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Fulfiller)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PacketType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDemandOrderFulfilledAuthorized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IsFulfilled {
		n += 2
	}
	l = len(m.PacketStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Fulfiller)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PacketType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CreationHeight != 0 {
		n += 1 + sovEvents(uint64(m.CreationHeight))
	}
	l = len(m.LpAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventDemandOrderCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDemandOrderCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDemandOrderCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFulfilled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			m.ProofHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDemandOrderPacketStatusUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDemandOrderPacketStatusUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDemandOrderPacketStatusUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPacketStatus", wireType)
			}
			m.NewPacketStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewPacketStatus |= types.Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFulfilled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDemandOrderFeeUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDemandOrderFeeUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDemandOrderFeeUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			m.ProofHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDemandOrderFulfilled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDemandOrderFulfilled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDemandOrderFulfilled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFulfilled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fulfiller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fulfiller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDemandOrderFulfilledAuthorized) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDemandOrderFulfilledAuthorized: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDemandOrderFulfilledAuthorized: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFulfilled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fulfiller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fulfiller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
