// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/eibc/fulfill_hook.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// if given in eibc metadata, eibc fullfillment funds will be directed to a module address
// and a hook will be executed
type FulfillHook struct {
	// name of hook
	HookName string `protobuf:"bytes,1,opt,name=hook_name,json=hookName,proto3" json:"hook_name,omitempty"`
	// opaque data to be interpreted by the hook
	HookData []byte `protobuf:"bytes,2,opt,name=hook_data,json=hookData,proto3" json:"hook_data,omitempty"`
}

func (m *FulfillHook) Reset()         { *m = FulfillHook{} }
func (m *FulfillHook) String() string { return proto.CompactTextString(m) }
func (*FulfillHook) ProtoMessage()    {}
func (*FulfillHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3cde8909fd511c, []int{0}
}
func (m *FulfillHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FulfillHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FulfillHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FulfillHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FulfillHook.Merge(m, src)
}
func (m *FulfillHook) XXX_Size() int {
	return m.Size()
}
func (m *FulfillHook) XXX_DiscardUnknown() {
	xxx_messageInfo_FulfillHook.DiscardUnknown(m)
}

var xxx_messageInfo_FulfillHook proto.InternalMessageInfo

func (m *FulfillHook) GetHookName() string {
	if m != nil {
		return m.HookName
	}
	return ""
}

func (m *FulfillHook) GetHookData() []byte {
	if m != nil {
		return m.HookData
	}
	return nil
}

func init() {
	proto.RegisterType((*FulfillHook)(nil), "dymensionxyz.dymension.eibc.FulfillHook")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/eibc/fulfill_hook.proto", fileDescriptor_ea3cde8909fd511c)
}

var fileDescriptor_ea3cde8909fd511c = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4b, 0xa9, 0xcc, 0x4d,
	0xcd, 0x2b, 0xce, 0xcc, 0xcf, 0xab, 0xa8, 0xac, 0xd2, 0x87, 0x73, 0xf4, 0x53, 0x33, 0x93, 0x92,
	0xf5, 0xd3, 0x4a, 0x73, 0xd2, 0x32, 0x73, 0x72, 0xe2, 0x33, 0xf2, 0xf3, 0xb3, 0xf5, 0x0a, 0x8a,
	0xf2, 0x4b, 0xf2, 0x85, 0xa4, 0x91, 0xd5, 0x23, 0x34, 0xeb, 0x81, 0xd4, 0x4b, 0x89, 0xa4, 0xe7,
	0xa7, 0xe7, 0x83, 0xd5, 0xe9, 0x83, 0x58, 0x10, 0x2d, 0x4a, 0xee, 0x5c, 0xdc, 0x6e, 0x10, 0x83,
	0x3c, 0xf2, 0xf3, 0xb3, 0x85, 0xa4, 0xb9, 0x38, 0x41, 0xe6, 0xc5, 0xe7, 0x25, 0xe6, 0xa6, 0x4a,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x71, 0x80, 0x04, 0xfc, 0x12, 0x73, 0x53, 0xe1, 0x92, 0x29,
	0x89, 0x25, 0x89, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x10, 0x49, 0x97, 0xc4, 0x92, 0x44, 0x27,
	0xef, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63,
	0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x32, 0x4c, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xc7, 0xe1, 0xa1, 0x32, 0x63, 0xfd, 0x0a, 0x88, 0xaf,
	0x4a, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x8e, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x3a, 0x35, 0xfa, 0xaa, 0x01, 0x01, 0x00, 0x00,
}

func (m *FulfillHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FulfillHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FulfillHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HookData) > 0 {
		i -= len(m.HookData)
		copy(dAtA[i:], m.HookData)
		i = encodeVarintFulfillHook(dAtA, i, uint64(len(m.HookData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HookName) > 0 {
		i -= len(m.HookName)
		copy(dAtA[i:], m.HookName)
		i = encodeVarintFulfillHook(dAtA, i, uint64(len(m.HookName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFulfillHook(dAtA []byte, offset int, v uint64) int {
	offset -= sovFulfillHook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FulfillHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HookName)
	if l > 0 {
		n += 1 + l + sovFulfillHook(uint64(l))
	}
	l = len(m.HookData)
	if l > 0 {
		n += 1 + l + sovFulfillHook(uint64(l))
	}
	return n
}

func sovFulfillHook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFulfillHook(x uint64) (n int) {
	return sovFulfillHook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FulfillHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFulfillHook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FulfillHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FulfillHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfillHook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfillHook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfillHook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HookName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfillHook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFulfillHook
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfillHook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HookData = append(m.HookData[:0], dAtA[iNdEx:postIndex]...)
			if m.HookData == nil {
				m.HookData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFulfillHook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFulfillHook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFulfillHook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFulfillHook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFulfillHook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFulfillHook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFulfillHook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFulfillHook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFulfillHook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFulfillHook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFulfillHook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFulfillHook = fmt.Errorf("proto: unexpected end of group")
)
