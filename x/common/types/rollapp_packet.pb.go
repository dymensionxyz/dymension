// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/common/rollapp_packet.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v7/modules/core/04-channel/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RollappPacket_Type int32

const (
	RollappPacket_ON_RECV    RollappPacket_Type = 0
	RollappPacket_ON_ACK     RollappPacket_Type = 1
	RollappPacket_ON_TIMEOUT RollappPacket_Type = 2
	RollappPacket_UNDEFINED  RollappPacket_Type = -1
)

var RollappPacket_Type_name = map[int32]string{
	0:  "ON_RECV",
	1:  "ON_ACK",
	2:  "ON_TIMEOUT",
	-1: "UNDEFINED",
}

var RollappPacket_Type_value = map[string]int32{
	"ON_RECV":    0,
	"ON_ACK":     1,
	"ON_TIMEOUT": 2,
	"UNDEFINED":  -1,
}

func (x RollappPacket_Type) String() string {
	return proto.EnumName(RollappPacket_Type_name, int32(x))
}

func (RollappPacket_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_febc8c0e69213bc2, []int{0, 0}
}

type RollappPacket struct {
	RollappId       string             `protobuf:"bytes,1,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	Packet          *types.Packet      `protobuf:"bytes,2,opt,name=packet,proto3" json:"packet,omitempty"`
	Acknowledgement []byte             `protobuf:"bytes,3,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
	Status          Status             `protobuf:"varint,4,opt,name=status,proto3,enum=dymensionxyz.dymension.common.Status" json:"status,omitempty"`
	ProofHeight     uint64             `protobuf:"varint,5,opt,name=ProofHeight,proto3" json:"ProofHeight,omitempty"`
	Relayer         []byte             `protobuf:"bytes,6,opt,name=relayer,proto3" json:"relayer,omitempty"`
	Type            RollappPacket_Type `protobuf:"varint,7,opt,name=type,proto3,enum=dymensionxyz.dymension.common.RollappPacket_Type" json:"type,omitempty"`
	// stores the result of onAck, onTimeout or onRecv/writeAck
	Error string `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	// who was the original person who gets the money (recipient of ics20 transfer) of the packet?
	OriginalTransferTarget string `protobuf:"bytes,9,opt,name=original_transfer_target,json=originalTransferTarget,proto3" json:"original_transfer_target,omitempty"`
}

func (m *RollappPacket) Reset()         { *m = RollappPacket{} }
func (m *RollappPacket) String() string { return proto.CompactTextString(m) }
func (*RollappPacket) ProtoMessage()    {}
func (*RollappPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_febc8c0e69213bc2, []int{0}
}
func (m *RollappPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollappPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollappPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollappPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollappPacket.Merge(m, src)
}
func (m *RollappPacket) XXX_Size() int {
	return m.Size()
}
func (m *RollappPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_RollappPacket.DiscardUnknown(m)
}

var xxx_messageInfo_RollappPacket proto.InternalMessageInfo

func (m *RollappPacket) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *RollappPacket) GetPacket() *types.Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *RollappPacket) GetAcknowledgement() []byte {
	if m != nil {
		return m.Acknowledgement
	}
	return nil
}

func (m *RollappPacket) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *RollappPacket) GetProofHeight() uint64 {
	if m != nil {
		return m.ProofHeight
	}
	return 0
}

func (m *RollappPacket) GetRelayer() []byte {
	if m != nil {
		return m.Relayer
	}
	return nil
}

func (m *RollappPacket) GetType() RollappPacket_Type {
	if m != nil {
		return m.Type
	}
	return RollappPacket_ON_RECV
}

func (m *RollappPacket) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RollappPacket) GetOriginalTransferTarget() string {
	if m != nil {
		return m.OriginalTransferTarget
	}
	return ""
}

func init() {
	proto.RegisterEnum("dymensionxyz.dymension.common.RollappPacket_Type", RollappPacket_Type_name, RollappPacket_Type_value)
	proto.RegisterType((*RollappPacket)(nil), "dymensionxyz.dymension.common.RollappPacket")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/common/rollapp_packet.proto", fileDescriptor_febc8c0e69213bc2)
}

var fileDescriptor_febc8c0e69213bc2 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0xad, 0x6b, 0xe9, 0x2b, 0x8c, 0xca, 0x9a, 0x26, 0x6b, 0x68, 0x51, 0x98, 0x84,
	0x14, 0x71, 0x70, 0xd4, 0xf6, 0xc2, 0x85, 0x03, 0x6c, 0x01, 0x2a, 0xb4, 0x74, 0x0a, 0x19, 0x07,
	0x2e, 0x51, 0x9a, 0x7a, 0x69, 0xb4, 0xd4, 0x8e, 0x1c, 0xaf, 0x2c, 0x7c, 0x0a, 0x3e, 0x16, 0xc7,
	0x1d, 0x39, 0xa2, 0xf6, 0xc2, 0xb7, 0x00, 0xc5, 0x49, 0xa6, 0x81, 0xc4, 0xf0, 0xc9, 0xef, 0xbd,
	0xff, 0xdf, 0xfe, 0xbd, 0xa7, 0x07, 0xa3, 0x79, 0xb1, 0x64, 0x3c, 0x4f, 0x04, 0xbf, 0x2e, 0xbe,
	0xd8, 0xb7, 0x81, 0x1d, 0x89, 0xe5, 0x52, 0x70, 0x5b, 0x8a, 0x34, 0x0d, 0xb3, 0x2c, 0xc8, 0xc2,
	0xe8, 0x92, 0x29, 0x9a, 0x49, 0xa1, 0x04, 0x3e, 0xbc, 0xeb, 0xa1, 0xb7, 0x01, 0xad, 0x3c, 0x07,
	0x7b, 0xb1, 0x88, 0x85, 0x56, 0xda, 0xe5, 0xad, 0x32, 0x1d, 0x3c, 0x4d, 0x66, 0x91, 0x1d, 0x09,
	0xc9, 0xec, 0x68, 0x11, 0x72, 0xce, 0x52, 0x7b, 0x35, 0x6c, 0xae, 0xb5, 0xe4, 0xf9, 0xfd, 0x2c,
	0xb9, 0x0a, 0xd5, 0x55, 0x5e, 0x69, 0x8f, 0x7e, 0x6e, 0xc3, 0x23, 0xaf, 0x82, 0x3b, 0xd3, 0x6c,
	0xf8, 0x10, 0xa0, 0xa1, 0x4d, 0xe6, 0x04, 0x99, 0xc8, 0xea, 0x79, 0xbd, 0x3a, 0x33, 0x99, 0xe3,
	0x31, 0x74, 0xaa, 0x26, 0xc8, 0x96, 0x89, 0xac, 0xfe, 0xe8, 0x09, 0x4d, 0x66, 0x11, 0x2d, 0x81,
	0x68, 0x43, 0xb1, 0x1a, 0xd2, 0xea, 0x2d, 0xaf, 0x96, 0x62, 0x0b, 0x1e, 0x87, 0xd1, 0x25, 0x17,
	0x9f, 0x53, 0x36, 0x8f, 0xd9, 0x92, 0x71, 0x45, 0xb6, 0x4d, 0x64, 0x3d, 0xf4, 0xfe, 0x4e, 0xe3,
	0x97, 0xd0, 0xa9, 0xf8, 0x48, 0xdb, 0x44, 0xd6, 0xee, 0xe8, 0x19, 0xbd, 0x77, 0x48, 0xf4, 0x83,
	0x16, 0x7b, 0xb5, 0x09, 0x9b, 0xd0, 0x3f, 0x93, 0x42, 0x5c, 0xbc, 0x63, 0x49, 0xbc, 0x50, 0x64,
	0xc7, 0x44, 0x56, 0xdb, 0xbb, 0x9b, 0xc2, 0x04, 0xba, 0x92, 0xa5, 0x61, 0xc1, 0x24, 0xe9, 0x68,
	0x84, 0x26, 0xc4, 0x0e, 0xb4, 0x55, 0x91, 0x31, 0xd2, 0xd5, 0x1f, 0x0f, 0xff, 0xf3, 0xf1, 0x1f,
	0x43, 0xa3, 0x7e, 0x91, 0x31, 0x4f, 0xdb, 0xf1, 0x1e, 0xec, 0x30, 0x29, 0x85, 0x24, 0x0f, 0xf4,
	0xe8, 0xaa, 0x00, 0xbf, 0x00, 0x22, 0x64, 0x12, 0x27, 0x3c, 0x4c, 0x03, 0x25, 0x43, 0x9e, 0x5f,
	0x30, 0x19, 0xa8, 0x50, 0xc6, 0x4c, 0x91, 0x9e, 0x16, 0xee, 0x37, 0x75, 0xbf, 0x2e, 0xfb, 0xba,
	0x7a, 0xf4, 0x16, 0xda, 0xe5, 0xeb, 0xb8, 0x0f, 0xdd, 0xa9, 0x1b, 0x78, 0xce, 0xf1, 0xc7, 0x41,
	0x0b, 0x03, 0x74, 0xa6, 0x6e, 0xf0, 0xea, 0xf8, 0xfd, 0x00, 0xe1, 0x5d, 0x80, 0xa9, 0x1b, 0xf8,
	0x93, 0x53, 0x67, 0x7a, 0xee, 0x0f, 0xb6, 0xf0, 0x3e, 0xf4, 0xce, 0xdd, 0x13, 0xe7, 0xcd, 0xc4,
	0x75, 0x4e, 0x06, 0xbf, 0x9a, 0x83, 0x5e, 0x9f, 0x7e, 0x5b, 0x1b, 0xe8, 0x66, 0x6d, 0xa0, 0x1f,
	0x6b, 0x03, 0x7d, 0xdd, 0x18, 0xad, 0x9b, 0x8d, 0xd1, 0xfa, 0xbe, 0x31, 0x5a, 0x9f, 0xc6, 0x71,
	0xa2, 0x16, 0x57, 0xb3, 0xb2, 0x35, 0xfb, 0x1f, 0xbb, 0xb3, 0x1a, 0xdb, 0xd7, 0xcd, 0x02, 0x95,
	0x6d, 0xe6, 0xb3, 0x8e, 0x5e, 0xa0, 0xf1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xcc, 0x6a,
	0x2e, 0xfa, 0x02, 0x00, 0x00,
}

func (m *RollappPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollappPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollappPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginalTransferTarget) > 0 {
		i -= len(m.OriginalTransferTarget)
		copy(dAtA[i:], m.OriginalTransferTarget)
		i = encodeVarintRollappPacket(dAtA, i, uint64(len(m.OriginalTransferTarget)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintRollappPacket(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x42
	}
	if m.Type != 0 {
		i = encodeVarintRollappPacket(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Relayer) > 0 {
		i -= len(m.Relayer)
		copy(dAtA[i:], m.Relayer)
		i = encodeVarintRollappPacket(dAtA, i, uint64(len(m.Relayer)))
		i--
		dAtA[i] = 0x32
	}
	if m.ProofHeight != 0 {
		i = encodeVarintRollappPacket(dAtA, i, uint64(m.ProofHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintRollappPacket(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Acknowledgement) > 0 {
		i -= len(m.Acknowledgement)
		copy(dAtA[i:], m.Acknowledgement)
		i = encodeVarintRollappPacket(dAtA, i, uint64(len(m.Acknowledgement)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Packet != nil {
		{
			size, err := m.Packet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollappPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintRollappPacket(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRollappPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovRollappPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RollappPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovRollappPacket(uint64(l))
	}
	if m.Packet != nil {
		l = m.Packet.Size()
		n += 1 + l + sovRollappPacket(uint64(l))
	}
	l = len(m.Acknowledgement)
	if l > 0 {
		n += 1 + l + sovRollappPacket(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRollappPacket(uint64(m.Status))
	}
	if m.ProofHeight != 0 {
		n += 1 + sovRollappPacket(uint64(m.ProofHeight))
	}
	l = len(m.Relayer)
	if l > 0 {
		n += 1 + l + sovRollappPacket(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRollappPacket(uint64(m.Type))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRollappPacket(uint64(l))
	}
	l = len(m.OriginalTransferTarget)
	if l > 0 {
		n += 1 + l + sovRollappPacket(uint64(l))
	}
	return n
}

func sovRollappPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRollappPacket(x uint64) (n int) {
	return sovRollappPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RollappPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollappPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollappPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollappPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollappPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollappPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollappPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollappPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Packet == nil {
				m.Packet = &types.Packet{}
			}
			if err := m.Packet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledgement", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRollappPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRollappPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acknowledgement = append(m.Acknowledgement[:0], dAtA[iNdEx:postIndex]...)
			if m.Acknowledgement == nil {
				m.Acknowledgement = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			m.ProofHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relayer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRollappPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRollappPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relayer = append(m.Relayer[:0], dAtA[iNdEx:postIndex]...)
			if m.Relayer == nil {
				m.Relayer = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RollappPacket_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollappPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollappPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalTransferTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollappPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollappPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollappPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalTransferTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollappPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollappPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollappPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollappPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollappPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollappPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRollappPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRollappPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRollappPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRollappPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollappPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRollappPacket = fmt.Errorf("proto: unexpected end of group")
)
