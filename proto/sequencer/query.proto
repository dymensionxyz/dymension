syntax = "proto3";
package dymensionxyz.dymension.sequencer;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "sequencer/params.proto";
import "sequencer/sequencer.proto";
import "sequencer/sequencers_by_rollapp.proto";
// this line is used by starport scaffolding # 1
import "shared/sequencers.proto";
import "sequencer/description.proto";

option go_package = "github.com/dymensionxyz/dymension/x/sequencer/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/sequencer/params";
  }
  // Queries a Sequencer by index.
	rpc Sequencer(QueryGetSequencerRequest) returns (QueryGetSequencerResponse) {
		option (google.api.http).get = "/dymensionxyz/dymension/sequencer/sequencer/{sequencerAddress}";
	}

	// Queries a list of Sequencer items.
	rpc SequencerAll(QueryAllSequencerRequest) returns (QueryAllSequencerResponse) {
		option (google.api.http).get = "/dymensionxyz/dymension/sequencer/sequencer";
	}

// Queries a SequencersByRollapp by index.
	rpc SequencersByRollapp(QueryGetSequencersByRollappRequest) returns (QueryGetSequencersByRollappResponse) {
		option (google.api.http).get = "/dymensionxyz/dymension/sequencer/sequencers_by_rollapp/{rollappId}";
	}

	// Queries a list of SequencersByRollapp items.
	rpc SequencersByRollappAll(QueryAllSequencersByRollappRequest) returns (QueryAllSequencersByRollappResponse) {
		option (google.api.http).get = "/dymensionxyz/dymension/sequencer/sequencers_by_rollapp";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetSequencerRequest {
	  string sequencerAddress = 1;

}

message QueryGetSequencerResponse {
	Sequencer sequencer = 1 [(gogoproto.nullable) = false];
}

message QueryAllSequencerRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSequencerResponse {
	repeated Sequencer sequencer = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSequencersByRollappRequest {
	  string rollappId = 1;

}

message QueryGetSequencersByRollappResponse {
	SequencersByRollapp sequencersByRollapp = 1 [(gogoproto.nullable) = false];
}

message QueryAllSequencersByRollappRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSequencersByRollappResponse {
	repeated SequencersByRollapp sequencersByRollapp = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
