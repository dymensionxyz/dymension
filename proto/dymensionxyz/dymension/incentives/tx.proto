syntax = "proto3";
package dymensionxyz.dymension.incentives;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "dymensionxyz/dymension/incentives/gauge.proto";
import "dymensionxyz/dymension/lockup/lock.proto";
import "dymensionxyz/dymension/incentives/params.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/incentives/types";
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams is used for updating module params.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  
  rpc CreateGauge(MsgCreateGauge) returns (MsgCreateGaugeResponse);
  rpc AddToGauge(MsgAddToGauge) returns (MsgAddToGaugeResponse);
}

// MsgUpdateParams allows to update module params.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // Authority is the address that controls the module.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // NewParams should be fully populated.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}

// MsgCreateGauge creates a gague to distribute rewards to users
message MsgCreateGauge {
  // is_perpetual shows if it's a perpetual or non-perpetual gauge
  // Non-perpetual gauges distribute their tokens equally per epoch while the
  // gauge is in the active period. Perpetual gauges distribute all their tokens
  // at a single time and only distribute their tokens again once the gauge is
  // refilled
  bool is_perpetual = 1;
  // owner is the address of gauge creator
  string owner = 2 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  // distribute_to is where the gauge rewards are distributed to
  oneof distribute_to {
    dymensionxyz.dymension.lockup.QueryCondition asset = 3;
    EndorsementGauge endorsement = 7;
  }
  // coins are coin(s) to be distributed by the gauge
  repeated cosmos.base.v1beta1.Coin coins = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // start_time is the distribution start time
  google.protobuf.Timestamp start_time = 5 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"timestamp\""
  ];
  // num_epochs_paid_over is the number of epochs distribution will be completed
  // over
  uint64 num_epochs_paid_over = 6;
}
message MsgCreateGaugeResponse {}

// MsgAddToGauge adds coins to a previously created gauge
message MsgAddToGauge {
  // owner is the gauge owner's address
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  // gauge_id is the ID of gauge that rewards are getting added to
  uint64 gauge_id = 2;
  // rewards are the coin(s) to add to gauge
  repeated cosmos.base.v1beta1.Coin rewards = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
message MsgAddToGaugeResponse {}
