syntax = "proto3";
package dymensionxyz.dymension.auctionhouse;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/auctionhouse/types";

// Auction represents a Dutch auction with decreasing prices over time
message Auction {
  // Unique identifier for the auction
  uint64 id = 1;
  
  // Total token allocation for the auction (e.g., "1000000DYM")
  cosmos.base.v1beta1.Coin allocation = 2 [(gogoproto.nullable) = false];
  
  // Start time of the auction
  google.protobuf.Timestamp start_time = 3 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  
// End time of the auction
  google.protobuf.Timestamp end_time = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  
  // Initial discount percentage (e.g., "0.05" for 5%)
  string initial_discount = 7 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  
  // Maximum discount percentage (e.g., "0.50" for 50%)
  string max_discount = 8 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  
  // Total amount of tokens sold
  string sold_amount = 9 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  message VestingPlan {
    // Vesting period for purchased tokens (e.g., "3 months")
    google.protobuf.Duration vesting_period = 1 [
      (gogoproto.stdduration) = true,
      (gogoproto.nullable) = false
    ];

    // Delay before vesting starts after auction ends (e.g., "7 days")
    google.protobuf.Duration vesting_start_after_auction_end = 2 [
      (gogoproto.stdduration) = true,
      (gogoproto.nullable) = false
    ];
  }

  VestingPlan vesting_plan = 10 [
    (gogoproto.nullable) = false
  ];
  
  // Total raised amount in all accepted tokens
  repeated cosmos.base.v1beta1.Coin raised_amount = 11 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// UserVestingPlan defines vesting parameters for purchased tokens
message UserVestingPlan {
    // Amount of tokens purchased
    string amount = 1 [
      (cosmos_proto.scalar) = "cosmos.Int",
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable) = false
    ];
  
    // Amount already claimed
  string claimed = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // Start time of the auction
  google.protobuf.Timestamp start_time = 3 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  
// End time of the auction
  google.protobuf.Timestamp end_time = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
}
