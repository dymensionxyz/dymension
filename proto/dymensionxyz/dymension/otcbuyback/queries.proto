syntax = "proto3";
package dymensionxyz.dymension.otcbuyback;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "dymensionxyz/dymension/otcbuyback/auction.proto";
import "dymensionxyz/dymension/otcbuyback/purchase.proto";
import "dymensionxyz/dymension/otcbuyback/tokens.proto";
import "dymensionxyz/dymension/otcbuyback/params.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/otcbuyback/types";

// QueryParamsRequest is the request type for the Query/Params RPC method
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method
message QueryParamsResponse {
  // params holds all the parameters of this module
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of the module
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/otcbuyback/params";
  }

  // AllAuctions queries all auctions with optional filtering
  rpc AllAuctions(QueryAllAuctionsRequest) returns (QueryAllAuctionsResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/otcbuyback/auctions";
  }

  // Auction queries a specific auction by ID
  rpc Auction(QueryAuctionRequest) returns (QueryAuctionResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/otcbuyback/auction/{id}";
  }

  // UserPurchase queries user's vesting plan for a specific auction
  rpc UserPurchase(QueryUserPurchaseRequest)
      returns (QueryUserPurchaseResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/otcbuyback/vesting/{auction_id}/{user}";
  }

  // AcceptedTokens queries all accepted tokens with their current prices
  rpc AcceptedTokens(QueryAcceptedTokensRequest)
      returns (QueryAcceptedTokensResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/otcbuyback/accepted_tokens";
  }

  // AcceptedToken queries specific token data and price by denom
  rpc AcceptedToken(QueryAcceptedTokenRequest)
      returns (QueryAcceptedTokenResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/otcbuyback/accepted_token/{denom}";
  }
}

// QueryAllAuctionsRequest is the request type for the Query/AllAuctions RPC
// method.
message QueryAllAuctionsRequest {
  // exclude_completed filters out completed auctions when set to true
  bool exclude_completed = 1;
}

// QueryAllAuctionsResponse is the response type for the Query/AllAuctions RPC
// method.
message QueryAllAuctionsResponse {
  // auctions is the list of all auctions
  repeated Auction auctions = 1 [ (gogoproto.nullable) = false ];
}

// QueryAuctionRequest is the request type for the Query/Auction RPC method.
message QueryAuctionRequest {
  // id of the auction to query
  uint64 id = 1;
}

// QueryAuctionResponse is the response type for the Query/Auction RPC method.
message QueryAuctionResponse {
  // auction is the queried auction
  Auction auction = 1 [ (gogoproto.nullable) = false ];

  // current_discount is the current discount percentage at the time of query.
  // Only applicable to linear auctions.
  string current_discount = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

// QueryUserPurchaseRequest is the request type for the Query/UserPurchase RPC
// method.
message QueryUserPurchaseRequest {
  // auction_id is the ID of the auction
  uint64 auction_id = 1;

  // user is the address of the user
  string user = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// QueryUserPurchaseResponse is the response type for the Query/UserPurchase RPC
// method.
message QueryUserPurchaseResponse {
  // purchase is the user's purchase for the specified auction
  Purchase purchase = 1 [ (gogoproto.nullable) = false ];

  // claimable_amount is the amount that can be claimed now
  string claimable_amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// QueryAcceptedTokensRequest is the request type for the Query/AcceptedTokens
// RPC method.
message QueryAcceptedTokensRequest {}

// QueryAcceptedTokensResponse is the response type for the Query/AcceptedTokens
// RPC method.
message QueryAcceptedTokensResponse {
  // accepted_tokens is the list of all accepted tokens with their data
  repeated AcceptedToken accepted_tokens = 1 [ (gogoproto.nullable) = false ];
}

// QueryAcceptedTokenRequest is the request type for the Query/AcceptedToken RPC
// method.
message QueryAcceptedTokenRequest {
  // denom is the denomination of the token to query
  string denom = 1;
}

// QueryAcceptedTokenResponse is the response type for the Query/AcceptedToken
// RPC method.
message QueryAcceptedTokenResponse {
  // accepted_token is the queried token data
  AcceptedToken accepted_token = 1 [ (gogoproto.nullable) = false ];

  string spot_price = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}
