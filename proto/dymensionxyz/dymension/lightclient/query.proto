syntax = "proto3";
package dymensionxyz.dymension.lightclient;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/lightclient/types";

message QueryGetLightClientRequest {
  option (gogoproto.equal) = false;
  string rollapp_id = 1;
}
message QueryGetLightClientResponse {
  // empty if doesn't exist
  string client_id = 2;
}

// Query defines the gRPC querier service.
service Query {
  rpc LightClient(QueryGetLightClientRequest) returns (QueryGetLightClientResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/lightclient/lightclient/{rollapp_id}";
  }
  rpc ExpectedClientState(QueryExpectedClientStateRequest) returns (QueryExpectedClientStateResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/lightclient/expectedclientstate";
  }
  rpc RollappCanonChannel(QueryRollappCanonChannelRequest) returns (QueryRollappCanonChannelResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/lightclient/canon_channel/{rollappId}";
  }
}

message QueryExpectedClientStateRequest {}

message QueryExpectedClientStateResponse {
  // client state
  google.protobuf.Any client_state = 2 [(gogoproto.moretags) = "yaml:\"client_state\""];
}

message QueryRollappCanonChannelRequest {
  string rollappId = 1;
}

message QueryRollappCanonChannelResponse {
  // hub side
  string hub_channel_id = 1;
  // rollapp side ('counterparty')
  string rollapp_channel_id = 2;
}