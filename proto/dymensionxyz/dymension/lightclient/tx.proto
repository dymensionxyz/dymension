syntax = "proto3";
package dymensionxyz.dymension.lightclient;

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";

import "ibc/core/client/v1/tx.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/lightclient/types";

service Msg {
  option (cosmos.msg.v1.service) = true;
  rpc SetCanonicalClient(MsgSetCanonicalClient)
      returns (MsgSetCanonicalClientResponse);

  // The normal IBC update client msg needs to go through our ante handler,
  // which means we block authz wrapping of it, but we still need a way to do it
  // via authz (for portal self-relaying). So, we add a new wrapper message
  // here, and route it through the ante handler logic explicitly.
  //
  // note: cannot reuse already-registered ibc request msg type
  rpc UpdateClient(MsgUpdateClient)
      returns (ibc.core.client.v1.MsgUpdateClientResponse);
}

// verify a client state and its consensus states against the rollapp
// if it matches, set the client as the canonical client for the rollapp
// NOTE: this definition is also copied to the relayer code
message MsgSetCanonicalClient {
  option (cosmos.msg.v1.signer) = "signer";
  string signer = 1;
  // id of ibc client state
  string client_id = 2;
}

message MsgSetCanonicalClientResponse {}

message MsgUpdateClient {
  option (cosmos.msg.v1.signer) = "inner";
  ibc.core.client.v1.MsgUpdateClient inner = 1;
}
