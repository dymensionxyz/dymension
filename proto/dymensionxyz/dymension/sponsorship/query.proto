syntax = "proto3";
package dymensionxyz.dymension.sponsorship;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/api/annotations.proto";
import "dymensionxyz/dymension/sponsorship/sponsorship.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/sponsorship/types";

// Query defines the gRPC querier service.
service Query {
  // Param queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/sponsorship/params";
  }

  // Vote returns the vote for the specified address.
  rpc Vote(QueryVoteRequest) returns (QueryVoteResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/sponsorship/vote/{voter}";
  }

  // Distribution returns the current distribution plan.
  rpc Distribution(QueryDistributionRequest)
      returns (QueryDistributionResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/streamer/distribution";
  }

  rpc EstimateClaim(QueryEstimateClaim) returns (QueryEstimateClaimResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/sponsorship/estimate_claim/{rollapp_id}/{address}";
  }

  rpc Endorsement(QueryEndorsement) returns (QueryEndorsementResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/sponsorship/endorsement/{rollapp_id}";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryVoteRequest is the request type for the Query/Vote RPC method.
message QueryVoteRequest {
  // Voter is the bech32 encoded address of the voted user.
  string voter = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// QueryVoteResponse is the response type for the Query/Vote RPC method.
message QueryVoteResponse {
  // Vote is the user's vote.
  Vote vote = 1 [ (gogoproto.nullable) = false ];
}

// QueryVoteRequest is the request type for the Query/Distribution RPC method.
message QueryDistributionRequest {}

// QueryVoteResponse is the response type for the Query/Distribution RPC method.
message QueryDistributionResponse {
  // Distribution is the current voting power distribution among gauges.
  Distribution distribution = 1 [ (gogoproto.nullable) = false ];
}

message QueryEstimateClaim {
  string rollapp_id = 1;
  string address = 2;
}

message QueryEstimateClaimResponse {
  repeated cosmos.base.v1beta1.Coin reward = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message QueryEndorsement {
  string rollapp_id = 1;
}

message QueryEndorsementResponse {
  Endorsement endorsement = 1 [(gogoproto.nullable) = false];
}
