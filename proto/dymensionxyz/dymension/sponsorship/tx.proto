syntax = "proto3";
package dymensionxyz.dymension.sponsorship;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "dymensionxyz/dymension/sponsorship/sponsorship.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/sponsorship/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams is used for updating module params.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // Vote allows a user to cast their vote. The user specifies a desired weight
  // breakdown among existing gauges.
  rpc Vote(MsgVote) returns (MsgVoteResponse);

  // RevokeVote allows a user to revoke their vote.
  rpc RevokeVote(MsgRevokeVote) returns (MsgRevokeVoteResponse);
}

// MsgUpdateParams allows to update module params.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // Authority is the address that controls the module.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // NewParams should be fully populated.
  Params new_params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}

// MsgVote defines a message to cast a vote.
message MsgVote {
  option (cosmos.msg.v1.signer) = "voter";

  // Voter is the bech32 encoded address of the user sending the vote.
  string voter = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Weights is a breakdown of the user's vote for different gauges.
  repeated GaugeWeight weights = 2 [ (gogoproto.nullable) = false ];
}

message MsgVoteResponse {}

// MsgRevoke defines a message to revoke the vote.
message MsgRevokeVote {
  option (cosmos.msg.v1.signer) = "voter";

  // Voter is the bech32 encoded address of the user sending the vote.
  string voter = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message MsgRevokeVoteResponse {}
