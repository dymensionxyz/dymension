syntax = "proto3";
package dymensionxyz.dymension.streamer;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "dymensionxyz/dymension/streamer/distr_info.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/streamer/types";

// Stream is an object that stores and distributes yields to recipients who
// satisfy certain conditions. Currently streams support conditions around the
// duration for which a given denom is locked.
message Stream {
  // id is the unique ID of a Stream
  uint64 id = 1;

  // distribute_to is the distr_info.
  DistrInfo distribute_to = 2 [ (gogoproto.nullable) = false ];

  // coins is the total amount of coins that have been in the stream
  // Can distribute multiple coin denoms
  repeated cosmos.base.v1beta1.Coin coins = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // start_time is the distribution start time
  google.protobuf.Timestamp start_time = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"start_time\""
  ];

  // distr_epoch_identifier is what epoch type di-stribution will be triggered
  // by
  // (day, week, etc.)
  string distr_epoch_identifier = 5
      [ (gogoproto.moretags) = "yaml:\"distr_epoch_identifier\"" ];

  // num_epochs_paid_over is the number of total epochs distribution will be
  // completed over
  uint64 num_epochs_paid_over = 6;
  // filled_epochs is the number of epochs distribution has been completed on
  // already
  uint64 filled_epochs = 7;
  // distributed_coins are coins that have been distributed already
  repeated cosmos.base.v1beta1.Coin distributed_coins = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  // Sponsored indicates if the stream is based on the sponsorship distribution.
  bool sponsored = 9;

  // EpochCoins are coins that need to be distributed in this epoch.
  repeated cosmos.base.v1beta1.Coin epoch_coins = 10 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  // PumpParams is an *optional* field indicating if the stream
  // is pumping or distributing. If non-null, it contains pumping params.
  // For now, every pump stream should be sponsored.
  PumpParams pump_params = 11;
}

// PumpDistr is a distribution used to determine pump amount
enum PumpDistr {
  PUMP_DISTR_UNSPECIFIED = 0;
  PUMP_DISTR_UNIFORM = 1;
  PUMP_DISTR_EXPONENTIAL = 2;
}

message PumpParams {
  // Target is that is going to be pumped
  oneof target {
    TargetTopRollapps rollapps = 1;
    TargetPool pool = 2;
  }
  // EpochBudgetLeft is coins that is left for pumping in the epoch.
  repeated cosmos.base.v1beta1.Coin epoch_coins_left = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // NumPumps is a target number of pumps that expected to happen
  // in the epoch (probabilistically)
  uint64 num_pumps = 4;
  // PumpDistr is a distribution used to determine pump amount
  PumpDistr pump_distr = 5;
}

// Pump top N rollapps based on their sponsorship weight
message TargetTopRollapps {
  // NumTopRollapps is a number of rollapps, top N by the voting power,
  // that will be pumped on every pump iteration.
  uint32 num_top_rollapps = 1;
}

// Pump the pool
message TargetPool {
  // PoolId is a pool that's used to buy DYM given provided coins
  uint64 pool_id = 1;
  // TokenOut is a token that will be pumped (bought)
  string token_out = 2;
}
