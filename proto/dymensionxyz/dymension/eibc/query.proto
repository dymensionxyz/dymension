syntax = "proto3";
package dymensionxyz.dymension.eibc;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "dymensionxyz/dymension/eibc/params.proto";
import "dymensionxyz/dymension/eibc/demand_order.proto";
import "dymensionxyz/dymension/common/status.proto";
import "dymensionxyz/dymension/common/rollapp_packet.proto";
import "dymensionxyz/dymension/eibc/lp.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/eibc/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/eibc/params";
  }
  // Queries a Demand Order by id.
  rpc DemandOrderById(QueryGetDemandOrderRequest)
      returns (QueryGetDemandOrderResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/eibc/demand_order/{id}";
  }
  // Queries a list of demand orders by status.
  rpc DemandOrdersByStatus(QueryDemandOrdersByStatusRequest)
      returns (QueryDemandOrdersByStatusResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/eibc/demand_orders/{status}";
  }

  rpc OnDemandLPs(QueryOnDemandLPsRequest) returns (QueryOnDemandLPsResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/eibc/on_demand_lps/{ids}";
  }

  rpc OnDemandLPsByByAddr(QueryOnDemandLPsByAddrRequest)
      returns (QueryOnDemandLPsByAddrResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/eibc/on_demand_lps_addr/{addr}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryGetDemandOrderRequest is the request type for the Query/GetDemandOrder
// RPC method.
message QueryGetDemandOrderRequest {
  // id of the demand order to get
  string id = 1;
}

// QueryDemandOrdersByStatusRequest is the request type for the
// Query/GetDemandOrdersByStatus RPC method.
message QueryDemandOrdersByStatusRequest {
  // status of the demand order
  common.Status status = 1;
  // optional type
  common.RollappPacket.Type type = 2;
  // optional rollapp_id
  string rollapp_id = 3;
  // optional limit
  int32 limit = 4;
  // optional fulfillment state
  FulfillmentState fulfillment_state = 5;
  // optional fulfiller address
  string fulfiller = 6;
  // optional denom
  string denom = 7;
  // optional recipient address
  string recipient = 8;
  cosmos.base.query.v1beta1.PageRequest pagination = 9;
}

enum FulfillmentState {
  UNDEFINED = 0;
  FULFILLED = 1;
  UNFULFILLED = 2;
}

// QueryGetDemandOrderResponse is the response type for the Query/GetDemandOrder
// RPC method.
message QueryGetDemandOrderResponse {
  // demand order with the given id
  DemandOrder demand_order = 1;
}

// QueryDemandOrdersByStatusResponse is the response type for the
// Query/GetDemandOrdersByStatus RPC method.
message QueryDemandOrdersByStatusResponse {
  // A list of demand orders with the given status
  repeated DemandOrder demand_orders = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryOnDemandLPsRequest {
  repeated uint64 ids = 1; // can be empty to return all
}

message QueryOnDemandLPsResponse { repeated OnDemandLPRecord lps = 1; }

message QueryOnDemandLPsByAddrRequest {
  string addr = 1; // bech32-encoded
}

message QueryOnDemandLPsByAddrResponse { repeated OnDemandLPRecord lps = 1; }
