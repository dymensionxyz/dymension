syntax = "proto3";
package dymensionxyz.dymension.iro;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/api/annotations.proto";
import "dymensionxyz/dymension/iro/iro.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/iro/types";

// Query defines the gRPC querier service for the IRO module.
service Query {
  // Params queries the parameters of the IRO module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/iro/params";
  }

  // QueryPlans retrieves all available plans.
  rpc QueryPlans(QueryPlansRequest) returns (QueryPlansResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/iro/plans";
  }

  // QueryPlan retrieves the plan for the specified plan ID.
  rpc QueryPlan(QueryPlanRequest) returns (QueryPlanResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/iro/plans/{plan_id}";
  }

  // QueryPlanByRollapp retrieves the plans for the specified rollapp ID.
  rpc QueryPlanByRollapp(QueryPlanByRollappRequest)
      returns (QueryPlanByRollappResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/iro/plans_by_rollapp/{rollapp_id}";
  }

  // QuerySpotPrice retrieves the current spot price for the specified plan ID.
  // The result is the price of 1 IRO token (not iro's base denom)
  rpc QuerySpotPrice(QuerySpotPriceRequest) returns (QuerySpotPriceResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/iro/price/{plan_id}";
  }

  // QueryCost retrieves the expected cost for buying or selling the specified amount of shares.
  rpc QueryCost(QueryCostRequest) returns (QueryCostResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/iro/cost/{plan_id}";
  }

  // QueryClaimed retrieves the claimed amount thus far for the specified plan ID.
  rpc QueryClaimed(QueryClaimedRequest) returns (QueryClaimedResponse) {
    option (google.api.http).get =
        "/dymensionxyz/dymension/iro/claimed/{plan_id}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryPlanRequest is the request type for the Query/QueryPlan RPC method.
message QueryPlansRequest {}

// QueryPlanResponse is the response type for the Query/QueryPlan RPC method.
message QueryPlansResponse {
  repeated Plan plans = 1 [ (gogoproto.nullable) = false ];
}

// QueryPlanRequest is the request type for the Query/QueryPlan RPC method.
message QueryPlanRequest { string plan_id = 1; }

// QueryPlanResponse is the response type for the Query/QueryPlan RPC method.
message QueryPlanResponse { Plan plan = 1; }

// QueryPlanByRollappRequest is the request type for the
// Query/QueryPlanByRollapp RPC method.
message QueryPlanByRollappRequest { string rollapp_id = 1; }

// QueryPlanByRollappResponse is the response type for the
// Query/QueryPlanByRollapp RPC method.
message QueryPlanByRollappResponse { Plan plan = 1; }

// QuerySpotPriceRequest is the request type for the Query/QuerySpotPrice RPC method.
message QuerySpotPriceRequest { string plan_id = 1; }

// QuerySpotPriceResponse is the response type for the Query/QuerySpotPrice RPC method.
message QuerySpotPriceResponse {
  string price = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// QueryCostRequest is the request type for the Query/QueryCost RPC method.
message QueryCostRequest {
  string plan_id = 1;
  string amt = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  bool sell = 3;
}

// QueryCostResponse is the response type for the Query/QueryCost RPC method.
message QueryCostResponse { cosmos.base.v1beta1.Coin cost = 1; }

// QueryClaimedRequest is the request type for the Query/QueryClaimed RPC
// method.
message QueryClaimedRequest { string plan_id = 1; }

// QueryClaimedResponse is the response type for the Query/QueryClaimed RPC
// method.
message QueryClaimedResponse {
  string claimed_amt = 1
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int" ];
}