syntax = "proto3";
package dymensionxyz.dymension.iro;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/iro/types";

// Params is a module parameters.
message Params {
  string taker_fee = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  string creation_fee = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // Minimum plan duration
  // when creating a plan, the plan duration should be greater than or equal to
  // this value plan duration is from the start time to the pre-launch time
  google.protobuf.Duration min_plan_duration = 3
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];

  // The minimum time after settlement when the incentives distribution will
  // start
  google.protobuf.Duration incentives_min_start_time_after_settlement = 4
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];

  // The minimum number of epochs over which the incentives will be paid
  uint64 incentives_min_num_epochs_paid_over = 5;
}

// Bonding curve represents a bonding curve in the IRO module.
// BondingCurve represents a bonding curve with parameters M, N, and C.
// The price of the token is calculated as follows:
// price = M * x^N + C
message BondingCurve {
  string M = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string N = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string C = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// Plan represents a plan in the IRO module.
message Plan {
  // The ID of the plan.
  uint64 id = 1;

  // The ID of the rollapp.
  string rollapp_id = 2;

  // The module account address to hold the raised DYM tokens.
  string module_acc_address = 3
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The total amount of tokens allocated for the IRO.
  cosmos.base.v1beta1.Coin total_allocation = 4
      [ (gogoproto.nullable) = false ];

  BondingCurve bonding_curve = 5 [ (gogoproto.nullable) = false ];

  // If set, the plan is settled, and the minted allocated tokens can be claimed
  // for this settled_denom
  string settled_denom = 6;

  // The start time of the plan.
  google.protobuf.Timestamp start_time = 7
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // The time before which the rollapp cannot be started.
  google.protobuf.Timestamp pre_launch_time = 8
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // The amount of tokens sold so far.
  string sold_amt = 9 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // The amount of tokens claimed so far.
  string claimed_amt = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // The incentive plan parameters for the tokens left after the plan is
  // settled.
  IncentivePlanParams incentive_plan_params = 11
      [ (gogoproto.nullable) = false ];
}

message IncentivePlanParams {
  // start_time_after_settlement is the time after IRO settlement when the
  // distribution of the remaining tokens as incentives will start
  google.protobuf.Duration start_time_after_settlement = 1
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];
  // num_epochs_paid_over is the number of total epochs distribution will be
  // completed over
  uint64 num_epochs_paid_over = 2;
}
