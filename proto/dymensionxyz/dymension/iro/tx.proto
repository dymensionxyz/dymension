syntax = "proto3";
package dymensionxyz.dymension.iro;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "dymensionxyz/dymension/iro/iro.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "dymensionxyz/dymension/iro/params.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/iro/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams is used for updating module params.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // CreatePlan is used to create a new plan.
  rpc CreatePlan(MsgCreatePlan) returns (MsgCreatePlanResponse);

  rpc EnableTrading(MsgEnableTrading) returns (MsgEnableTradingResponse);

  // Buy is used to buy allocation.
  rpc Buy(MsgBuy) returns (MsgBuyResponse);

  rpc BuyExactSpend(MsgBuyExactSpend) returns (MsgBuyResponse);

  // Sell is used to sell allocation.
  rpc Sell(MsgSell) returns (MsgSellResponse);

  // Claim is used to claim tokens after the plan is settled.
  rpc Claim(MsgClaim) returns (MsgClaimResponse);

  rpc ClaimVested(MsgClaimVested) returns (MsgClaimVestedResponse);
}

// MsgUpdateParams allows to update module params.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // Authority is the address that controls the module.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // NewParams should be fully populated.
  Params new_params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}

// MsgCreatePlan defines a message to create a new plan.
message MsgCreatePlan {
  option (cosmos.msg.v1.signer) = "owner";

  // The address of the plan owner.
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The ID of the rollapp.
  string rollapp_id = 2;

  // The amount of tokens allocated for the plan.
  // NOTE: This amount is expected to be defined on the rollapp genesis info
  string allocated_amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  BondingCurve bonding_curve = 4 [ (gogoproto.nullable) = false ];

  // Whether trading is enabled for the plan. default to true
  // can be set to false initially, to require EnableTrading tx for this IRO
  bool trading_enabled = 5;

  // The start time of the plan. shouldnt be set initially if trading disabled.
  // The start time of the plan.
  google.protobuf.Timestamp start_time = 6
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // The duration of the plan.
  google.protobuf.Duration iro_plan_duration = 7
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];

  // The incentive plan parameters for the tokens left after the plan is
  // settled.
  IncentivePlanParams incentive_plan_params = 8
      [ (gogoproto.nullable) = false ];

  // The part of the liquidity that will be used for liquidity pool
  // liquidity_part = 0.9 means 90% of the funds will go to the liquidity pool
  string liquidity_part = 9 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  string liquidity_denom = 10;

  google.protobuf.Duration vesting_duration = 11 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.moretags) = "yaml:\"vesting_duration\""
  ];

  google.protobuf.Duration vesting_start_time_after_settlement = 12 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.moretags) = "yaml:\"vesting_start_time_after_settlement\""
  ];
}

message MsgCreatePlanResponse {
  // The ID of the plan.
  string plan_id = 1;
}

message MsgEnableTrading {
  option (cosmos.msg.v1.signer) = "owner";

  // The address of the plan owner.
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The ID of the plan.
  string plan_id = 2;
}

message MsgEnableTradingResponse {}

// MsgBuy defines a message to buy allocation.
message MsgBuy {
  option (cosmos.msg.v1.signer) = "buyer";

  string buyer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The ID of the plan.
  string plan_id = 2;

  // The amount of tokens to buy.
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // The maximum cost this buy action can incur.
  string max_cost_amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgBuyExactSpend {
  option (cosmos.msg.v1.signer) = "buyer";

  string buyer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The ID of the plan.
  string plan_id = 2;

  // The amount of DYM to spend.
  string spend = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // The minimum tokens this buy action can provide.
  string min_out_tokens_amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgBuyResponse {}

// MsgSell defines a message to sell allocation.
message MsgSell {
  option (cosmos.msg.v1.signer) = "seller";

  string seller = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The ID of the plan.
  string plan_id = 2;

  // The amount of tokens to sell.
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // The minimum income this sell action can incur.
  string min_income_amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgSellResponse {}

// MsgClaim defines a message to claim tokens after the plan is settled.
message MsgClaim {
  option (cosmos.msg.v1.signer) = "claimer";

  string claimer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The ID of the plan.
  string plan_id = 2;
}

message MsgClaimResponse {}

// MsgClaimVested defines a message to claim funds as a rollapp owner
message MsgClaimVested {
  option (cosmos.msg.v1.signer) = "claimer";

  string claimer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The ID of the plan.
  string plan_id = 2;
}

message MsgClaimVestedResponse {}