syntax = "proto3";
package dymensionxyz.dymension.streamer;


import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "dymension/streamer/stream.proto";

option go_package = "github.com/dymensionxyz/dymension/x/streamer/types";


service Msg {
  rpc CreateStream(MsgCreateStream) returns (MsgCreateStreamResponse);
}

// MsgCreateStream creates a gague to distribute rewards to users
message MsgCreateStream {
  string owner = 1;
  // distribute_to show which lock the stream should distribute to by time
  string distribute_to = 2;
  // coins are coin(s) to be distributed by the stream
  repeated cosmos.base.v1beta1.Coin coins = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // start_time is the distribution start time
  google.protobuf.Timestamp start_time = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"timestamp\""
  ];

  string distr_epoch_identifier = 5
  [ (gogoproto.moretags) = "yaml:\"distr_epoch_identifier\"" ];

  // num_epochs_paid_over is the number of epochs distribution will be completed
  // over
  uint64 num_epochs_paid_over = 6;
}

message MsgCreateStreamResponse {}
