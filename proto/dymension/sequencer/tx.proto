syntax = "proto3";
package dymensionxyz.dymension.sequencer;

// this line is used by starport scaffolding # proto/tx/import
import "dymension/sequencer/description.proto";

import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/dymensionxyz/dymension/x/sequencer/types";

// Msg defines the Msg service.
service Msg {
      rpc CreateSequencer(MsgCreateSequencer) returns (MsgCreateSequencerResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

// MsgCreateSequencer defines a SDK message for creating a new sequencer.
message MsgCreateSequencer {
  // creator is the bech32-encoded address of the sequencer account which is the account that the message was sent from.
  string creator = 1;
  // pubkey is the public key of the sequencers' dymint client, as a Protobuf Any.
  google.protobuf.Any dymintPubKey = 2 [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
  // rollappId defines the rollapp to which the sequencer belongs.
  string rollappId = 3;
  // description defines the descriptive terms for the sequencer.
  Description description = 4 [(gogoproto.nullable) = false];
}

message MsgCreateSequencerResponse {
}

// this line is used by starport scaffolding # proto/tx/message
