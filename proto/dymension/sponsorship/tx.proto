syntax = "proto3";
package dymensionxyz.dymension.sponsorship;

option go_package = "github.com/dymensionxyz/dymension/v3/x/sponsorship/types";

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "dymension/sponsorship/sponsorship.proto";

// Msg defines the Msg service.
service Msg { rpc Vote(MsgVote) returns (MsgVoteResponse); }

// MsgVoteWeighted defines a message to cast a vote.
message MsgVote {
  option (cosmos.msg.v1.signer) = "voter";

  // Voter is the bech32 encoded address of the user sending the vote.
  string voter = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Votes is a breakdown of user votes for different gauges.
  repeated WeightedVote votes = 2 [ (gogoproto.nullable) = false ];
}

message MsgVoteResponse {}
